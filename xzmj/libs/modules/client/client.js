var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var __extends = this && this.__extends || function __extends(t, e) { 
 function r() { 
 this.constructor = t;
}
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
r.prototype = e.prototype, t.prototype = new r();
};
var nativeInterface = window.nativeInterface;
var nativeBridge = window.nativeBridge;
var inputProto = egret.web.HTMLInput.prototype;
inputProto.initInputElement = function (multiline) {
    var self = this;
    //增加1个空的textarea
    var onInput = function () {
        if (self._stageText) {
            self._stageText._onInput();
        }
    };
    var inputElement;
    if (multiline) {
        inputElement = URLUtil.createInputEle(multiline, "egretTextarea", onInput);
        inputElement.style["resize"] = "none";
        self._multiElement = inputElement;
    }
    else {
        inputElement = URLUtil.createInputEle(multiline, "egretInput", onInput);
        self._simpleElement = inputElement;
        var inputElement1 = URLUtil.createInputEle(multiline, "egretInput1", onInput);
        inputElement1.type = "password";
        self._simpleElement1 = inputElement1;
        self._inputDIV.appendChild(inputElement1);
    }
    self._inputDIV.appendChild(inputElement);
};
inputProto.getInputElement = function (stageText) {
    var self = this;
    self.clearInputElement();
    self._stageText = stageText;
    this.canvas['userTyping'] = true;
    var textField = self._stageText.$textfield;
    var inputElement;
    if (textField.multiline) {
        inputElement = self._multiElement;
    }
    else {
        inputElement = (textField.inputType == "password") ? self._simpleElement1 : self._simpleElement;
    }
    self._inputElement = inputElement;
    self._multiElement.style.display = "none";
    self._simpleElement.style.display = "none";
    self._simpleElement1.style.display = "none";
    inputElement.style.display = "block";
    return inputElement;
};
var URLUtil;
(function (URLUtil) {
    function createInputEle(multiline, id, onInput) {
        //增加1个空的textarea
        var inputElement;
        if (multiline) {
            inputElement = document.createElement("textarea");
            inputElement.style["resize"] = "none";
        }
        else {
            inputElement = document.createElement("input");
        }
        inputElement.id = id;
        inputElement.type = "text";
        inputElement.setAttribute("tabindex", "-1");
        var style = inputElement.style;
        style.width = "1px";
        style.height = "12px";
        style.position = "absolute";
        style.left = "0px";
        style.top = "0px";
        style.border = "none";
        style.padding = "0";
        style.outline = "thin";
        style.background = "none";
        style.overflow = "hidden";
        style.wordBreak = "break-all";
        //隐藏输入框
        style.opacity = 0;
        inputElement.oninput = onInput;
        return inputElement;
    }
    URLUtil.createInputEle = createInputEle;
    function getLocationParam(key) {
        if (!window.location)
            return null;
        var search = location.search;
        if (search != "") {
            search = search.slice(1);
            var searchArr = search.split("&");
            var length_1 = searchArr.length;
            for (var i = 0; i < length_1; i++) {
                var str = searchArr[i];
                var arr = str.split("=");
                if (arr[0] == key) {
                    return arr[1];
                }
            }
        }
        return null;
    }
    URLUtil.getLocationParam = getLocationParam;
    function getLocationParams() {
        var ret = {};
        if (window.location) {
            var search = location.search;
            if (search != "") {
                search = search.slice(1);
                var searchArr = search.split("&");
                var length_2 = searchArr.length;
                for (var i = 0; i < length_2; i++) {
                    var str = searchArr[i];
                    var index = str.indexOf("=");
                    var keyString = str.substring(0, index);
                    var value = str.substring(index + 1, str.length);
                    ret[keyString] = value;
                }
            }
        }
        return ret;
    }
    URLUtil.getLocationParams = getLocationParams;
    function getLocationValue(data) {
        var ret = {};
        var temp = data.split("&");
        var length = temp.length;
        for (var i = 0; i < length; i++) {
            var str = temp[i];
            var index = str.indexOf("=");
            var keyString = str.substring(0, index);
            var value = str.substring(index + 1, str.length);
            ret[keyString] = value;
        }
        return ret;
    }
    URLUtil.getLocationValue = getLocationValue;
    var _params;
    function getWebParam(key) {
        if (_params) {
            return _params[key];
        }
        _params = {};
        var nodes = document.getElementsByTagName("body");
        if (nodes.length > 0) {
            var attributes = nodes[0].attributes;
            var length_3 = attributes.length;
            for (var i = 0; i < length_3; i++) {
                var att = attributes[i];
                _params[att.name] = att.value;
            }
        }
        return _params[key];
    }
    URLUtil.getWebParam = getWebParam;
    function amendSvrDomain(url1, url2) {
        if (url1.indexOf("127.0.0.1") >= 0) {
            var index = url2.indexOf("://");
            if (index < 0)
                index = 0;
            else
                index += 3;
            var index1 = url2.indexOf(":", index);
            if (index1 < 0)
                index1 = url2.length;
            var host = url2.substring(index, index1);
            return url1.replace("127.0.0.1", host);
        }
        return url1;
    }
    URLUtil.amendSvrDomain = amendSvrDomain;
    function openURL(url, options) {
        if (CONF.isNative) {
            var args = void 0;
            if (options) {
                args = options;
                args.url = url;
            }
            else {
                args = { url: url };
            }
            nativeHandler("openWebView", args);
        }
        else {
            window.open(url);
        }
    }
    URLUtil.openURL = openURL;
    function openWxLoginUrl(url) {
        window.location.href = url;
    }
    URLUtil.openWxLoginUrl = openWxLoginUrl;
    function openQQUrl() {
        if (CONF.isNative) {
            nativeHandler("openURL", "mqq://");
        }
        else {
            window.open("mqq://");
        }
    }
    URLUtil.openQQUrl = openQQUrl;
    function openWXUrl() {
        if (CONF.isNative) {
            nativeHandler("openURL", "weixin://");
        }
        else {
            window.open("weixin://");
        }
    }
    URLUtil.openWXUrl = openWXUrl;
    //打开外置浏览器
    function outLayOpenUrl(url) {
        if (CONF.isNative) {
            nativeHandler("openURL", url);
        }
        else {
            window.open(url);
        }
    }
    URLUtil.outLayOpenUrl = outLayOpenUrl;
    function changeWebURL(url) {
        if (!window.location)
            return;
        window.location.assign(url);
    }
    URLUtil.changeWebURL = changeWebURL;
    function getUserAgent() {
        if (egret.Capabilities.runtimeType == egret.RuntimeType.WEB) {
            return navigator ? navigator.userAgent : "";
        }
        return "";
    }
    URLUtil.getUserAgent = getUserAgent;
    function loadScript(src, cb, failCnt) {
        failCnt = failCnt || 0;
        var s = document.createElement('script');
        s.async = false;
        s.src = src;
        var onLoad = function () {
            s.parentNode.removeChild(s);
            s.removeEventListener('load', onLoad, false);
            s.removeEventListener('error', onError, false);
            if (cb)
                cb(src);
        };
        var onError = function () {
            s.parentNode.removeChild(s);
            s.removeEventListener('load', onLoad, false);
            s.removeEventListener('error', onError, false);
            if (failCnt >= 3) {
                if (cb)
                    cb(src);
                return;
            }
            failCnt++;
            TRain.core.addDelayDo(loadScript, URLUtil, failCnt * 1000, 0, false, src, cb, failCnt);
        };
        s.addEventListener('load', onLoad, false);
        s.addEventListener('error', onError, false);
        document.body.appendChild(s);
    }
    URLUtil.loadScript = loadScript;
    function getGlobal(name) {
        return window[name];
    }
    URLUtil.getGlobal = getGlobal;
    function setGlobal(name, val) {
        window[name] = val;
    }
    URLUtil.setGlobal = setGlobal;
    function hideLoad() {
        var e = document.getElementById("loadingDiv");
        e && e.parentNode.removeChild(e);
    }
    URLUtil.hideLoad = hideLoad;
    function getClipboardText(cb) {
        if (CONF.isNative) {
            URLUtil.nativeHandler("getClipboardText", null, cb);
        }
        else {
            cb.call(null);
        }
    }
    URLUtil.getClipboardText = getClipboardText;
    function copyText(value) {
        if (CONF.isNative) {
            nativeHandler("setClipboardText", value);
        }
        else {
            var input = document.createElement("input");
            input.value = value;
            document.body.appendChild(input);
            input.select();
            input.setSelectionRange(0, input.value.length),
                document.execCommand('Copy');
            document.body.removeChild(input);
        }
    }
    URLUtil.copyText = copyText;
    //保存截图
    function saveScreenshot() {
        var renderTexture = new egret.RenderTexture();
        var scene = game.gameScene;
        renderTexture.drawToTexture(scene);
        var base64Str = renderTexture.toDataURL("image/jpeg", new egret.Rectangle(0, 0, scene.width, scene.height));
        base64Str = base64Str.split(",")[1]; //因为这个转化的数据会带上“image/jpeg;base64,......”
        //获取当前时间
        saveImg(Date.now().toString(), base64Str);
    }
    URLUtil.saveScreenshot = saveScreenshot;
    function getWXCallUrl() {
        if (window.location) {
            var param = location.href;
            var search = location.search;
            if (!search) {
                param += "?";
            }
            var paramBase64 = Base64.base64Encode(param);
            var callUrl = CONF.wxCallUrl + "?url=" + paramBase64;
            var encodeUrl = encodeURIComponent(callUrl);
            //获取当前时间戳
            var dateTime = new Date().getTime();
            var lastIdx = CONF.wxCallUrl.lastIndexOf("/");
            var tmpUrl = CONF.wxCallUrl.substring(0, lastIdx) + "/wechat.css";
            return {
                openWXQQUrl: CONF.openWXQQUrl,
                self_redirect: false,
                appid: CONF.appid,
                scope: "snsapi_login",
                redirect_uri: encodeUrl,
                state: dateTime,
                href: encodeURIComponent(tmpUrl),
            };
        }
    }
    URLUtil.getWXCallUrl = getWXCallUrl;
    function saveImg(nm, base64Str) {
        if (CONF.isNative) {
            nativeHandler("saveImage", { nm: nm, str: base64Str });
        }
        else {
            // let img:any = document.createElement("image");
            // img.src = value;
            // document.body.appendChild(img);
            // let range = document.createRange();  
            // range.selectNode( img );  //selectable为下面页面中DIV中的id
            // let selection = window.getSelection();
            // selection.removeAllRanges();
            // selection.addRange(range); 
            // document.execCommand("Copy"); 
            // document.body.removeChild(img);
            // selection.removeAllRanges();
        }
    }
    URLUtil.saveImg = saveImg;
    function isHttps() {
        if (!window.location)
            return false;
        return window.location.protocol == "https:";
    }
    URLUtil.isHttps = isHttps;
    //需要获取设备号才能执行此功能
    function checkDeviceID(okCB, failCB) {
        var ret = CONF.deviceId.length != 0;
        if (ret)
            return okCB();
        if (!CONF.isNative)
            return okCB();
        nativeHandler("getDeviceID", null, function (deviceId) {
            CONF.deviceId = deviceId || "";
            ret = CONF.deviceId.length != 0;
            if (ret) {
                okCB();
            }
            else {
                game.MsgBox.showTipBox(true, 10013 /* device_invalid_error */);
                if (failCB)
                    failCB();
            }
        });
    }
    URLUtil.checkDeviceID = checkDeviceID;
    function hasNativeHandler(funName) {
        if (CONF.isNative) {
            if (nativeBridge) {
                return !!nativeBridge.existHandler && nativeBridge.existHandler(funName);
            }
            else {
                return !!nativeInterface[funName];
            }
        }
        return false;
    }
    URLUtil.hasNativeHandler = hasNativeHandler;
    function nativeHandler(funName, params, cb) {
        // if(funName == "startUpdateGame" && (params.nm == "doudizhu" || params.nm == "dn" || params.nm == "lengend") ){
        //     let num:number = 0;
        //     TRain.core.addFrameDo(function(){
        //         num ++;
        //         let param = params;
        //         if(num >= 100){
        //             if(num == 100){
        //                 game.notifiCenter.postEvent( game.GameUtil.GAME_EVT.update_game_finish, param.nm, {fin:0} );
        //             }
        //         }else{
        //             game.notifiCenter.postEvent( game.GameUtil.GAME_EVT.update_game_progress,param.nm,num);
        //         }
        //     },self,false,200);
        // }
        // TRain.core.addDelayDo( function(){
        //     // game.MsgBox.showErr(langConsts.errCode.device_invalid_error);
        //     if(cb)cb();
        // }, this, 1000 );
        // return;
        var cb1;
        if (cb) {
            cb1 = function (response) {
                if (typeof response == "string") {
                    try {
                        response = JSON.parse(response);
                    }
                    catch (e) {
                        console.log("nativeHandler parse error funName=" + funName + "   response=" + response);
                    }
                }
                cb(response);
            };
        }
        if (params && typeof params == "object") {
            params = JSON.stringify(params);
        }
        try {
            if (nativeBridge) {
                nativeBridge.callHandler(funName, params, cb1);
            }
            else {
                var ret = (params != null) ? nativeInterface[funName](params) : nativeInterface[funName]();
                if (cb1)
                    cb1(ret);
            }
        }
        catch (e) {
            console.log("nativeHandler error funName=" + funName + "   not find" + e);
            //ios 方法没有时 没有什么返回 也不报错
            //if( cb ) cb();
        }
    }
    URLUtil.nativeHandler = nativeHandler;
    function shareRoomGame(gameId, room, tp) {
        var channelID = CONF.channelId;
        var playerId = game.dataMgr.accMo.getData().aid;
        var roomId = gameId * 100000 + room;
        var str = 1 + "|" + playerId + "|" + roomId;
        var encodeKey = Base64.base64Encode(str);
        var urlInfo = CONF.erweima + channelID + "/?channelId=" + channelID + "&recommendId=" + encodeKey;
        if (true)
            console.log("shareRoomGame  urlInfo = ", urlInfo);
        URLUtil.copyText(urlInfo);
        URLUtil.openWXUrl();
    }
    URLUtil.shareRoomGame = shareRoomGame;
    function parseRoomId(val) {
        var str = Base64.decode(val);
        var args = str.split("|");
        if (args.length >= 3) {
            var roomId = parseInt(args[2]);
            if (roomId) {
                var gameId = ~~(roomId / 100000);
                var room = roomId % 100000;
                return { gameId: gameId, roomId: room };
            }
        }
        return null;
    }
    URLUtil.parseRoomId = parseRoomId;
    function moloadErr() {
        var gameMo = game.dataMgr.gameMo;
        gameMo.addListener("moload_fin" /* moload_fin */, function (nm, errData) {
            if (errData.fin != 0 /* OK */) {
                var errNum = void 0;
                var arg1 = errData.args1 || "";
                var isMD5After_1 = errData.fin > 5 /* ZIP_MD5_ERR */;
                if (isMD5After_1) {
                    errNum = 890 /* moLoadErr */ + (errData.fin - 5 /* ZIP_MD5_ERR */);
                }
                else {
                    errNum = 890 /* moLoadErr */;
                }
                var curMo_1 = gameMo.getCurMoInfo(nm);
                //如果是活动和充值模块没加载出来不弹框
                if (nm != "activity" /* activity */ && nm != "recharge" /* recharge */) {
                    game.MsgBox.showPrintBoxCB("mainLang" /* mainLang */, errNum, function (tag) {
                        if (tag == 1) {
                            //重试
                            TRain.core.addDelayDo(gameMo.loadModule, gameMo, 500, 0, false, nm);
                        }
                        else {
                            if (nm == "hall" /* hall */ || nm == "resource" /* resNm */) {
                                if (!isMD5After_1) {
                                    gameMo.skipMoUpdate(nm);
                                }
                                TRain.core.addDelayDo(gameMo.loadModule, gameMo, 500, 0, false, nm);
                            }
                        }
                    }, this, nm, arg1);
                }
                else {
                    var loadNum = curMo_1.loadNum;
                    if (!loadNum) {
                        loadNum = curMo_1.loadNum = 0;
                    }
                    if (loadNum < 2) {
                        TRain.core.addDelayDo(gameMo.loadModule, gameMo, 500, 0, false, nm);
                        curMo_1.loadNum++;
                    }
                    else {
                        if (curMo_1.isBtn) {
                            game.BusyLayer.getInst().hideBusy();
                            game.MsgBox.showPrintBoxCB("mainLang" /* mainLang */, errNum, function (tag) {
                                if (tag == 1) {
                                    //重试
                                    TRain.core.addDelayDo(gameMo.loadModule, gameMo, 500, 0, false, nm);
                                    curMo_1.loadNum = 0;
                                    game.BusyLayer.getInst().showBusy();
                                }
                            }, this, nm, arg1);
                        }
                    }
                }
                var webLogData = game.GameUtil.getWebLogData();
                var tempData = {};
                tempData.code = errData.fin;
                tempData.name = nm;
                tempData.skin = CONF.res.all;
                tempData.type = 1 /* MO */;
                tempData.curVer = curMo_1.curVer;
                tempData.newVer = curMo_1.newVer;
                tempData.args1 = arg1;
                game.HttpUtil.webLogInfo({ playId: webLogData.playId, error: JSON.stringify(tempData), gameId: webLogData.gameId, gameVer: "" });
            }
        }, gameMo);
    }
    URLUtil.moloadErr = moloadErr;
    function gameLoadErr(gameId, errData) {
        var codeStr;
        var gameData = game.dataMgr.gameMo.getGameData(gameId);
        var curNm = gameData.conf.nm;
        var code = errData.fin;
        var arg1 = errData.args1 || "";
        switch (code) {
            case 0 /* OK */:
                codeStr = 846 /* gameLoadOver */;
                break;
            case 3 /* FILE_LOADER_ERR */:
                codeStr = 60 /* Download_Fail */;
                break;
            case 2 /* VER_FORMAT_ERR */:
                codeStr = 849 /* gameVerFMErr */;
                break;
            case 1 /* NO_FUN */:
                codeStr = 850 /* gameNoFun */;
                break;
            case 4 /* UNZIP_ERR */:
                codeStr = 847 /* gameZipErr */;
                break;
            case 5 /* ZIP_MD5_ERR */:
                codeStr = 848 /* gameUpErr */;
                break;
            case 6 /* VER_FILE_ERR */:
                codeStr = 851 /* gameVerErr */;
                break;
        }
        var txt = TRain.langMgr.getTxt("mainLang" /* mainLang */, codeStr);
        var changeTxt = StringUtil.printf(txt, curNm);
        game.MsgBox.showTipBox(false, codeStr, "mainLang" /* mainLang */, changeTxt);
        if (code != 0 /* OK */) {
            var webLogData = game.GameUtil.getWebLogData();
            var tempData = {};
            tempData.code = code;
            tempData.name = gameData.conf.nm;
            tempData.skin = CONF.res.all;
            tempData.type = 0 /* GMD */;
            tempData.args1 = arg1;
            game.HttpUtil.webLogInfo({ playId: webLogData.playId, error: JSON.stringify(tempData), gameId: webLogData.gameId, gameVer: "" });
        }
    }
    URLUtil.gameLoadErr = gameLoadErr;
    // ------------------------- 微信登录二维码 ----------------------
    var _wxDiv;
    function openWx(params) {
        if (_wxDiv) {
            return;
        }
        var defaultSelf = "true";
        if (params.self_redirect != undefined) {
            defaultSelf = params.self_redirect ? "true" : "false";
        }
        var url = "https://open.weixin.qq.com/connect/qrconnect?appid=" + params.appid + "&scope=" + params.scope + "&redirect_uri=" + params.redirect_uri + "&state=" + params.state + "&login_type=jssdk&self_redirect=" + defaultSelf;
        url += params.style ? "&style=" + params.style : "";
        url += params.href ? "&href=" + params.href : "";
        _wxDiv = document.createElement("div");
        _wxDiv.style.position = "fixed";
        _wxDiv.style.left = "0px";
        _wxDiv.style.top = "0px";
        _wxDiv.style.width = "100%";
        _wxDiv.style.height = "100%";
        _wxDiv.style.zIndex = "20";
        _wxDiv.style.background = "white";
        document.body.appendChild(_wxDiv);
        var button = document.createElement("input");
        button.style.position = "relative";
        button.style.display = "block";
        button.style.margin = "0px auto";
        button.style.left = "200px";
        button.style.top = "50px";
        button.style.width = "50px";
        button.style.height = "50px";
        button.style.borderRadius = "50%";
        button.style.border = "none";
        button.type = "button";
        button.value = "关闭";
        button.onclick = onClose;
        _wxDiv.appendChild(button);
        var div = document.createElement("div");
        div.style.margin = "0px auto";
        div.style.width = "300px";
        div.style.height = "400px";
        _wxDiv.appendChild(div);
        var iframe = document.createElement("iframe");
        iframe.src = url,
            iframe.frameBorder = "0",
            iframe.allowTransparency = "true",
            iframe.sandbox = "allow-scripts allow-top-navigation allow-same-origin",
            iframe.scrolling = "no",
            iframe.width = "300px",
            iframe.height = "400px";
        div.appendChild(iframe);
    }
    URLUtil.openWx = openWx;
    function onClose(ev) {
        if (_wxDiv) {
            document.body.removeChild(_wxDiv);
            _wxDiv = null;
            game.notifiCenter.postEvent("chat_close" /* CHAT_CLOSE */);
        }
    }
    //------------------------------------- dom ------------------------------------
    var _root;
    var _ply;
    var _canvas;
    var getStyleName = egret.web.getPrefixStyleName;
    var _originKey = getStyleName("transformOrigin");
    var _transKey = getStyleName("transform");
    function initDomMgr() {
        _root = document.createElement("div");
        _root.setAttribute("id", "egretDOMRoot");
        _ply = document.getElementsByClassName("egret-player")[0];
        _canvas = _ply.getElementsByTagName("canvas")[0];
        initDom(_root);
        var onResize = function () {
            _root.style.left = _canvas.style.left;
            _root.style.top = _canvas.style.top;
            _root.style[_transKey] = _canvas.style[_transKey];
        };
        game.notifiCenter.addListener(egret.Event.RESIZE, onResize, URLUtil);
        onResize();
    }
    function initDom(dom) {
        dom.style.position = "absolute";
        dom.style.border = "0";
        dom.style.left = "0px";
        dom.style.top = "0px";
        dom.style[_originKey] = "0% 0% 0px";
    }
    URLUtil.initDom = initDom;
    function setDomMx(dom, mx) {
        dom.style[_transKey] = "matrix(" + mx.a + "," + mx.b + "," + mx.c + "," + mx.d + "," + mx.tx + "," + mx.ty + ")";
    }
    URLUtil.setDomMx = setDomMx;
    function showDom(dom) {
        if (!_root) {
            initDomMgr();
        }
        _root.appendChild(dom);
        if (!_root.parentNode) {
            _ply.appendChild(_root);
        }
    }
    URLUtil.showDom = showDom;
    function hideDom(dom) {
        _root.removeChild(dom);
        if (_root.childElementCount == 0) {
            _ply.removeChild(_root);
        }
    }
    URLUtil.hideDom = hideDom;
})(URLUtil || (URLUtil = {}));
var game;
(function (game) {
    var Notification = (function () {
        function Notification() {
            this._listens = {};
        }
        Notification.getListen = function () {
            var frees = Notification._frees;
            if (frees.length > 0)
                return frees.pop();
            return { once: false, tar: null, fun: null };
        };
        Notification.freeListen = function (data) {
            data.tar = null;
            data.fun = null;
            Notification._frees.push(data);
        };
        Notification.prototype.hasListener = function (evt, tar) {
            var listens = this._listens[evt];
            if (listens) {
                for (var i = listens.length - 1; i >= 0; --i) {
                    var listen = listens[i];
                    if (!listen.tar) {
                        listens.splice(i, 1);
                        Notification.freeListen(listen);
                    }
                    else {
                        if (!tar || listen.tar == tar)
                            return true;
                    }
                }
            }
            return false;
        };
        Notification.prototype.addListener = function (evt, fun, tar, once) {
            if (true) {
                //egret.log( target.__class__ + "  add  Observer  " + key );
            }
            var allListens = this._listens;
            var listens = allListens[evt];
            if (!listens) {
                listens = allListens[evt] = [];
            }
            else {
                if (true) {
                    for (var i = 0, n = listens.length; i < n; i++) {
                        var temp = listens[i];
                        if (temp.tar == tar && temp.fun == fun) {
                            egret.log(tar.__class__ + "  error:  add  Observer " + evt + " already is exist!");
                        }
                    }
                }
            }
            var data = Notification.getListen();
            data.tar = tar;
            data.fun = fun;
            data.once = once;
            listens.push(data);
        };
        Notification.prototype.rmvListener = function (evt, target) {
            var listens = this._listens[evt];
            if (listens) {
                for (var i = 0, n = listens.length; i < n; i++) {
                    var listen = listens[i];
                    if (listen.tar == target) {
                        // if( DEBUG ){
                        //     egret.log( target.__class__ + "  remove  Observer  " + evt );
                        // }
                        listen.tar = null;
                        listen.fun = null;
                        break;
                    }
                }
            }
        };
        Notification.prototype.rmvAllListener = function (target) {
            var list = this._listens;
            if (target) {
                for (var key in list) {
                    var listens = list[key];
                    for (var i = 0, n = listens.length; i < n; i++) {
                        var listen = listens[i];
                        if (listen.tar == target) {
                            listen.tar = null;
                            listen.fun = null;
                        }
                    }
                }
            }
            else {
                this._listens = {};
                for (var key in list) {
                    var listens = list[key];
                    for (var i = 0, n = listens.length; i < n; i++) {
                        Notification.freeListen(listens[i]);
                    }
                }
            }
        };
        Notification.prototype.delayPostEvent = function (key, delay, param1, param2) {
            var self = this;
            TRain.core.addDelayDo(self.postEvent, self, delay, 0 /* normal */, false, key, param1, param2);
        };
        Notification.prototype.postEvent = function (key, param1, param2) {
            var listens = this._listens[key];
            if (listens) {
                for (var i = listens.length - 1; i >= 0; --i) {
                    var listen = listens[i];
                    if (!listen.tar) {
                        listens.splice(i, 1);
                        Notification.freeListen(listen);
                    }
                    else {
                        listen.fun.call(listen.tar, param1, param2);
                        if (listen.once) {
                            listens.splice(i, 1);
                            Notification.freeListen(listen);
                        }
                    }
                }
            }
        };
        Notification._frees = [];
        return Notification;
    }());
    game.Notification = Notification;
    __reflect(Notification.prototype, "game.Notification");
    game.notifiCenter = new Notification();
    URLUtil.setGlobal("onerror", function (errorMessage, scriptURI, lineNumber, columnNumber, errorObj) {
        var args = [errorMessage];
        if (errorObj) {
            args.push(errorObj.stack);
        }
        game.notifiCenter.postEvent("jserr" /* JS_ERR */, args);
    });
})(game || (game = {}));
var game;
(function (game) {
    /**
     * 界面窗口基类，此类界面必须使用open接口来打开。
     *
     * */
    var UIFWBase = (function (_super) {
        __extends(UIFWBase, _super);
        function UIFWBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UIFWBase.prototype.dispose = function () {
            var self = this;
            if (self.disposed)
                return;
            var container = self.parent;
            if (container) {
                container.removeChild(self);
            }
            var aniWrap = self._aniWrap;
            if (aniWrap) {
                TRain.WrapperMgr.freeWrapper(aniWrap);
                self._aniWrap = null;
            }
            self.stopOpen();
            self.onDispose();
            if (self.gpName) {
                RES.stopGroup(self.gpName);
                self.onLoadFin(null);
            }
        };
        UIFWBase.prototype.onDispose = function () {
            _super.prototype.dispose.call(this);
        };
        UIFWBase.prototype.stopOpen = function () {
            var self = this;
            if (self._openData) {
                self._openData = null;
                TRain.core.rmvDelayDo(self._open, self);
            }
        };
        UIFWBase.prototype.open = function (parent, data, fin, tar) {
            var self = this;
            if (self._openData) {
                if (true)
                    console.error("warning ui only open once!");
                return;
            }
            self._openData = { fin: fin, tar: tar, p: parent, data: data };
            //self._tm = egret.getTimer();
            var needRess = self.getNeedRes();
            if (needRess && needRess.length > 0) {
                game.notifiCenter.addListener("busy_out" /* BUSY_TM_OUT */, self.onLoadFin, self, true);
                RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, self.onLoadFin, self);
                self.gpName = self.skinName || self.name || ("fw" + self.$hashCode);
                game.BusyLayer.getInst().showBusy();
                RES.loadCustomGroup(self.gpName, needRess);
            }
            else {
                TRain.core.addDelayDo(self._open, self, 0);
            }
        };
        UIFWBase.prototype.close = function () {
            var self = this;
            self.stopOpen();
            if (self.parent) {
                var ani = self.getCloseAni();
                if (ani) {
                    self.startAni(ani, self.closeImpl, self);
                }
                else {
                    self.closeImpl();
                }
            }
        };
        UIFWBase.prototype.isOpened = function () {
            return !!this.parent;
        };
        UIFWBase.prototype._open = function () {
            var self = this;
            var openFinData = self._openData;
            self._openData = null;
            var parent = openFinData.p;
            if (parent)
                parent.addChild(self);
            var finFun = openFinData.fin;
            if (finFun) {
                finFun.call(openFinData.tar, self);
            }
            self.openImpl(openFinData.data);
            var ani = self.getOpenAni();
            if (ani)
                self.startAni(ani);
        };
        /**
         *
         * @param data 界面重新显示时， data为空
         */
        UIFWBase.prototype.openImpl = function (data) {
        };
        UIFWBase.prototype.closeImpl = function () {
            var self = this;
            var parent = self.parent;
            if (parent) {
                parent.removeChild(self);
            }
        };
        UIFWBase.prototype.getCloseAni = function () {
            var ani = this._clsAni;
            if (!ani) {
                ani = this._clsAni = new game.CloseFWAni(this);
            }
            return ani;
        };
        UIFWBase.prototype.getOpenAni = function () {
            var ani = this._openAni;
            if (!ani) {
                ani = this._openAni = new game.OpenFWAni(this);
            }
            return ani;
        };
        UIFWBase.prototype.startAni = function (ani, fin, tar) {
            var self = this;
            var wrapper = self._aniWrap;
            if (wrapper) {
                if (wrapper)
                    wrapper.stop();
            }
            else {
                wrapper = self._aniWrap = TRain.WrapperMgr.getWrapper();
            }
            wrapper.ani = ani;
            wrapper.start(fin, tar);
        };
        //------------------------------------------------------
        /**
         * 添加到舞台后且构建完成后调用
         * */
        UIFWBase.prototype.onShow = function (stage) {
        };
        /**
         * 移除舞台后触发
         * */
        UIFWBase.prototype.onHide = function () {
        };
        UIFWBase.prototype.$onAddToStage = function (stage, nestLevel) {
            _super.prototype.$onAddToStage.call(this, stage, nestLevel);
            this.onShow(stage);
        };
        UIFWBase.prototype.$onRemoveFromStage = function () {
            _super.prototype.$onRemoveFromStage.call(this);
            this.onHide();
        };
        UIFWBase.prototype.getNeedRes = function () {
            var ret;
            var needRess = this._needRess;
            if (needRess && needRess.length > 0) {
                ret = [];
                for (var i = 0, len = needRess.length; i < len; i++) {
                    var needRes = needRess[i];
                    var idx = needRes.lastIndexOf("#");
                    if (idx > 0) {
                        var name_1 = needRes.substring(0, idx);
                        var tp = needRes.substr(idx + 1);
                        switch (tp) {
                            case "fnt" /* FONT */:
                                name_1 = CONF.fontUrl + name_1 + "." + tp;
                                break;
                            case "st" /* SHEET */:
                                name_1 = CONF.sheetUrl + name_1 + "." + tp;
                                break;
                            default:
                                tp = null;
                                break;
                        }
                        ret.push([name_1, tp]);
                    }
                    else {
                        var resItm = RES.getResConf(needRes);
                        if (resItm)
                            ret.push(resItm);
                    }
                }
            }
            return ret;
        };
        UIFWBase.prototype.onLoadFin = function (event) {
            var self = this;
            if (event && event.groupName != self.gpName)
                return;
            if (self.gpName) {
                self.gpName = null;
                RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, self.onLoadFin, self);
                game.notifiCenter.rmvAllListener(self);
                game.BusyLayer.getInst().hideBusy();
            }
            if (self.disposed || !self._openData)
                return;
            TRain.core.addDelayDo(self._open, self, 0);
        };
        return UIFWBase;
    }(cui.Component));
    game.UIFWBase = UIFWBase;
    __reflect(UIFWBase.prototype, "game.UIFWBase");
})(game || (game = {}));
var game;
(function (game) {
    /**
     * 界面窗口基类，此类界面必须使用open接口来打开。
     *
     * */
    var UIFullFW = (function (_super) {
        __extends(UIFullFW, _super);
        function UIFullFW() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @
         * 舞台尺寸改变
         */
        UIFullFW.prototype.onResize = function (w, h) {
        };
        UIFullFW.prototype.doResize = function (w, h) {
            var self = this;
            self.width = w;
            self.height = h;
            TRain.core.addDelayDo(self.onResize, self, 0, 0, false, w, h);
        };
        UIFullFW.prototype.$onAddToStage = function (stage, nestLevel) {
            var self = this;
            var w = stage.$stageWidth;
            var h = stage.$stageHeight;
            if (self.width != w || self.height != h) {
                self.doResize(w, h);
            }
            _super.prototype.$onAddToStage.call(this, stage, nestLevel);
            game.notifiCenter.addListener(egret.Event.RESIZE, self.doResize, self);
        };
        UIFullFW.prototype.$onRemoveFromStage = function () {
            _super.prototype.$onRemoveFromStage.call(this);
            game.notifiCenter.rmvListener(egret.Event.RESIZE, this);
        };
        return UIFullFW;
    }(game.UIFWBase));
    game.UIFullFW = UIFullFW;
    __reflect(UIFullFW.prototype, "game.UIFullFW");
})(game || (game = {}));
var game;
(function (game) {
    /**
     * 界面弹出窗口基类
     *
     * */
    var UIPopup = (function (_super) {
        __extends(UIPopup, _super);
        function UIPopup() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.pri = -10 /* back */;
            self.useOnce = true;
            return _this;
        }
        UIPopup.prototype.openImpl = function (data) {
            _super.prototype.openImpl.call(this, data);
            var delegate = this.delegate;
            if (delegate) {
                delegate.onPopupOpen(this);
            }
        };
        UIPopup.prototype.getCloseAni = function () {
            return null;
        };
        UIPopup.prototype.closeImpl = function () {
            _super.prototype.closeImpl.call(this);
            var self = this;
            var delegate = self.delegate;
            if (delegate) {
                delegate.onPopupClose(self);
            }
            if (self.useOnce) {
                self.dispose();
            }
        };
        return UIPopup;
    }(game.UIFWBase));
    game.UIPopup = UIPopup;
    __reflect(UIPopup.prototype, "game.UIPopup");
    var PopupLayer = (function (_super) {
        __extends(PopupLayer, _super);
        function PopupLayer() {
            var _this = _super.call(this) || this;
            var self = _this;
            var img = self._bgImg = new cui.Image("common@mk_bg");
            img.perWidth = 100;
            img.perHeight = 100;
            img.visible = false;
            self.addChild(img);
            self._curPri = 0 /* normal */;
            self._canPop = true;
            self._deque = [];
            self.addEventListener(egret.TouchEvent.TOUCH_END, function (evt) {
                if (evt.target != self)
                    return;
                var childCnt = self.numChildren;
                if (childCnt > 0) {
                    var popView = self.getChildAt(childCnt - 1);
                    if ((popView instanceof UIPopup) && popView.bgClose) {
                        popView.close();
                    }
                }
            }, self);
            return _this;
        }
        PopupLayer.prototype.startPop = function () {
            var self = this;
            if (!self._canPop) {
                self._canPop = true;
                var delegate = self.delegate;
                if (self.numElements > 0) {
                    if (delegate)
                        delegate.showLayer(self);
                }
                else if (self._deque.length > 0) {
                    if (delegate)
                        delegate.showLayer(self);
                    self.update();
                }
            }
        };
        PopupLayer.prototype.stopPop = function () {
            var self = this;
            if (self._canPop) {
                self._canPop = false;
                var delayTag = self._delayTag;
                if (delayTag) {
                    TRain.core.rmvDelayDoByID(delayTag);
                    self._delayTag = 0;
                }
                if (self.delegate)
                    self.delegate.hideLayer(self);
            }
        };
        PopupLayer.prototype.openPopup = function (ui, openData) {
            var self = this;
            if (ui.parent) {
                ui.open(ui.parent, openData);
                return;
            }
            if (self._canPop && ((!self.hasPopup() && !self._waitUI) || self._curPri < ui.pri)) {
                //显示
                self._openPopup(ui, openData);
            }
            else {
                var i = void 0, len = void 0;
                var deque = self._deque;
                for (i = 0, len = deque.length; i < len; ++i) {
                    var tmp = deque[i].ui;
                    if (ui.pri < tmp.pri) {
                        break;
                    }
                }
                deque.splice(i, 0, { ui: ui, data: openData });
            }
        };
        PopupLayer.prototype._openPopup = function (popup, openData) {
            var self = this;
            self._curPri = popup.pri;
            if (self.delegate && !self.hasPopup())
                self.delegate.showLayer(self);
            self._waitUI = popup;
            popup.visible = false;
            popup.open(self, openData, function (ui) {
                if (self._waitUI == popup) {
                    self._waitUI = null;
                    self.reset();
                }
            }, self);
        };
        /**
         * 删除所有的弹出界面，包括队列内的
         * */
        PopupLayer.prototype.closeAll = function () {
            var self = this;
            var deque = self._deque;
            var view;
            var popView;
            var len = deque.length;
            if (true) {
                var viewNames = [];
                for (var m = 0; m < len; m++) {
                    viewNames.push(deque[m].ui.name);
                }
                for (var n = self.numElements - 1; n >= 0; n--) {
                    popView = self.getChildAt(n);
                    if (popView instanceof game.UIPopup) {
                        viewNames.push(popView.name);
                    }
                }
                if (viewNames.length > 0) {
                    console.log("关闭所有弹出界面：" + viewNames);
                }
            }
            for (var i = 0; i < len; i++) {
                view = deque[i].ui;
                view.close();
            }
            self._deque.length = 0;
            var children = self.$children;
            for (var j = children.length - 1; j >= 0; j--) {
                popView = children[j];
                if (popView instanceof UIPopup) {
                    popView.close();
                }
            }
        };
        PopupLayer.prototype.hasPopup = function () {
            return (this._deque.length + this.numElements) > 1;
        };
        PopupLayer.prototype.$childRemoved = function (child, index) {
            _super.prototype.$childRemoved.call(this, child, index);
            if (child instanceof UIPopup) {
                var self_1 = this;
                if (!self_1._delayTag) {
                    self_1._delayTag = TRain.core.addDelayDo(function () {
                        self_1._delayTag = 0;
                        self_1.update();
                    }, self_1, 0);
                }
            }
        };
        PopupLayer.prototype.update = function () {
            var self = this;
            if (self._waitUI)
                return;
            if (self.numChildren == 1) {
                var deque = self._deque;
                var openData = void 0;
                while (deque.length > 0) {
                    openData = deque.pop();
                    if (!openData.ui.disposed)
                        break;
                    openData = null;
                }
                if (openData) {
                    self._openPopup(openData.ui, openData.data);
                }
                else {
                    if (self.delegate) {
                        self.delegate.hideLayer(self);
                    }
                }
            }
            else {
                self.reset();
            }
        };
        PopupLayer.prototype.reset = function () {
            var self = this;
            var children = self.$children;
            var firstUI;
            for (var j = children.length - 1; j >= 0; j--) {
                var ctrl = children[j];
                if (ctrl instanceof UIPopup) {
                    if (firstUI) {
                        ctrl.visible = false;
                    }
                    else {
                        firstUI = ctrl;
                    }
                }
            }
            var curPri = 0;
            if (firstUI) {
                firstUI.visible = true;
                curPri = firstUI.pri;
                self._bgImg.visible = !firstUI.hideBg;
            }
            self._curPri = curPri;
        };
        return PopupLayer;
    }(cui.Group));
    game.PopupLayer = PopupLayer;
    __reflect(PopupLayer.prototype, "game.PopupLayer");
})(game || (game = {}));
var TRain;
(function (TRain) {
    var AniBase = (function () {
        function AniBase(tar) {
            this.tar = tar;
        }
        AniBase.prototype.setData = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
        };
        //动画开启前
        AniBase.prototype.beforeAni = function () {
            var props = this._props;
            if (props) {
                var tar = this.tar;
                for (var key in props) {
                    props[key] = tar[key];
                }
            }
        };
        //动画结束前
        AniBase.prototype.endAni = function () {
            var props = this._props;
            if (props) {
                var tar = this.tar;
                for (var key in props) {
                    tar[key] = props[key];
                }
            }
        };
        AniBase.prototype.clear = function () {
            var self = this;
            self.endAni();
            self.action.clear();
            self.tar = null;
        };
        return AniBase;
    }());
    TRain.AniBase = AniBase;
    __reflect(AniBase.prototype, "TRain.AniBase");
    var AniWrapper = (function () {
        function AniWrapper() {
            var self = this;
            self.inAni = false;
            var actEnd = new TRain.ActionCallDo();
            actEnd.once = false;
            actEnd.setCall(self.actFin, self);
            self._acts = [null, actEnd];
            self._seqAct = new TRain.ActionSequence();
            self._data = { fun: null, tar: null };
        }
        AniWrapper.prototype.clear = function () {
            var self = this;
            if (self.inAni) {
                self._seqAct.stop();
                self.inAni = false;
                self.ani.clear();
                var data = self._data;
                data.fun = undefined;
                data.tar = undefined;
            }
            self._acts[0] = null;
            self.ani = null;
        };
        AniWrapper.prototype.start = function (finFun, tar) {
            var self = this;
            var data = self._data;
            data.fun = finFun;
            data.tar = tar;
            var aniObj = self.ani;
            aniObj.beforeAni();
            var action = aniObj.action;
            var acts = self._acts;
            acts[0] = action;
            var seqAct = self._seqAct;
            seqAct.setActions(acts);
            TRain.actionMgr.addAction(seqAct, aniObj.tar, false);
            self.inAni = true;
        };
        AniWrapper.prototype.stop = function () {
            var self = this;
            if (self.inAni) {
                self._seqAct.stop();
                self.actFin(null, true);
            }
        };
        AniWrapper.prototype.actFin = function (tar, notDo) {
            var self = this;
            self.inAni = false;
            self.ani.endAni();
            var data = self._data;
            if (data.fun) {
                if (!notDo)
                    data.fun.call(data.tar);
                data.fun = undefined;
                data.tar = undefined;
            }
        };
        return AniWrapper;
    }());
    TRain.AniWrapper = AniWrapper;
    __reflect(AniWrapper.prototype, "TRain.AniWrapper");
    var WrapperMgr;
    (function (WrapperMgr) {
        var _wraps = [];
        function getWrapper() {
            if (_wraps.length > 0) {
                var wrapper = _wraps.pop();
                wrapper.inFree = false;
                return wrapper;
            }
            return new AniWrapper();
        }
        WrapperMgr.getWrapper = getWrapper;
        function freeWrapper(wrapper) {
            if (true && wrapper.inFree)
                egret.error("wrapper already free");
            if (wrapper.inFree) {
                return;
            }
            wrapper.clear();
            wrapper.inFree = true;
            _wraps.push(wrapper);
        }
        WrapperMgr.freeWrapper = freeWrapper;
    })(WrapperMgr = TRain.WrapperMgr || (TRain.WrapperMgr = {}));
})(TRain || (TRain = {}));
var game;
(function (game) {
    game.msgPrompt = {
        showErr: function (errCode) { console.log("errCode=" + errCode); },
        showPrompt: function (errCode) { console.log("promptCode=" + errCode); },
    };
    /**
     *
     * 数据类基类，内含有本地配置表数据_configData 和 服务器下发数据 _svrData。
     * 对数据操作逻辑
     *
     * */
    var DataModel = (function (_super) {
        __extends(DataModel, _super);
        function DataModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * 配置表加载完成后调用。再各自的数据类中解析客户端配置数据
         * */
        DataModel.prototype.onLoadConf = function (data) {
            var self = this;
            self.confLoaded = true;
        };
        DataModel.prototype.setData = function (data) {
            this._data = data;
        };
        DataModel.prototype.getData = function () {
            return this._data;
        };
        DataModel.prototype.getVal = function (key) {
            return this._data[key];
        };
        DataModel.prototype.addVal = function (key, val) {
            this.setVal(key, this._data[key] + val);
        };
        DataModel.prototype.setVal = function (key, val) {
            var self = this;
            self._data[key] = val;
            var lProps = self._lProps;
            if (lProps) {
                var keyStr = key.toString();
                if (lProps.indexOf(keyStr) >= 0)
                    self.postEvent(keyStr, val);
            }
        };
        DataModel.prototype.updateData = function (newData) {
            var self = this;
            var curData = self._data;
            for (var key in newData) {
                curData[key] = newData[key];
            }
            var lProps = self._lProps;
            if (lProps) {
                for (var i = 0, n = lProps.length; i < n; ++i) {
                    var propKey = lProps[i];
                    var val = newData[propKey];
                    if (val !== undefined) {
                        self.postEvent(propKey, val);
                    }
                }
            }
        };
        DataModel.prototype.addPropListener = function (propKey, fun, tar) {
            var self = this;
            self.addListener(propKey, fun, tar);
            var lProps = self._lProps;
            if (lProps) {
                if (lProps.indexOf(propKey) < 0)
                    lProps.push(propKey);
            }
            else {
                self._lProps = [propKey];
            }
        };
        DataModel.prototype.rmvPropListener = function (propKey, tar) {
            var self = this;
            self.rmvListener(propKey, tar);
            var lProps = self._lProps;
            if (lProps) {
                var idx = lProps.indexOf(propKey);
                if (idx > 0 && !self.hasListener(propKey)) {
                    lProps.splice(idx, 1);
                }
            }
        };
        return DataModel;
    }(game.Notification));
    game.DataModel = DataModel;
    __reflect(DataModel.prototype, "game.DataModel");
})(game || (game = {}));
var game;
(function (game) {
    var RouteModel = (function (_super) {
        __extends(RouteModel, _super);
        function RouteModel(maxHisCnt, overRmvcnt, winTp, loseTp) {
            var _this = _super.call(this) || this;
            var self = _this;
            self._lastIdxs = [];
            self._historys = [];
            var tmps = self._tmps = [];
            var routes = self._routes = [];
            for (var i = 0; i < 5 /* max */; ++i) {
                routes.push([]);
                tmps.push([]);
            }
            self.maxHisCnt = maxHisCnt || 100 /* maxHisCnt */;
            self.overRmvcnt = overRmvcnt || 1 /* overRmvcnt */;
            self.winType = winTp || 1 /* win */;
            self.loseType = loseTp || 2 /* lose */;
            return _this;
        }
        Object.defineProperty(RouteModel.prototype, "historys", {
            get: function () {
                return this._historys;
            },
            //设置 将会重置数据
            set: function (data) {
                var self = this;
                self._historys = data;
                var tmps = self._tmps;
                self.freeArrs(tmps[0 /* zhupanlu */]);
                self.freeArrs(tmps[1 /* dalu */]);
                var routes = self._routes;
                routes[0 /* zhupanlu */].length = 0;
                routes[1 /* dalu */].length = 0;
                self._handHistory(0, true);
                //self.delayPostEvent(RouteMo_EVT.DATA_CHANGE, 0);
                self.postEvent("d_change" /* DATA_CHANGE */);
            },
            enumerable: true,
            configurable: true
        });
        RouteModel.prototype.addHistory = function (data) {
            var self = this;
            var historys = self._historys;
            var addCnt = 1;
            if (data instanceof Array) {
                addCnt = data.length;
                for (var i = 0; i < addCnt; ++i) {
                    historys.push(data[i]);
                }
            }
            else {
                historys.push(data);
            }
            if (historys.length > self.maxHisCnt) {
                self.shiftHistory(self.overRmvcnt);
                self._handHistory(historys.length - addCnt, true);
                self.postEvent("d_change" /* DATA_CHANGE */);
            }
            else {
                self._handHistory(historys.length - addCnt);
                self.postEvent("d_update" /* DATA_UPDATE */);
            }
        };
        //珠盘路 数据
        //tp为number  时 从1开始
        RouteModel.prototype.getRouteData = function (tp) {
            return this._routes[tp];
        };
        RouteModel.prototype.getGdwayNm = function (tp) {
            var self = this;
            if (!self.data2GdWay) {
                return "";
            }
            return self.data2GdWay(self.calGdWayType(tp));
        };
        /**
         *
         * @param routeList
         *
         * 0无、1长红、2长黑、3大路单跳、4拍拍黐、5一厅两房、6一房两厅、7逢红黐、8逢黑黐、9隔黐红、10隔黐黑
         */
        RouteModel.prototype.calGdWayType = function (tp) {
            var self = this;
            var routeList = self._routes[1 /* dalu */];
            var len = routeList.length;
            if (len == 0) {
                return 0 /* none */;
            }
            var newArr = [];
            for (var i = 0; i < len; ++i) {
                var curRoute = routeList[i];
                var curCol = Math.floor(i / 6 /* maxRow */);
                var curLine = i % 6 /* maxRow */;
                var upData = routeList[i - 1];
                if (curRoute) {
                    var curColData = newArr[curCol];
                    if (!curColData) {
                        if (curLine == 0) {
                            curColData = { r: curRoute.r, num: 1 };
                            newArr[curCol] = curColData;
                        }
                        continue;
                    }
                    if (curColData.r == curRoute.r && upData) {
                        curColData.num++;
                        newArr[curCol] = curColData;
                    }
                }
            }
            newArr = newArr.reverse().splice(0, 7);
            var newLen = newArr.length;
            //倒数7位
            var lastData = newArr[0];
            var lastData1 = newArr[1];
            var lastData2 = newArr[2];
            var lastData3 = newArr[3];
            var lastData4 = newArr[4];
            var lastData5 = newArr[5];
            var lastData6 = newArr[6];
            if (lastData.num >= 4) {
                return lastData.r == self.winType ? 1 /* first */ : 2 /* second */;
            }
            if (newLen >= 4 && lastData.num == 1 && lastData1.num == 1 && lastData2.num == 1 && lastData3.num == 1) {
                return 3 /* three */;
            }
            if (newLen >= 3 && lastData.num >= 2 && lastData1.num >= 2 && lastData2.num >= 2) {
                return 4 /* four */;
            }
            if (newLen >= 4) {
                if ((lastData.r == self.loseType && lastData.num == 2)
                    && (lastData1.r == self.winType && lastData1.num == 1)
                    && (lastData2.r == self.loseType && lastData2.num == 2)
                    && (lastData3.r == self.winType && lastData3.num == 1)) {
                    return 5 /* five */;
                }
                if ((lastData.r == self.winType && lastData.num == 2)
                    && (lastData1.r == self.loseType && lastData1.num == 1)
                    && (lastData2.r == self.winType && lastData2.num == 2)
                    && (lastData3.r == self.loseType && lastData3.num == 1)) {
                    return 6 /* six */;
                }
                if ((lastData.r == self.loseType && lastData.num == 1)
                    && (lastData1.r == self.winType && lastData1.num == 2)
                    && (lastData2.r == self.loseType && lastData2.num == 1)
                    && (lastData3.r == self.winType && lastData3.num >= 4)) {
                    return 7 /* seven */;
                }
                if ((lastData.r == self.winType && lastData.num == 2)
                    && (lastData1.r == self.loseType && lastData1.num >= 4)
                    && (lastData2.r == self.winType && lastData2.num == 1)
                    && (lastData3.r == self.loseType && lastData3.num == 2)) {
                    return 8 /* eight */;
                }
            }
            if (newLen >= 7) {
                if ((lastData.r == self.winType && lastData.num >= 2)
                    && (lastData1.r == self.loseType && lastData1.num >= 1)
                    && (lastData2.r == self.winType && lastData2.num == 1)
                    && (lastData3.r == self.loseType && lastData3.num >= 1)
                    && (lastData4.r == self.winType && lastData4.num >= 2)
                    && (lastData5.r == self.loseType && lastData5.num >= 1)
                    && (lastData6.r == self.winType && lastData6.num == 1)) {
                    return 9 /* nine */;
                }
                if ((lastData.r == self.loseType && lastData.num >= 2)
                    && (lastData1.r == self.winType && lastData1.num >= 1)
                    && (lastData2.r == self.loseType && lastData2.num == 1)
                    && (lastData3.r == self.winType && lastData3.num >= 1)
                    && (lastData4.r == self.loseType && lastData4.num >= 2)
                    && (lastData5.r == self.winType && lastData5.num >= 1)
                    && (lastData6.r == self.loseType && lastData6.num == 1)) {
                    return 10 /* ten */;
                }
            }
            return 0 /* none */;
        };
        //獲取牌路最後添加的索引
        RouteModel.prototype.getRouteLastIdx = function (tp) {
            return this._lastIdxs[tp];
        };
        RouteModel.prototype.getForecast = function () {
            var self = this;
            var winResult = [0 /* none */, 0 /* none */, 0 /* none */];
            var lostResult = [0 /* none */, 0 /* none */, 0 /* none */];
            var daluTmp = self._tmps[1 /* dalu */];
            var lastCol = daluTmp.length - 1;
            if (lastCol > 1) {
                var colDatas = daluTmp[lastCol];
                var colLen = colDatas.length;
                var lastData = colDatas[colLen - 1];
                var tmpData = { r: lastData.r };
                var firstResults = void 0, secondResults = void 0;
                if (tmpData.r == 1 /* win */) {
                    firstResults = winResult;
                    secondResults = lostResult;
                }
                else {
                    firstResults = lostResult;
                    secondResults = winResult;
                }
                colDatas.push(tmpData);
                firstResults[0] = self.calcDYZLResult(daluTmp, lastCol, colLen);
                firstResults[1] = self.calcXLResult(daluTmp, lastCol, colLen);
                firstResults[2] = self.calcXQLResult(daluTmp, lastCol, colLen);
                tmpData.r = tmpData.r == 1 /* win */ ? 2 /* lose */ : 1 /* win */;
                colDatas.pop();
                var freeArr = CacheUtil.getArr();
                freeArr.push(tmpData);
                daluTmp.push(freeArr);
                lastCol++;
                secondResults[0] = self.calcDYZLResult(daluTmp, lastCol, 0);
                secondResults[1] = self.calcXLResult(daluTmp, lastCol, 0);
                secondResults[2] = self.calcXQLResult(daluTmp, lastCol, 0);
                daluTmp.pop();
                CacheUtil.freeArr(freeArr);
            }
            return [winResult, lostResult];
        };
        RouteModel.prototype.freeArrs = function (list) {
            for (var col = 0, colCnt = list.length; col < colCnt; ++col) {
                var arr = list[col];
                if (arr)
                    CacheUtil.freeArr(arr);
            }
            list.length = 0;
        };
        //----------------------------------------------------------------------
        RouteModel.prototype._handHistory = function (stIdx, resetSub) {
            var self = this;
            var historys = self._historys;
            var zpls = self._routes[0 /* zhupanlu */];
            var tmpLen = zpls.length;
            var doFun = self.data2Zhupanlu;
            for (var cnt = historys.length; stIdx < cnt; stIdx++) {
                zpls.push(doFun(historys[stIdx]));
            }
            self._lastIdxs[0 /* zhupanlu */] = zpls.length - 1;
            var daluTmp = self._tmps[1 /* dalu */];
            var oldCol = daluTmp.length;
            var oldRow = 0;
            if (oldCol > 0) {
                oldCol--;
                oldRow = daluTmp[oldCol].length;
            }
            self.zpl2Dalu(zpls, tmpLen, daluTmp);
            var ret = self._routes[1 /* dalu */];
            if (resetSub) {
                oldCol = 0;
                oldRow = 0;
                ret.length = 0;
            }
            self._lastIdxs[1 /* dalu */] = self.two2one(daluTmp, ret, oldCol, oldRow);
            self.calcSubs(daluTmp, resetSub, oldCol, oldRow);
        };
        RouteModel.prototype.shiftHistory = function (cnt) {
            var self = this;
            var historys = self._historys;
            var routes = self._routes[0 /* zhupanlu */];
            var daluList = self._tmps[1 /* dalu */];
            historys.splice(0, cnt);
            routes.splice(0, cnt);
            while (cnt > 0 && daluList.length > 0) {
                var colDatas = daluList[0];
                var len = colDatas.length;
                if (len > cnt) {
                    colDatas.splice(0, cnt);
                    cnt = 0;
                }
                else {
                    CacheUtil.freeArr(daluList.shift());
                    cnt -= len;
                }
            }
        };
        RouteModel.prototype.zpl2Dalu = function (list, stIdx, ret) {
            stIdx = stIdx || 0;
            var newColDatas;
            var curTp;
            var lastTp;
            var lastResult;
            var len = ret.length;
            if (len > 0) {
                newColDatas = ret[len - 1];
                var len1 = newColDatas.length;
                lastResult = newColDatas[len1 - 1];
                lastTp = lastResult.r;
            }
            for (var i = stIdx, cnt = list.length; i < cnt; i++) {
                var result = list[i];
                curTp = result.r;
                if (curTp == 3 /* peace */ || curTp == 4 /* peaceSmall */) {
                    if (lastResult)
                        lastResult.pt = (lastResult.pt || 0) + 1;
                    if (game.dataMgr.accMo.gameId == 3 /* hlgz */) {
                        lastResult = { r: 0 /* none */, pt: 0 };
                        lastResult.r = curTp == 3 /* peace */ ? 1 /* win */ : 2 /* lose */;
                        if (lastResult.r != lastTp) {
                            newColDatas = CacheUtil.getArr();
                            ret.push(newColDatas);
                        }
                        newColDatas.push(lastResult);
                        lastTp = lastResult.r;
                    }
                }
                else {
                    if (curTp != lastTp) {
                        newColDatas = CacheUtil.getArr();
                        ret.push(newColDatas);
                    }
                    lastResult = { r: curTp, pt: 0 };
                    newColDatas.push(lastResult);
                    lastTp = curTp;
                }
            }
        };
        //--------------------------------- 子路 ---------------------------------------
        RouteModel.prototype.calcSubs = function (daluList, reset, stCol, stRow) {
            var self = this;
            if (reset)
                self.resetSubs();
            self.result2Sub(daluList, 2 /* dayanzailu */, stCol, stRow);
            self.result2Sub(daluList, 3 /* xiaolu */, stCol, stRow);
            self.result2Sub(daluList, 4 /* xiaoqianglu */, stCol, stRow);
        };
        RouteModel.prototype.resetSubs = function () {
            var self = this;
            var tmps = self._tmps;
            self.freeArrs(tmps[2 /* dayanzailu */]);
            self.freeArrs(tmps[3 /* xiaolu */]);
            self.freeArrs(tmps[4 /* xiaoqianglu */]);
            var routes = self._routes;
            routes[2 /* dayanzailu */].length = 0;
            routes[3 /* xiaolu */].length = 0;
            routes[4 /* xiaoqianglu */].length = 0;
        };
        RouteModel.prototype.result2Sub = function (list, tp, col, row) {
            var self = this;
            col = col || 0;
            var doFun = null;
            switch (tp) {
                case 2 /* dayanzailu */:
                    if (col < 1)
                        col = 1;
                    doFun = self.calcDYZLResult;
                    break;
                case 3 /* xiaolu */:
                    doFun = self.calcXLResult;
                    if (col < 2)
                        col = 2;
                    break;
                case 4 /* xiaoqianglu */:
                    doFun = self.calcXQLResult;
                    if (col < 3)
                        col = 3;
                    break;
            }
            if (doFun) {
                row = row || 1;
                var colDatas = list[col];
                if (colDatas && !colDatas[row]) {
                    if (colDatas.length < row) {
                        colDatas = null;
                    }
                    else {
                        col++;
                        row = 0;
                        colDatas = list[col];
                    }
                }
                if (colDatas) {
                    var retTmp = self._tmps[tp];
                    var oldCol = retTmp.length;
                    var oldRow = 0;
                    if (oldCol > 0) {
                        oldCol--;
                        oldRow = retTmp[oldCol].length;
                    }
                    self._result2Sub(list, col, row, doFun, retTmp);
                    var ret = self._routes[tp];
                    self._lastIdxs[tp] = self.two2one(retTmp, ret, oldCol, oldRow);
                }
            }
        };
        /**
         *
         * @param ret 处理后 值存放的 一维数组
         * @param list 待处理的二维数组
         * @param col 有， 则从指定列开始
         * @param row 有， 则从指定行开始
         * @param free 是否要回收数组  内部使用， 外部不要使用
         */
        RouteModel.prototype.two2one = function (list, ret, col, row) {
            var lastIdx = 0;
            for (var colCnt = list.length; col < colCnt; ++col) {
                var colDatas = list[col];
                var startIdx = col * 6 /* maxRow */;
                var returnRow = -1;
                for (var rowCnt = colDatas.length; row < rowCnt; ++row) {
                    if (returnRow < 0 && row > 0) {
                        if (row >= 6 /* maxRow */ || !!ret[row + startIdx]) {
                            returnRow = row - 1;
                            if (row > 6 /* maxRow */) {
                                startIdx += (row - 6 /* maxRow */) * 6 /* maxRow */;
                                returnRow = 6 /* maxRow */ - 1;
                            }
                        }
                    }
                    var tmpRow = row;
                    if (returnRow >= 0) {
                        tmpRow = returnRow;
                        startIdx += 6 /* maxRow */;
                    }
                    lastIdx = tmpRow + startIdx;
                    ret[tmpRow + startIdx] = colDatas[row];
                }
                row = 0;
            }
            return lastIdx;
        };
        RouteModel.prototype._result2Sub = function (list, col, row, doFun, ret) {
            var colDatas, newColDatas;
            var curTp, lastTp;
            var newResult;
            var len = ret.length;
            if (len > 0) {
                newColDatas = ret[len - 1];
                var len1 = newColDatas.length;
                lastTp = newColDatas[len1 - 1].r;
            }
            for (var colLen = list.length; col < colLen; col++) {
                colDatas = list[col];
                for (var rowLen = colDatas.length; row < rowLen; row++) {
                    //大眼仔路
                    curTp = doFun(list, col, row);
                    if (curTp != lastTp) {
                        newColDatas = CacheUtil.getArr();
                        ret.push(newColDatas);
                    }
                    newResult = { r: curTp };
                    newColDatas.push(newResult);
                    lastTp = curTp;
                }
                row = 0;
            }
        };
        //大眼仔路
        RouteModel.prototype.calcDYZLResult = function (lists, col, row) {
            if (row > 0) {
                if (col < 1)
                    return 0 /* none */;
                var last1Col = lists[col - 1];
                return (last1Col[row] || !last1Col[row - 1]) ? 1 /* win */ : 2 /* lose */;
            }
            else {
                if (col < 2)
                    return 0 /* none */;
                return lists[col - 1].length == lists[col - 2].length ? 1 /* win */ : 2 /* lose */;
            }
        };
        //小路
        RouteModel.prototype.calcXLResult = function (lists, col, row) {
            if (row > 0) {
                if (col < 2)
                    return 0 /* none */;
                var last1Col = lists[col - 2];
                return (last1Col[row] || !last1Col[row - 1]) ? 1 /* win */ : 2 /* lose */;
            }
            else {
                if (col < 3)
                    return 0 /* none */;
                return lists[col - 1].length == lists[col - 3].length ? 1 /* win */ : 2 /* lose */;
            }
        };
        //小强路
        RouteModel.prototype.calcXQLResult = function (lists, col, row) {
            if (row > 0) {
                if (col < 3)
                    return 0 /* none */;
                var last1Col = lists[col - 3];
                return (last1Col[row] || !last1Col[row - 1]) ? 1 /* win */ : 2 /* lose */;
            }
            else {
                if (col < 4)
                    return 0 /* none */;
                return lists[col - 1].length == lists[col - 4].length ? 1 /* win */ : 2 /* lose */;
            }
        };
        return RouteModel;
    }(game.Notification));
    game.RouteModel = RouteModel;
    __reflect(RouteModel.prototype, "game.RouteModel");
})(game || (game = {}));
var game;
(function (game) {
    var BaseScene = (function (_super) {
        __extends(BaseScene, _super);
        function BaseScene() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.hitCheckBound = false;
            return _this;
        }
        // protected onPartAdded():void{
        //     let self = this;
        //     let stageWidth = self.$stage.$stageWidth;
        //     self.x = Math.floor( (stageWidth-Consts.DESIGN_WIDTH)/2 );
        // }
        /**
         * @
         * 舞台尺寸改变
         */
        BaseScene.prototype.onResize = function (w, h) {
            var self = this;
            self.width = w;
            self.height = h;
        };
        BaseScene.prototype.$onAddToStage = function (stage, nestLevel) {
            _super.prototype.$onAddToStage.call(this, stage, nestLevel);
            var self = this;
            game.notifiCenter.addListener(egret.Event.RESIZE, self.onResize, self);
            self.onResize(stage.$stageWidth, stage.$stageHeight);
        };
        BaseScene.prototype.$onRemoveFromStage = function () {
            _super.prototype.$onRemoveFromStage.call(this);
            game.notifiCenter.rmvListener(egret.Event.RESIZE, this);
        };
        BaseScene.prototype.$hitTest = function (stageX, stageY) {
            return egret.DisplayObjectContainer.prototype.$hitTest.call(this, stageX, stageY);
        };
        BaseScene.prototype.onMsgErr = function (errCode) {
            switch (errCode) {
                // case ReqConst.reqFail:
                //     Connect.tryReconn();
                //     break;
                // case langConsts.errCode.connect_fail:
                //     Connect.tryReconn();
                //     break;
                // case langConsts.errCode.be_kick_game:
                //     //终断客户端的连接
                //     HttpClient.stop = true;
                //     MsgBox.showPrompt(langConsts.errCode.connect_fail);
                //     break;
                // case langConsts.errCode.logined_in_other:
                //     HttpClient.stop = true;
                //     MsgBox.showPrompt( langConsts.errCode.logined_in_other );
                //     break;
                default:
                    game.MsgBox.showTipBox(true, errCode);
                    break;
            }
        };
        return BaseScene;
    }(cui.Group));
    game.BaseScene = BaseScene;
    __reflect(BaseScene.prototype, "game.BaseScene");
})(game || (game = {}));
var game;
(function (game) {
    //
    var UIRouteList = (function (_super) {
        __extends(UIRouteList, _super);
        function UIRouteList() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @param datas
         * @param itemCls 必须继承RouteItemBase
         * @param haveDbRow 是否有双列
         */
        UIRouteList.prototype.init = function (datas, itemCls, haveDbRow) {
            var self = this;
            self._items = [];
            var item;
            var itemW;
            var itemH;
            for (var i = 0, len = datas.length; i < len; ++i) {
                item = new itemCls();
                item.init(datas[i].route, haveDbRow);
                var w = itemW = item.width;
                var h = itemH = item.height;
                var row_1 = Math.floor(i / 2);
                var col = i - row_1 * 2;
                item.x = w * col + 5;
                item.y = h * row_1;
                self.addChild(item);
                self._items[i] = item;
            }
            var row = Math.ceil(datas.length / 2);
            self.setContentSize(itemW * 2, itemH * row);
        };
        UIRouteList.prototype.initNew = function (datas, itemCls, haveDbRow) {
            var self = this;
            self._items = [];
            var item;
            var itemW;
            var itemH;
            for (var i = 0, len = datas.length; i < len; ++i) {
                item = new itemCls();
                item.init(datas[i].route, haveDbRow);
                var w = itemW = item.width;
                var h = itemH = item.height;
                item.x = 0;
                item.y = h * i;
                self.addChild(item);
                self._items[i] = item;
            }
            self.setContentSize(itemW * 2, itemH * datas.length);
        };
        UIRouteList.prototype.updateRoom = function (datas) {
            var self = this;
            for (var i = 0; i < datas.length; i++) {
                var data = datas[i];
                var item = self._items[i];
                item.updateRoom(data);
            }
        };
        return UIRouteList;
    }(cui.Group));
    game.UIRouteList = UIRouteList;
    __reflect(UIRouteList.prototype, "game.UIRouteList");
    var RouteItemBase = (function (_super) {
        __extends(RouteItemBase, _super);
        function RouteItemBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RouteItemBase.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var lastIdx;
            if (self.skWin0) {
                self.skWin0.visible = false;
                lastIdx = self.skWin0.source.lastIndexOf("_");
                self._winStr = self.skWin0.source.slice(0, lastIdx);
            }
            if (self.skWin1) {
                self.skWin1.visible = false;
                lastIdx = self.skWin1.source.lastIndexOf("_");
                self._win1Str = self.skWin1.source.slice(0, lastIdx);
            }
            if (self.skWin2) {
                self.skWin2.visible = false;
                lastIdx = self.skWin2.source.lastIndexOf("_");
                self._win2Str = self.skWin2.source.slice(0, lastIdx);
            }
            if (self.skLose0)
                self.skLose0.visible = false;
            if (self.skLose1)
                self.skLose1.visible = false;
            if (self.skLose2)
                self.skLose2.visible = false;
        };
        RouteItemBase.prototype.init = function (data, haveDbRow) {
            var self = this;
            self._data = data;
            if (self.skZPL)
                self.skZPL.setModel(0 /* zhupanlu */, data);
            if (self.skDL)
                self.skDL.setModel(1 /* dalu */, data);
            if (self.skDYZL)
                self.skDYZL.setModel(2 /* dayanzailu */, data, haveDbRow);
            if (self.skXL)
                self.skXL.setModel(3 /* xiaolu */, data, haveDbRow);
            if (self.skXQL)
                self.skXQL.setModel(4 /* xiaoqianglu */, data, haveDbRow);
        };
        RouteItemBase.prototype.updateRoom = function (data) {
            var self = this;
            var forceCast = self._data.getForecast();
            if (!forceCast) {
                return;
            }
            var resultTp = forceCast;
            var winTp = resultTp[0];
            var loseTp = resultTp[1];
            if (winTp[0] > 0) {
                self.skWin0.visible = true;
                self.skWin0.source = self._winStr + "_" + winTp[0];
            }
            if (winTp[1] > 0) {
                self.skWin1.visible = true;
                self.skWin1.source = self._win1Str + "_" + winTp[1];
            }
            if (winTp[2] > 0) {
                self.skWin2.visible = true;
                self.skWin2.source = self._win2Str + "_" + winTp[2];
            }
            if (loseTp[0] > 0) {
                self.skLose0.visible = true;
                self.skLose0.source = self._winStr + "_" + loseTp[0];
            }
            if (loseTp[1] > 0) {
                self.skLose1.visible = true;
                self.skLose1.source = self._win1Str + "_" + loseTp[1];
            }
            if (loseTp[2] > 0) {
                self.skLose2.visible = true;
                self.skLose2.source = self._win2Str + "_" + loseTp[2];
            }
        };
        return RouteItemBase;
    }(cui.Component));
    game.RouteItemBase = RouteItemBase;
    __reflect(RouteItemBase.prototype, "game.RouteItemBase");
    var RouteCom = (function (_super) {
        __extends(RouteCom, _super);
        function RouteCom() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RouteCom.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var list = self.skList;
            list.itemRender = game.RouteStateTile;
            list.itemSkinName = self.itemSkinName;
            list.dataProvider = self._itemPro = new cui.ArrayCollection();
            if (self.skImg) {
                self._imgLen = self.skList.width / self.skImg.width;
                self._imgW = self.skImg.width;
                self._oldW = self.skList.width;
            }
            if (self._mo) {
                self.updateResult();
            }
        };
        RouteCom.prototype.setModel = function (tp, mo, haveDouble) {
            if (haveDouble === void 0) { haveDouble = true; }
            //注册事件
            var self = this;
            self._tp = tp;
            self._doubleRow = tp == 2 /* dayanzailu */ || tp == 3 /* xiaolu */ || tp == 4 /* xiaoqianglu */;
            self._haveDouble = haveDouble;
            self._mo = mo;
            mo.addListener("d_change" /* DATA_CHANGE */, self.updateResult, self);
            mo.addListener("d_update" /* DATA_UPDATE */, function () {
                self.updateResult(true);
            }, self);
            if (self._inited)
                self.updateResult();
        };
        RouteCom.prototype.updateResult = function (noclear) {
            var self = this;
            var tp = self._tp;
            var routeList = self._mo.getRouteData(tp);
            var itemPro = self._itemPro;
            if (!itemPro)
                return;
            var len = routeList.length;
            var notInit = itemPro.source.length > 0;
            if (notInit) {
                if (!self._flashTag) {
                    self._flashTag = TRain.core.addFrameDo(self.updateTile, self, false, 300);
                }
                else {
                    self.endFlash();
                }
                var lastIdx = self._mo.getRouteLastIdx(tp);
                self._flashData = { idx: lastIdx, data: routeList[lastIdx], cnt: 0 };
            }
            if (self.skGrpGreatRoad) {
                var val = self._mo.getGdwayNm(tp);
                self.skGrpGreatRoad.visible = !!val;
                self.skLab.text = val;
            }
            var tmpRouteList;
            if (self._doubleRow && self._haveDouble) {
                var rowCnt = Math.ceil(len / 6 /* maxRow */);
                if (rowCnt % 2 != 0) {
                    tmpRouteList = routeList.slice(0);
                    tmpRouteList[rowCnt * 6 /* maxRow */] = null;
                    len = tmpRouteList.length;
                }
            }
            // if (!noclear) {
            itemPro.source = tmpRouteList || routeList.slice(0);
            // } 
            // else {
            //     for (let i = itemPro.source.length; i < len; i++) {
            //         itemPro.addItem(routeList[i]);        
            //     }
            // }
            self.skTbScroller.showTableInViewStart(itemPro.source.length - 1, false);
            var addLen = tp == 1 /* dalu */ ? 15 : 10;
            if (self.skImg) {
                var tmpLen = routeList.length / 6 /* six */;
                if (tmpLen <= self._imgLen) {
                    self.skImg.width = self.skList.width + self._imgW * addLen;
                }
                else {
                    var delLen = Math.ceil(tmpLen - (self._oldW / self._imgW));
                    self.skImg.width = self._oldW + self._imgW * (delLen + addLen);
                    self._oldW = self.skImg.width;
                }
            }
        };
        RouteCom.prototype.updateTile = function () {
            var self = this;
            var flashData = self._flashData;
            flashData.cnt++;
            if (flashData.cnt > 10) {
                self.endFlash();
            }
            else {
                var itemPro = self._itemPro;
                var idx = flashData.idx;
                itemPro.source[idx] = itemPro.getItemAt(idx) ? null : flashData.data;
                itemPro.updateItemAt(idx);
            }
        };
        RouteCom.prototype.endFlash = function () {
            var self = this;
            var flashData = self._flashData;
            TRain.core.rmvFrameDoById(self._flashTag);
            self._flashTag = 0;
            var itemPro = self._itemPro;
            var idx = flashData.idx;
            itemPro.source[idx] = flashData.data;
            itemPro.updateItemAt(idx);
        };
        RouteCom.prototype.dispose = function () {
            var self = this;
            if (self._flashTag)
                TRain.core.rmvFrameDoById(self._flashTag);
            if (self._mo)
                self._mo.rmvAllListener(self);
            _super.prototype.dispose.call(this);
        };
        return RouteCom;
    }(cui.Component));
    game.RouteCom = RouteCom;
    __reflect(RouteCom.prototype, "game.RouteCom");
})(game || (game = {}));
var game;
(function (game) {
    var ItemTile = (function (_super) {
        __extends(ItemTile, _super);
        function ItemTile(skinName) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = skinName;
            return _this;
        }
        ItemTile.prototype.dataChanged = function () {
            var self = this;
            if (self._data) {
                _super.prototype.dataChanged.call(this);
                if (self.skBtn) {
                    self.skBtn.setTarget(function () {
                        self._data.handle.clickBtn(self);
                    }, self);
                }
            }
        };
        ItemTile.prototype.hasProp = function (key) {
            return ItemTile.props.indexOf(key) >= 0;
        };
        Object.defineProperty(ItemTile.prototype, "icon", {
            set: function (val) {
                var ctrl = this.skIcon;
                if (ctrl) {
                    ctrl.source = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemTile.prototype, "bg", {
            set: function (val) {
                var ctrl = this.skBg;
                if (ctrl) {
                    ctrl.source = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemTile.prototype, "sel", {
            set: function (val) {
                var ctrl = this.skSel;
                if (ctrl) {
                    ctrl.visible = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemTile.prototype, "ani", {
            set: function (val) {
                var ctrl = this.skAni;
                if (ctrl) {
                    ctrl.aniName = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemTile.prototype, "font", {
            set: function (val) {
                var ctrl = this.skFont;
                if (ctrl) {
                    ctrl.text = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        ItemTile.props = ["tag", "ud", "bg", "icon", "sel", "ani", "font"];
        return ItemTile;
    }(cui.UITile));
    game.ItemTile = ItemTile;
    __reflect(ItemTile.prototype, "game.ItemTile");
})(game || (game = {}));
var game;
(function (game) {
    var ApiUtil;
    (function (ApiUtil) {
        function loadParam_api(cb) {
            var tmpVal = game.GameUtil.getLocal("URL_location" /* URL_location */);
            if (tmpVal && tmpVal.length > 0) {
                CONF.location = tmpVal;
            }
            tmpVal = game.GameUtil.getLocal("URL_erweima" /* URL_erweima */);
            if (tmpVal && tmpVal.length > 0) {
                CONF.erweima = tmpVal;
            }
            var params = URLUtil.getLocationParams();
            // let othSrc = params.or_src;
            // let moList = CONF.moList;
            // if ( othSrc ) {
            //     let moNames = othSrc.split(",");
            //     for( let moName of moNames ){
            //         moList[moName] = null;
            //     }
            // }
            // if( !DEBUG ){
            //     moList[ModuleName.activity] = null;
            // }  
            tmpVal = params.resURL;
            if (tmpVal) {
                CONF.resURL = tmpVal;
            }
            tmpVal = game.GameUtil.getLocal("URL_kefu" /* URL_kefu */);
            if (tmpVal && tmpVal.length > 0) {
                CONF.kefuUrl = tmpVal;
            }
            tmpVal = params.res_hall;
            if (tmpVal) {
                CONF.res.hall = tmpVal;
            }
            tmpVal = params.res_all;
            if (tmpVal) {
                CONF.resHome = tmpVal + "/";
                CONF.res.all = game.GameUtil.getAllVer(tmpVal);
            }
            tmpVal = params.res_login;
            if (tmpVal) {
                CONF.res.login = tmpVal;
            }
            tmpVal = params.channelId;
            if (tmpVal) {
                CONF.channelId = tmpVal;
                CONF.shareId = tmpVal;
            }
            tmpVal = params.agentId;
            if (tmpVal) {
                CONF.agentId = tmpVal;
            }
            tmpVal = params.roomId;
            if (tmpVal) {
                CONF.roomId = tmpVal;
            }
            tmpVal = params.scOffx;
            if (tmpVal) {
                CONF.scOffx = parseInt(tmpVal) || 0;
            }
            tmpVal = params.api;
            if (tmpVal) {
                CONF.api = tmpVal;
            }
            tmpVal = params.gameId;
            if (tmpVal) {
                CONF.gameId = tmpVal;
            }
            tmpVal = params.homeUrl;
            if (tmpVal) {
                CONF.homeUrl = tmpVal;
            }
            tmpVal = params.urlConfig;
            if (tmpVal) {
                CONF.urlConfig = tmpVal;
            }
            tmpVal = params.apiType;
            if (tmpVal) {
                CONF.apiWalletType = tmpVal;
            }
            tmpVal = params.CloseUrlType;
            if (tmpVal) {
                CONF.CloseUrlType = tmpVal;
            }
            tmpVal = params.balanceGold;
            if (tmpVal) {
                CONF.balanceGold = tmpVal;
            }
            var apiInfo;
            tmpVal = params.info;
            if (tmpVal) {
                apiInfo = CONF.apiInfo = {};
            }
            if (tmpVal) {
                apiInfo.info = tmpVal;
            }
            tmpVal = params.acc;
            if (tmpVal) {
                apiInfo.acc = tmpVal;
            }
            tmpVal = params.gameip;
            if (tmpVal) {
                apiInfo.gameip = tmpVal;
            }
            tmpVal = params.gameWebIp;
            if (tmpVal) {
                apiInfo.gameWebIp = tmpVal;
            }
            cb();
        }
        ApiUtil.loadParam_api = loadParam_api;
    })(ApiUtil = game.ApiUtil || (game.ApiUtil = {}));
})(game || (game = {}));
var AppDelegate;
(function (AppDelegate) {
    function run(main) {
        TRain.mcMgr.init(["ui"], true);
        var gameMgr = game.gameMgr = new game.GameManager();
        gameMgr.begin(main);
    }
    AppDelegate.run = run;
})(AppDelegate || (AppDelegate = {}));
var game;
(function (game) {
    var GameUtil;
    (function (GameUtil) {
        GameUtil.os = 0;
        GameUtil.rm = 0;
        GameUtil.gc = true; //gc enable
        function loadParam(cb) {
            nativeInterface = nativeInterface || window.nativeInterface;
            CONF.isNative = !!(nativeInterface || nativeBridge);
            var tmpVal = getLocal("URL_location" /* URL_location */);
            if (tmpVal && tmpVal.length > 0) {
                CONF.location = tmpVal;
            }
            tmpVal = getLocal("URL_erweima" /* URL_erweima */);
            if (tmpVal && tmpVal.length > 0) {
                CONF.erweima = tmpVal;
            }
            var params = URLUtil.getLocationParams();
            var othSrc = params.or_src;
            var moList = CONF.moList;
            if (othSrc) {
                var moNames = othSrc.split(",");
                for (var _i = 0, moNames_1 = moNames; _i < moNames_1.length; _i++) {
                    var moName = moNames_1[_i];
                    moList[moName] = null;
                }
            }
            if (!true) {
                moList["activity" /* activity */] = null;
                moList["recharge" /* recharge */] = null;
            }
            if (CONF.isNative) {
                URLUtil.nativeHandler("getCache", "local", function (val) {
                    if (val && typeof val == "object") {
                        nvCache = val;
                    }
                });
                URLUtil.nativeHandler("getAppVersion", null, function (jsVer) {
                    CONF.appVer = jsVer || 0;
                });
                URLUtil.nativeHandler("getGameVers", null, function (verList) {
                    CONF.curVers = verList;
                });
                URLUtil.nativeHandler("getGameConfig", null, function (cfg) {
                    var tmpVal = cfg.GameURL;
                    if (tmpVal && tmpVal.length > 0) {
                        CONF.svrUrl = URLUtil.amendSvrDomain(tmpVal, CONF.webSvrUrl);
                    }
                    tmpVal = cfg.ResURL;
                    if (tmpVal) {
                        CONF.resURL = tmpVal;
                    }
                    tmpVal = cfg.ChatURL;
                    if (tmpVal && tmpVal.length > 0) {
                        CONF.kefuUrl = tmpVal;
                    }
                    tmpVal = cfg.ClientIP;
                    if (tmpVal && tmpVal.length > 0) {
                        CONF.clientIp = tmpVal;
                    }
                    tmpVal = cfg.DeviceID;
                    if (tmpVal) {
                        CONF.deviceId = tmpVal;
                    }
                    tmpVal = cfg.ChannelID;
                    if (tmpVal) {
                        CONF.channelId = tmpVal;
                        CONF.shareId = tmpVal;
                    }
                    tmpVal = cfg.AgentID;
                    if (tmpVal) {
                        CONF.agentId = tmpVal;
                    }
                    tmpVal = cfg.RecommendID;
                    if (tmpVal) {
                        CONF.roomId = tmpVal;
                    }
                    tmpVal = cfg.PackageType;
                    if (tmpVal) {
                        CONF.packAgeTp = tmpVal;
                    }
                    tmpVal = cfg.PackID;
                    if (tmpVal) {
                        CONF.packId = tmpVal;
                    }
                    tmpVal = cfg.Res;
                    if (tmpVal) {
                        CONF.res = tmpVal;
                        if (tmpVal.all) {
                            CONF.resHome = tmpVal.all + "/";
                            tmpVal.all = getAllVer(tmpVal.all);
                        }
                        var hallHame = tmpVal.hall;
                        if (hallHame) {
                            tmpVal.hall = hallHame.replace("resource" /* resNm */, "hall");
                        }
                    }
                    var wxInfo = {};
                    tmpVal = params.openid;
                    if (tmpVal) {
                        wxInfo.openid = tmpVal;
                    }
                    tmpVal = params.opensign;
                    if (tmpVal) {
                        wxInfo.opensign = tmpVal;
                    }
                    tmpVal = params.nickname;
                    if (tmpVal) {
                        wxInfo.nickname = tmpVal;
                    }
                    tmpVal = params.headimgurl;
                    if (tmpVal) {
                        wxInfo.headimgurl = tmpVal;
                    }
                    if (!!wxInfo.openid) {
                        var wxPwd = GameUtil.strToBinary(JSON.stringify(wxInfo));
                        GameUtil.setLocal("ACC_Pwd" /* ACC_Pwd */, wxPwd);
                        GameUtil.setLocal("LAST_LOGIN" /* LAST_LOGIN */, "3");
                    }
                    tmpVal = cfg.WxAppID;
                    if (tmpVal) {
                        CONF.appid = tmpVal;
                    }
                    tmpVal = cfg.WxURL;
                    if (tmpVal) {
                        CONF.wxCallUrl = tmpVal;
                    }
                    cb();
                });
            }
            else {
                tmpVal = params.resURL;
                if (tmpVal) {
                    CONF.resURL = tmpVal;
                }
                tmpVal = getLocal("URL_kefu" /* URL_kefu */);
                if (tmpVal && tmpVal.length > 0) {
                    CONF.kefuUrl = tmpVal;
                }
                tmpVal = params.res_hall;
                if (tmpVal) {
                    CONF.res.hall = tmpVal;
                }
                tmpVal = params.res_all;
                if (tmpVal) {
                    CONF.resHome = tmpVal + "/";
                    CONF.res.all = getAllVer(tmpVal);
                }
                tmpVal = params.res_login;
                if (tmpVal) {
                    CONF.res.login = tmpVal;
                }
                tmpVal = params.channelId;
                if (tmpVal) {
                    CONF.channelId = tmpVal;
                    CONF.shareId = tmpVal;
                }
                tmpVal = params.agentId;
                if (tmpVal) {
                    CONF.agentId = tmpVal;
                }
                tmpVal = params.roomId;
                if (tmpVal) {
                    CONF.roomId = tmpVal;
                }
                tmpVal = params.scOffx;
                if (tmpVal) {
                    CONF.scOffx = parseInt(tmpVal) || 0;
                }
                var wxInfo = {};
                tmpVal = params.openid;
                if (tmpVal) {
                    wxInfo.openid = tmpVal;
                }
                tmpVal = params.opensign;
                if (tmpVal) {
                    wxInfo.opensign = tmpVal;
                }
                tmpVal = params.nickname;
                if (tmpVal) {
                    wxInfo.nickname = tmpVal;
                }
                tmpVal = params.headimgurl;
                if (tmpVal) {
                    wxInfo.headimgurl = tmpVal;
                }
                if (!!wxInfo.openid) {
                    var wxPwd = GameUtil.strToBinary(JSON.stringify(wxInfo));
                    GameUtil.setLocal("ACC_Pwd" /* ACC_Pwd */, wxPwd);
                    GameUtil.setLocal("LAST_LOGIN" /* LAST_LOGIN */, "3");
                }
                tmpVal = params.WxAppID;
                if (tmpVal) {
                    CONF.appid = tmpVal;
                }
                tmpVal = params.WxURL;
                if (tmpVal) {
                    CONF.wxCallUrl = tmpVal;
                }
                tmpVal = params.soundBgm;
                if (tmpVal) {
                    CONF.preview.sound = tmpVal;
                }
                tmpVal = params.gameList;
                if (tmpVal) {
                    CONF.preview.gameList = tmpVal;
                }
                tmpVal = params.sortList;
                if (tmpVal) {
                    CONF.preview.sortList = tmpVal;
                }
                cb();
            }
        }
        GameUtil.loadParam = loadParam;
        function getAllVer(name) {
            var tmpNm = "resource" /* resNm */;
            if (name.length > tmpNm.length && tmpNm == name.substr(0, tmpNm.length)) {
                return name.substr(tmpNm.length);
            }
            return "";
        }
        GameUtil.getAllVer = getAllVer;
        function getHome(nm) {
            if (nm == "hall" /* hall */) {
                return CONF.res[nm] || "";
            }
            else {
                return nm + (CONF.res.all || "");
            }
        }
        GameUtil.getHome = getHome;
        function getAllSkinId() {
            var id = CONF.res.all;
            return id ? parseInt(id) : 0;
        }
        GameUtil.getAllSkinId = getAllSkinId;
        var nvCache = {};
        function getLocal(key, defVal) {
            var val = egret.localStorage.getItem(key);
            if (val == null) {
                if (CONF.isNative) {
                    val = nvCache[key];
                }
                if (!val && defVal !== undefined)
                    return defVal;
            }
            return val;
        }
        GameUtil.getLocal = getLocal;
        function getLocalBool(key, defVal) {
            var val = egret.localStorage.getItem(key);
            if (val == null) {
                if (CONF.isNative) {
                    val = nvCache[key];
                }
                if (!val && defVal !== undefined)
                    return defVal;
            }
            var curVal = parseInt(val);
            return !!curVal;
        }
        GameUtil.getLocalBool = getLocalBool;
        function setLocal(key, val) {
            var savaVal;
            if (typeof val == "boolean") {
                savaVal = val ? 1 : 0;
            }
            else {
                savaVal = val;
            }
            egret.localStorage.setItem(key, savaVal);
            if (CONF.isNative) {
                nvCache[key] = val;
                URLUtil.nativeHandler("setCache", { key: "local", val: JSON.stringify(nvCache) });
            }
        }
        GameUtil.setLocal = setLocal;
        //--------------------------------------------------------------
        //播放点击音效
        function playClickSound() {
            TRain.soundMgr.playSFX("click" /* click */);
        }
        GameUtil.playClickSound = playClickSound;
        //将字符串转化为二进制的数据
        function strToBinary(str) {
            var result = [];
            var list = str.split("");
            for (var i = 0; i < list.length; i++) {
                if (i != 0) {
                    //加空格，分割二进制
                    result.push(" ");
                }
                var item = list[i];
                //将字符串转化为二进制数据
                var binaryStr = item.charCodeAt(0).toString(2);
                result.push(binaryStr);
            }
            return result.join("");
        }
        GameUtil.strToBinary = strToBinary;
        //二进制转为字符串
        function binaryToStr(str) {
            if (!str)
                return "";
            var result = [];
            //
            //通过空格来分开二进制的字符
            var list = str.split(" ");
            for (var i = 0; i < list.length; i++) {
                var item = list[i];
                //转为asciicode 码
                var asciiCode = parseInt(item, 2);
                //转为文字
                var charValue = String.fromCharCode(asciiCode);
                //添加到集合中
                result.push(charValue);
            }
            //返回结果
            return result.join("");
        }
        GameUtil.binaryToStr = binaryToStr;
        /**
         *
         * @param isReset 是否重置账号密码
         */
        function gameReload(isReset) {
            //登出账号时
            if (isReset) {
                // GameUtil.setLocal(GameUtil.LocalKey.ACC_PHONE, "");
                // GameUtil.setLocal(GameUtil.LocalKey.ACC_Pwd, "");
                GameUtil.setLocal("RELOAD" /* ISRELOAD */, true);
            }
            location.reload();
        }
        GameUtil.gameReload = gameReload;
        function getErrInfo(info) {
            var err;
            switch (info) {
                case "Login_AccIsExists" /* accIsExt */:
                    err = 10010 /* e_rmt_login_AccIsExists */;
                    break;
                case "Login_IpBlock" /* ipBlock */:
                    err = 10014 /* ip_block */;
                    break;
                case "Login_AccIsNotExists" /* accIsNotExt */:
                    err = 10011 /* e_rmt_login_AccIsNotExists */;
                    break;
                case "Login_AccOrPwdError" /* accOrPwdErr */:
                    err = 10020 /* e_rmt_login_accOrPwdErr */;
                    break;
                case "Login_AccIsInvalid" /* accIsInvalid */:
                    err = 10021 /* e_rmt_login_accIsInvalid */;
                    break;
                case "Login_DownloadError" /* svrLoadErr */:
                    err = 10022 /* e_rmt_login_svrLoadErr */;
                    break;
                case "Login_HardwareIsEmpty" /* hardwareEmp */:
                    err = 10023 /* e_rmt_login_hardwareEmp */;
                    break;
                case "Login_ChannelIdError" /* Login_ChannelIdError */:
                    err = 10025 /* client_Login_ChannelIdError */;
                    break;
                case "Login_PackageIdIsNull" /* Login_PackageIdIsNull */:
                    err = 10026 /* client_Login_PackageIdIsNull */;
                    break;
                case "Login_LoginDisable" /* Login_LoginDisable */:
                    err = 10027 /* client_Login_LoginDisable */;
                    break;
                case "Login_OpenIdError" /* Login_OpenIdError */:
                    err = 10028 /* client_Login_OpenIdError */;
                    break;
                case "Login_OpenSignError" /* Login_OpenSignError */:
                    err = 10029 /* client_Login_OpenSignError */;
                    break;
                default:
                    err = 10024 /* e_rmt_login_sysErr */;
                    break;
            }
            return err;
        }
        GameUtil.getErrInfo = getErrInfo;
        /**
         *
         * @param listIdx 当前金币在自定义数组中的下标
         */
        function getCustomIdx(listIdx) {
            if (listIdx == 11) {
                return 5;
            }
            else {
                return Math.floor(listIdx / 3) + 1;
            }
        }
        GameUtil.getCustomIdx = getCustomIdx;
        /**
         * 生成随机的uuid
         */
        function getUUID() {
            var s = [];
            var uuid;
            var hexDigits = "0123456789abcdef";
            for (var i = 0; i < 36; i++) {
                s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
            }
            s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
            s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
            s[8] = s[13] = s[18] = s[23] = "-";
            uuid = s.join("");
            return uuid;
        }
        GameUtil.getUUID = getUUID;
        /**
         *
         * @param room_info 房间状态服信息
         * @param room_confs 房间总配置表
         * 返回值是一个{count:xxx,fireNum:xxx}的数组 如果服务器没给那两个参数（player_cnt，bot_cnt）则返回的count为0
         * 返回的fireNum是达到多少人数是火爆
         */
        function getOnlineNum(roomInfo, roomConfs) {
            var num = 0;
            var roomNumData = [];
            for (var i = 0; i < roomInfo.length; i++) {
                var info = roomInfo[i];
                if (!info)
                    continue;
                var baseRoomInfo = info.base_room_info;
                if (!baseRoomInfo) {
                    baseRoomInfo = info;
                }
                var roomid = baseRoomInfo.room_id;
                var roomConf = roomConfs[roomid];
                if (roomConf) {
                    var platList = roomConf.platList;
                    var realNum = (platList[0] / 100 /* MoneyBase */); //真实人数系数
                    var aiNum = (platList[1] / 100 /* MoneyBase */); // AI人数系数
                    var min = (platList[2] / 100 /* MoneyBase */); //随机值最小值
                    var max = (platList[3] / 100 /* MoneyBase */); //随机值最大值
                    var fireNum = (platList[4] / 100 /* MoneyBase */);
                    var dom = (Math.random() * (max - min + 1) + min);
                    if (typeof (baseRoomInfo.player_cnt) == "undefined" && typeof (baseRoomInfo.bot_cnt) == "undefined") {
                        num = 0;
                    }
                    else {
                        var player_cnt = baseRoomInfo.player_cnt * realNum || 0;
                        var bot_cnt = baseRoomInfo.bot_cnt * aiNum || 0;
                        num = Math.floor(player_cnt + bot_cnt + dom);
                    }
                    roomNumData[roomid] = { count: num, fireNum: fireNum };
                }
            }
            return roomNumData;
        }
        GameUtil.getOnlineNum = getOnlineNum;
        function getWebLogData() {
            //将错误信息发给服务器
            var accMo = game.dataMgr.accMo;
            var accData = accMo.getData();
            var aid = accData ? accData.aid : 0;
            var gameId = accMo.gameId || 0;
            return { playId: aid, gameId: gameId };
        }
        GameUtil.getWebLogData = getWebLogData;
        function sendIntervalTm(nm, tm) {
            var webLogData = GameUtil.getWebLogData();
            var tempData = {};
            tempData.nm = nm;
            tempData.time = tm;
            game.HttpUtil.webLogInfo({ playId: webLogData.playId, error: JSON.stringify(tempData), gameId: webLogData.gameId, gameVer: "" });
        }
        GameUtil.sendIntervalTm = sendIntervalTm;
        function enterCurGame(gameId) {
            var accMo = game.dataMgr.accMo;
            var generalMo = game.dataMgr.generalMo;
            var isTransferGm = accMo.isTransferGm(gameId);
            if (isTransferGm) {
                var isTranterAuto = generalMo.getAutoTranFer();
                if (isTranterAuto) {
                    var transferGmGold = game.dataMgr.accMo.getData().gold;
                    if (transferGmGold > 0) {
                        generalMo.addListener("Depsit_wallet" /* Depsit_wallet */, function (info) {
                            checkGmEnter(info.game_id);
                        }, self, true);
                        var walletInfo = {};
                        walletInfo.game_id = gameId;
                        walletInfo.gold = accMo.getData().gold;
                        generalMo.askDepsitWallet(walletInfo);
                    }
                    else {
                        checkGmEnter(gameId);
                    }
                }
                else {
                    checkGmEnter(gameId);
                }
            }
            else {
                game.gameScene.startGame(gameId);
            }
        }
        GameUtil.enterCurGame = enterCurGame;
        function checkGmEnter(id) {
            var generalMo = game.dataMgr.generalMo;
            var gameMo = game.dataMgr.gameMo;
            var curGameData = gameMo.getGameData(id);
            var transferGmGold = generalMo.getCurGmGold(id);
            if (transferGmGold < (30 /* gold */ * 100)) {
                game.MsgBox.showPrintBoxCB("mainLang" /* mainLang */, 1121 /* enterGameGold */, function (tag) {
                    if (tag == 1) {
                        game.gameScene.showHallUI(13 /* myWallet */);
                    }
                }, self, 30 /* gold */);
            }
            else {
                if (curGameData.conf.isJumpWeb) {
                    game.dataMgr.generalMo.enterGame(id);
                }
                else {
                    game.gameScene.startGame(id);
                }
            }
        }
        GameUtil.checkGmEnter = checkGmEnter;
    })(GameUtil = game.GameUtil || (game.GameUtil = {}));
})(game || (game = {}));
var handerNativeEvt = function (evtNm, paramStr) {
    //console.log( paramStr );
    var args = {};
    if (paramStr) {
        try {
            args = JSON.parse(paramStr);
        }
        catch (e) {
            console.log("handerNativeEvt args parse err paramStr=" + paramStr);
        }
    }
    switch (evtNm) {
        case "back_press":
            if (game.gameScene) {
                game.gameScene.onBackClk();
            }
            break;
        case "update_game_progress" /* update_game_progress */:
            //{nm:名字，per 进度}
            game.notifiCenter.postEvent("update_game_progress" /* update_game_progress */, args.nm, args.per);
            break;
        case "update_game_finish" /* update_game_finish */:
            //{nm:名字，fin:0表示更新完成  1表示更新失败}
            game.notifiCenter.postEvent("update_game_finish" /* update_game_finish */, args.nm, args);
            break;
        case "update_main_finish" /* update_main_finish */:
            //{nm:名字，fin:0表示更新完成  1表示更新失败}
            game.notifiCenter.postEvent("update_main_finish" /* update_main_finish */, args.nm, args);
            break;
    }
};
var game;
(function (game) {
    var BankerView = (function (_super) {
        __extends(BankerView, _super);
        function BankerView() {
            var _this = _super.call(this) || this;
            _this._isleave = false;
            var self = _this;
            _this.skinName = "bankerSkin";
            self.hideBg = true;
            self.vCenter = 0;
            self.hCenter = 0;
            self.pri = 10000 /* top */;
            self.touchThrough = true;
            return _this;
        }
        BankerView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skShangZ.visible = false;
            self.skDBAniGetBank.dbNm = "shangzhuang";
            self.skDBAniGetBank.visible = false;
            self.skDBAniLeaveBank.dbNm = "baozhuang";
            self.skDBAniLeaveBank.visible = false;
            if (self._isleave) {
                self.playLeaveBanker();
            }
            else {
                self.playToBanker();
            }
        };
        BankerView.prototype.setIsLeave = function (isLeave) {
            this._isleave = isLeave;
        };
        BankerView.prototype.setBankerInfo = function (info) {
            this._bankerInfo = info;
        };
        BankerView.prototype.playToBanker = function () {
            var self = this;
            var bankerInfo = self._bankerInfo;
            self.skSZHead.source = game.DataFormat.getHeadIcon(bankerInfo.player_head_custom);
            self.skSZHeadBack.source = game.dataMgr.accMo.isApi ? "apiHead@old" /* oldFrameApi */ : "head@old" /* oldFrame */ + bankerInfo.player_vip_lv;
            self.skSZName.text = bankerInfo.player_nickname;
            self.skDBAniGetBank.visible = true;
            self.skDBAniGetBank.gotoAndPlay("xh_shangzhuang_wenzitexiao", 0, 1);
            TRain.soundMgr.playSFX("zhuang_2");
            TRain.core.addDelayDo(function () {
                self.skShangZ.visible = true;
            }, self, 200);
            TRain.core.addDelayDo(function () {
                self.skShangZ.visible = false;
            }, self, 1920);
            TRain.core.addDelayDo(function () {
                self.skDBAniGetBank.stop();
                self.skDBAniGetBank.visible = false;
                self.close();
            }, self, 2300);
        };
        BankerView.prototype.updateBanker = function (bankerGold, income, limitGold) {
            var self = this;
            var bankGold = bankerGold + income;
            if (bankGold <= limitGold) {
                return true;
            }
            else {
                return false;
            }
        };
        BankerView.prototype.playLeaveBanker = function () {
            var self = this;
            self.skDBAniLeaveBank.visible = true;
            self.skShangZ.visible = false;
            self.skDBAniLeaveBank.gotoAndPlay("action", 0, 1);
            TRain.soundMgr.playSFX("allkill");
            TRain.core.addDelayDo(function () {
                self.skDBAniLeaveBank.stop();
                self.skDBAniLeaveBank.visible = false;
                self.close();
            }, self, 1600);
        };
        BankerView.prototype.onDispose = function () {
            var self = this;
            if (self.skDBAniLeaveBank) {
                self.skDBAniLeaveBank.dispose();
            }
            if (self.skDBAniGetBank) {
                self.skDBAniGetBank.dispose();
            }
            TRain.core.rmvAllDelayDo(self);
            _super.prototype.onDispose.call(this);
        };
        return BankerView;
    }(game.UIPopup));
    game.BankerView = BankerView;
    __reflect(BankerView.prototype, "game.BankerView");
})(game || (game = {}));
var game;
(function (game) {
    //选场
    var MomentView = (function (_super) {
        __extends(MomentView, _super);
        //isNew 是否使用新选场
        function MomentView(isNew) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = isNew ? "MomentSkin3" : "MomentSkin2";
            return _this;
        }
        MomentView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skBtnReturn.setTarget(self.onReturn, self);
            self._arr = new cui.ArrayCollection();
            self.skList.dataProvider = self._arr;
            if (self.skVerGrp)
                game.VersionUI.getInst().setParent(self.skVerGrp);
            self.skNoCfg.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 899 /* gettingRoomCfg */);
            // if(self.skRecordBtn)self.skRecordBtn.visible = dataMgr.accMo.isApi;
            if (self.skGirlDb) {
                self.skGirlDb.dbNm = "sssGirl";
            }
        };
        //返回大厅界面
        MomentView.prototype.onReturn = function () { };
        MomentView.prototype.setData = function (itemRen, source) {
            var self = this;
            self.skList.itemRender = itemRen;
            self._arr.source = source;
            self._arr.refresh();
        };
        MomentView.prototype.setGirlDb = function (girlDb) {
            var self = this;
            if (self.skGirlDb) {
                self.skGirlDb.dbNm = girlDb || "sssGirl";
            }
        };
        MomentView.prototype.setDbImg = function (imgV) {
            var self = this;
            if (self.skImg) {
                self.skImg.visible = imgV;
            }
        };
        return MomentView;
    }(game.UIFullFW));
    game.MomentView = MomentView;
    __reflect(MomentView.prototype, "game.MomentView");
})(game || (game = {}));
var game;
(function (game) {
    var playerInfoView = (function (_super) {
        __extends(playerInfoView, _super);
        function playerInfoView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._date = [];
            return _this;
        }
        playerInfoView.prototype.cleanDate = function () {
            var self = this;
            self._date = [];
        };
        playerInfoView.prototype.setData = function (data, rank) {
            var self = this;
            if (self.skConfGrp) {
                self._tag = self.skConfGrp.tag;
            }
            self._date.push(data);
            if (rank == 0) {
                self.skbackGuang.source = "common@teshukuang" /* SpecialFrame */ + '';
                self.skteshu.source = "common@txt_dushen" /* dushen */ + '';
                self.skgold.text = game.DataFormat.convertYuanString2(data.player_gold, true);
                self.skFont.visible = false;
                self.skJiao.visible = false;
                if (self.skwinFont) {
                    self.skteshu.x = -19;
                    self.skteshu.y = -30;
                }
                else {
                    self.skteshu.x = (self._tag == 2) ? 1 : -16;
                    self.skteshu.y = (self._tag == 2) ? -33 : -25;
                }
            }
            else if (rank == 1) {
                self.skbackGuang.source = "common@teshukuang" /* SpecialFrame */ + '';
                self.skteshu.source = "common@txt_fuhao" /* fuhao */ + '';
                self.skgold.text = game.DataFormat.convertYuanString2(data.player_gold, true);
                self.skFont.visible = false;
                self.skJiao.visible = false;
                if (self.skwinFont) {
                }
                else {
                    self.skteshu.x = (self._tag == 2) ? 1 : 4;
                    self.skteshu.y = (self._tag == 2) ? -33 : -42;
                }
            }
            else {
                self.skbackGuang.source = "common@wanjiakuang" /* PlayerFrame */ + '';
                self.skteshu.visible = false;
                self.skFont.text = String(rank);
                self.skgold.visible = false;
            }
            self.skHead.source = game.DataFormat.getHeadIcon(data.player_head_custom);
            self.skHeadFrame.source = game.dataMgr.accMo.isApi ? "apiHead@new" /* headframeApi */ : "head@new" /* headframe */ + data.player_vip_lv;
            self.skNickName.text = game.DataFormat.formatName(data.player_nickname);
        };
        playerInfoView.prototype.updateGold = function (data, isAward, gold) {
            if (gold === void 0) { gold = 0; }
            var self = this;
            if (self._date.length == 0)
                return;
            for (var i = 0; i < self._date.length; i++) {
                var tempDate = self._date[i];
                if (tempDate.player_id == data.player_id) {
                    if (!isAward) {
                        tempDate.player_gold -= gold;
                        self.skgold.text = game.DataFormat.convertYuanString2(tempDate.player_gold, true);
                    }
                    else {
                        self.skgold.text = game.DataFormat.convertYuanString2(data.player_gold, true);
                    }
                }
            }
        };
        return playerInfoView;
    }(cui.SimpleButton));
    game.playerInfoView = playerInfoView;
    __reflect(playerInfoView.prototype, "game.playerInfoView");
})(game || (game = {}));
var game;
(function (game) {
    var PlayerListView = (function (_super) {
        __extends(PlayerListView, _super);
        function PlayerListView() {
            var _this = _super.call(this) || this;
            var self = _this;
            _this.skinName = "playerSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        PlayerListView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skBack.setTarget(self.close, self);
            var list = self.skList;
            list.itemRender = PlayerListItem;
            list.dataProvider = self._itemPro = new cui.ArrayCollection();
            self.updateView();
        };
        PlayerListView.prototype.setData = function (data) {
            var self = this;
            self._data = data;
            //self.updateView();
        };
        PlayerListView.prototype.updateView = function () {
            var self = this;
            var datas = self._data;
            if (!datas || datas <= 0)
                return;
            var tempType = 0;
            var listArr;
            var length = 0;
            if (self.skplyHead) {
                //更新赌神信息
                self.skplyHead.source = game.DataFormat.getHeadIcon(datas[0].player_head_custom);
                self.skplyHeadF.source = game.dataMgr.accMo.isApi ? "apiHead@old" /* oldFrameApi */ : "head@old" /* oldFrame */ + datas[0].player_vip_lv;
                self.skDushen.text = datas[0].player_nickname;
                self.skwinCount.text = String(datas[0].win_count);
                self.skplayCount.text = String(datas[0].play_cnt);
                self.skgold.text = game.DataFormat.convertYuanString2(datas[0].player_gold, false);
                self.skbets.text = game.DataFormat.convertYuanString2(datas[0].bets, false);
                self.skGetWin.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 935 /* getWin */);
                self.skZuiJin.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 936 /* zuijin */);
                self.skJu0.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 937 /* juCount */);
                self.skJu1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 937 /* juCount */);
                tempType = 1;
                listArr = datas.slice(1);
                length = self._data.length - 1;
            }
            else {
                listArr = datas.slice(0);
                length = self._data.length;
            }
            //获取游戏列表
            for (var i = 0; i < length; i++) {
                if (tempType == 1) {
                    listArr[i].rankid = i + 1;
                }
                else {
                    listArr[i].rankid = i;
                }
                listArr[i].type = tempType;
            }
            self._itemPro.source = listArr;
        };
        return PlayerListView;
    }(game.UIPopup));
    game.PlayerListView = PlayerListView;
    __reflect(PlayerListView.prototype, "game.PlayerListView");
    var PlayerListItem = (function (_super) {
        __extends(PlayerListItem, _super);
        function PlayerListItem() {
            var _this = _super.call(this) || this;
            _this.skinName = "playerListSkin";
            return _this;
        }
        PlayerListItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
        };
        PlayerListItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            var isTrue = false;
            if (data.type == 1) {
                self.skGetWin.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 935 /* getWin */);
                self.skZuiJin.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 936 /* zuijin */);
                self.skJu0.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 937 /* juCount */);
                self.skJu1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 937 /* juCount */);
                self.skplyHeadF.source = game.dataMgr.accMo.isApi ? "apiHead@old" /* oldFrameApi */ : "head@old" /* oldFrame */ + data.player_vip_lv;
                if (data.rankid == 1) {
                    self.skfuhao.visible = true;
                    self.skrank.visible = false;
                    self.skJiao.visible = false;
                }
                else {
                    self.skfuhao.visible = false;
                    self.skrank.visible = true;
                    self.skJiao.visible = true;
                }
                self.skrank.text = String(data.rankid);
                if (data.rankid >= 10) {
                    self.skrank.scaleX = 0.75;
                    self.skrank.scaleY = 0.75;
                }
            }
            else {
                self.skplyHeadF.source = game.dataMgr.accMo.isApi ? "apiHead@new" /* headframeApi */ : "head@new" /* headframe */ + data.player_vip_lv;
                self.skZuiJin.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 938 /* jin */);
                self.skJu0.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 937 /* juCount */);
                self.skJu1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 937 /* juCount */);
                isTrue = true;
                if (data.rankid < 4) {
                    self.skrank.visible = false;
                    self.skfuhao.visible = true;
                    if (data.rankid == 0) {
                        self.skfuhao.source = "common@txt_xinyunxing";
                        self.skfuhao.x = 23;
                        self.skfuhao.y = -2;
                    }
                    else {
                        self.skfuhao.source = "common@txt_fuhao" + (data.rankid);
                        self.skfuhao.x = 11;
                        self.skfuhao.y = 15;
                    }
                }
                else {
                    self.skrank.visible = true;
                    self.skrank.text = String(data.rankid);
                    self.skfuhao.visible = false;
                }
            }
            self.skplyHead.source = game.DataFormat.getHeadIcon(data.player_head_custom);
            self.sknickname.text = data.player_nickname;
            self.skwinConut.text = String(data.win_count);
            self.skplayCount.text = String(data.play_cnt);
            self.skgold.text = game.DataFormat.convertYuanString2(data.player_gold, isTrue);
            self.skbets.text = game.DataFormat.convertYuanString2(data.bets, isTrue);
        };
        return PlayerListItem;
    }(cui.DataItem));
    game.PlayerListItem = PlayerListItem;
    __reflect(PlayerListItem.prototype, "game.PlayerListItem");
})(game || (game = {}));
var game;
(function (game) {
    var UIDBAni = (function (_super) {
        __extends(UIDBAni, _super);
        function UIDBAni() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.autoPlay = false;
            return _this;
        }
        // constructor()
        // {
        //     super();
        //     let self = this;
        // }
        UIDBAni.prototype.$hitTest = function (stageX, stageY) {
            return null;
        };
        Object.defineProperty(UIDBAni.prototype, "dbNm", {
            get: function () {
                return this._dbNm;
            },
            set: function (name) {
                var self = this;
                name = (!!name) ? name : null;
                if (self._dbNm == name)
                    return;
                self._dbNm = name;
                self.freeArm();
                if (self._inited) {
                    self.loadData();
                }
            },
            enumerable: true,
            configurable: true
        });
        UIDBAni.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            this.loadData();
        };
        // $onAddToStage(stage:egret.Stage, nestLevel:number):void
        // {
        //     super.$onAddToStage(stage, nestLevel);
        //     let self = this;
        //     if( self._playData ){
        //         self._play();
        //     }
        // }
        // $onRemoveFromStage():void
        // {
        //     super.$onRemoveFromStage();
        //     this._stop();
        // }
        //------------------------------- load --------------------------------------
        //加载动画数据
        UIDBAni.prototype.loadData = function () {
            var self = this;
            var dbNm = self._dbNm;
            if (dbNm) {
                game.dbMgr.loadAnimate(dbNm, self.onLoadFin, self);
            }
        };
        UIDBAni.prototype.onLoadFin = function (succ, skName) {
            if (!succ)
                return;
            var self = this;
            var dbNm = self._dbNm;
            if (!dbNm || dbNm != skName)
                return;
            var arm = self._arm = game.dbMgr.createArm(skName);
            arm.addDBEventListener(dragonBones.EventObject.COMPLETE, self.onAniFin, self);
            self.addChild(arm);
            if (!self._playData && self.autoPlay) {
                self._playData = { times: -1 };
            }
            if (self._playData) {
                self._play();
            }
            self.dispatchEventWith("created" /* EVT_CREATED */, false);
            self.invalidateDL();
        };
        //---------------------------------------------------------------------
        UIDBAni.prototype.setSlotDisplay = function (nm, display) {
            // let slot = armature.getSlot("text");
            // slot.display = new yourEngine.TextField();
        };
        //---------------------------------------------------------------------
        //aniNm - 动画数据名称。 （如果未设置，则播放默认动画，或将暂停状态切换为播放状态，或重新播放之前播放的动画）
        UIDBAni.prototype.play = function (aniNm, playTimes) {
            var self = this;
            if (aniNm && !self._playData) {
                self._playData = { ani: aniNm, times: playTimes };
            }
            self._play();
        };
        UIDBAni.prototype.gotoAndPlay = function (aniNm, frame, playTimes) {
            playTimes = playTimes || 0;
            frame = frame || 0;
            var self = this;
            self._playData = { ani: aniNm, times: playTimes, frame: frame };
            self._play();
        };
        UIDBAni.prototype._play = function () {
            var self = this;
            var arm = self._arm;
            if (arm) {
                var playData = self._playData;
                if (playData.stopFrame) {
                    self._playData = null;
                    arm.animation.gotoAndStopByFrame(playData.ani, playData.stopFrame);
                }
                else {
                    if (playData.ani) {
                        arm.animation.gotoAndPlayByFrame(playData.ani, playData.frame, playData.times);
                    }
                    else {
                        arm.animation.play(playData.ani, playData.times);
                    }
                }
            }
        };
        UIDBAni.prototype._stop = function () {
            var arm = this._arm;
            if (arm) {
                arm.animation.stop();
            }
        };
        UIDBAni.prototype.gotoAndStop = function (frame, aniNm) {
            var self = this;
            self._playData = { ani: aniNm, stopFrame: frame };
            self._play();
        };
        UIDBAni.prototype.stop = function () {
            var self = this;
            self._playData = null;
            self._stop();
        };
        UIDBAni.prototype.onAniFin = function (e) {
            var self = this;
            self._playData = null;
            self.dispatchEventWith("play_fin" /* EVT_PLAY_FIN */, false);
        };
        UIDBAni.prototype.freeArm = function () {
            var self = this;
            var arm = self._arm;
            if (arm) {
                self._arm = null;
                self.removeChild(arm);
                arm.dispose();
            }
        };
        return UIDBAni;
    }(cui.BaseContainer));
    game.UIDBAni = UIDBAni;
    __reflect(UIDBAni.prototype, "game.UIDBAni");
})(game || (game = {}));
/**
 * Created by wjdeng on 2015/9/2.
 */
var game;
(function (game) {
    var DataManager = (function () {
        //初始化创建
        function DataManager() {
            this._receivedNet = false; //是否收到心跳协议返回
            var self = this;
            self.networkDelay = 97;
            self._needLoads = [];
            self.accMo = new game.AccountModel();
            self.accMo.addListener("svr_fin" /* login_svr_fin */, self.startHeart, self);
            game.notifiCenter.addListener("close" /* CONN_CLOSE */, self.stopHeart, self);
            //self.notifyMo = new NotifyModel();
            self.soundMo = new game.SoundModel();
            self.mailMo = new game.MailModel();
            self.gsMo = new game.GameStateModel();
            self.actMo = new game.ActivityModel();
            self.createMo("gameMo", game.GameModel);
            self.createMo("generalMo", game.GeneralModel);
            self.createMo("guildMo", game.GuildModel);
            //userMo ------放最后创建
            //self.createMo( "userMo", UserModel ); 
        }
        DataManager.prototype.createMo = function (name, modelCls) {
            var model = (new modelCls());
            this[name] = model;
            if (model.confNm) {
                this._needLoads.push(model);
            }
        };
        DataManager.prototype.loadConfs = function () {
            var needLoads = this._needLoads;
            for (var i = 0, n = needLoads.length; i < n; ++i) {
                var model = needLoads[i];
                game.resMgr.loadConf(model.confNm, model.onLoadConf, model);
            }
            delete this._needLoads;
        };
        DataManager.prototype.init = function () {
            var self = this;
            if (!self._inited) {
                self._inited = true;
                self.gsMo.init();
            }
        };
        //-----------------------------------------------------
        DataManager.prototype.startHeart = function () {
            var self = this;
            if (!self._heartTag) {
                self._heartTag = TRain.core.addFrameDo(self.heartSync, self, false, 3000); //3秒 20200820修改
                game.Net.regHandle(404 /* g2c_heartbeat */, function () {
                    //to do
                    if (self._heartDelayTag) {
                        TRain.core.rmvFrameDoById(self._heartDelayTag);
                        self._heartDelayTag = 0;
                        if (self._isShow) {
                            game.BusyLayer.getInst().hideBusy();
                            self._isShow = false;
                        }
                    }
                    self._receivedNet = true;
                    // if(dataMgr.accMo.isApi){所有场次  不分api还是云平台游戏都加
                    self.networkDelay = Math.floor((TimeUtil.getSvrMS() - self._sendNetTime) / 2);
                    game.notifiCenter.postEvent("NetWorkDelay" /* NETWORK_DELAY */, self.networkDelay);
                    // }
                }, self);
                self._receivedNet = true;
                self.heartSync();
            }
        };
        DataManager.prototype.stopHeart = function () {
            var self = this;
            if (self._heartTag) {
                TRain.core.rmvFrameDoById(self._heartTag);
                self._heartTag = 0;
            }
            if (self._heartDelayTag) {
                TRain.core.rmvFrameDoById(self._heartDelayTag);
                self._heartDelayTag = 0;
            }
        };
        DataManager.prototype.heartSync = function () {
            var self = this;
            if (self._heartDelayTag) {
                TRain.core.rmvFrameDoById(self._heartDelayTag);
                self._heartDelayTag = 0;
            }
            if (!self._receivedNet) {
                //超过3s  显示timeout超时  所以传了3100ms
                // if(dataMgr.accMo.isApi){所有场次  不分api还是云平台游戏都加
                game.notifiCenter.postEvent("NetWorkDelay" /* NETWORK_DELAY */, 3100);
                // }
            }
            self._heartDelayTag = TRain.core.addDelayDo(function () {
                if (!self._receivedNet && !self._isShow) {
                    self._isShow = true;
                    game.BusyLayer.getInst().showBusy();
                }
            }, self, 1500);
            self._receivedNet = false;
            self._sendNetTime = TimeUtil.getSvrMS();
            game.Net.sendMsg(301 /* c2g_heartbeat */, {});
        };
        return DataManager;
    }());
    game.DataManager = DataManager;
    __reflect(DataManager.prototype, "game.DataManager");
})(game || (game = {}));
var game;
(function (game) {
    // dbMgr.createArmAsync( "aaa", function(arm:dragonBones.EgretArmatureDisplay, skinName:string){
    //     arm.x = 200;
    //     arm.y = 200;
    //     arm.animation.play();
    //     self.addChild( arm );
    // }, self );
    dragonBones.EgretFactory._clockHandler = function (time) {
        if (DBoneManager.timeScale <= 0)
            return;
        time *= 0.001;
        var passedTime = (time - this._time) * DBoneManager.timeScale;
        dragonBones.EgretFactory._dragonBonesInstance.advanceTime(passedTime);
        this._time = time;
        return false;
    };
    var DBoneManager = (function () {
        function DBoneManager() {
            var self = this;
            dragonBones.BaseObject.setMaxCount(null, 100);
            self._factory = dragonBones.EgretFactory.factory;
            self._usecnts = {};
            self._loadings = {};
            var p = dragonBones.EgretArmatureDisplay.prototype;
            var disposeFun = p.dispose;
            p.dispose = function () {
                game.dbMgr.onArmDispose(this);
                disposeFun.call(this);
            };
        }
        //---------------------------------- 使用计数 --------------------------------------------------
        DBoneManager.prototype.incUsecnt = function (skName) {
            var usecnts = this._usecnts;
            var val = usecnts[skName] || 0;
            usecnts[skName] = val + 1;
        };
        DBoneManager.prototype.decUsecnt = function (skName) {
            var usecnts = this._usecnts;
            var val = usecnts[skName] || 0;
            usecnts[skName] = val - 1;
        };
        //-------------------------------------------------------------------------------------
        DBoneManager.prototype.createArm = function (skName) {
            var self = this;
            var factory = self._factory;
            var texDatas = factory.getTextureAtlasData(skName);
            if (texDatas && texDatas[0].renderTexture) {
                var dbDisply = factory.buildArmatureDisplay(skName, skName);
                if (dbDisply) {
                    dbDisply.ud = skName;
                    self.incUsecnt(skName);
                    return dbDisply;
                }
            }
            return null;
        };
        DBoneManager.prototype.createArmAsync = function (skName, finBack, thisObj) {
            var self = this;
            var arm = self.createArm(skName);
            if (arm) {
                TRain.core.addNextDo(finBack, thisObj, arm, skName);
                return;
            }
            self.loadResImpl(skName, function (succ, skName) {
                var arm = succ ? self.createArm(skName) : null;
                finBack.call(thisObj, arm, skName);
            }, self);
        };
        DBoneManager.prototype.loadAnimate = function (skName, callback, thisObj) {
            var self = this;
            var factory = this._factory;
            var texDatas = factory.getTextureAtlasData(skName);
            if (texDatas && texDatas[0].renderTexture) {
                if (callback) {
                    TRain.core.addNextDo(callback, thisObj, true, skName);
                } //已加载
                return;
            }
            self.loadResImpl(skName, callback, thisObj);
        };
        //-----------------------------------------------------------------------------------
        DBoneManager.prototype.getUrl = function (skName) {
            return DBoneManager.resPath + skName + ".db";
        };
        DBoneManager.prototype.loadResImpl = function (skName, callback, thisObj) {
            var self = this;
            var loadings = self._loadings[skName];
            if (loadings) {
                if (callback) {
                    loadings.push({ callback: callback, target: thisObj });
                }
                return;
            }
            loadings = [];
            self._loadings[skName] = loadings;
            if (callback) {
                loadings.push({ callback: callback, target: thisObj });
            }
            var url = self.getUrl(skName);
            TRain.assetMgr.getTex(url, function (data) {
                self.onLoadResFin(data, skName);
            }, self, "mc" /* MC */);
        };
        DBoneManager.prototype.onLoadResFin = function (data, skName) {
            var self = this;
            var success = false;
            if (data) {
                success = true;
                var factory = self._factory;
                var conf = data.conf;
                data.$addRef();
                var texDatas = factory.getTextureAtlasData(skName);
                if (texDatas) {
                    texDatas[0].renderTexture = data;
                    //factory.parseDragonBonesData( conf.ske, skName );
                    //factory.parseTextureAtlasData( conf.tex, data, skName );
                }
                else {
                    factory.parseDragonBonesData(conf.ske, skName);
                    factory.parseTextureAtlasData(conf.tex, data, skName);
                }
            }
            var loadingList = self._loadings;
            var loadings = loadingList[skName];
            delete loadingList[skName];
            for (var i = loadings.length - 1; i >= 0; --i) {
                var loadData = loadings[i];
                loadData.callback.call(loadData.target, success, skName);
            }
        };
        //-----------------------------------------------------------------
        DBoneManager.prototype.onArmDispose = function (arm) {
            this.decUsecnt(arm.ud);
        };
        DBoneManager.prototype.doGC = function () {
            var self = this;
            var usecnts = self._usecnts;
            var factory = self._factory;
            var delKeys = [];
            for (var skName in usecnts) {
                var usecnt = usecnts[skName];
                if (usecnt <= 0) {
                    delKeys.push(skName);
                    var texDatas = factory.getTextureAtlasData(skName);
                    if (texDatas) {
                        //factory.removeDragonBonesData( skName );
                        //factory.removeTextureAtlasData( skName );
                        var texData = texDatas[0];
                        texData.renderTexture.$subRef();
                        texData.renderTexture = null;
                    }
                }
            }
            if (delKeys.length > 0) {
                for (var i = 0, n = delKeys.length; i < n; ++i) {
                    delete usecnts[delKeys[i]];
                }
            }
        };
        DBoneManager.timeScale = 1;
        return DBoneManager;
    }());
    game.DBoneManager = DBoneManager;
    __reflect(DBoneManager.prototype, "game.DBoneManager");
})(game || (game = {}));
var game;
(function (game) {
    var GameManager = (function () {
        function GameManager() {
            var self = this;
            self._loadStep = 0 /* loadmainui */;
            self._stepState = 0 /* wait */;
            self._scTp = 0 /* NONE */;
        }
        GameManager.prototype.begin = function (main) {
            var self = this;
            self._main = main;
            TRain.core.stage.addEventListener(egret.Event.RESIZE, function (e) {
                var stage = e.target;
                game.notifiCenter.postEvent(egret.Event.RESIZE, stage.$stageWidth, stage.$stageHeight);
            }, self);
            game.resMgr = new game.ResManager();
            game.dataMgr = new game.DataManager();
            game.dbMgr = new game.DBoneManager();
            game.TipsMgr.init();
            var resName = "resConf";
            var resData = RES.getRes(resName);
            if (resData) {
                game.resMgr.initResConf(resData);
                if (resData.filter)
                    cui.uiMgr.createFilters(resData.filter);
                RES.destroyRes(resName);
            }
            resName = "lang";
            resData = RES.getRes(resName);
            if (resData) {
                TRain.langMgr.addGps(resData);
                RES.destroyRes(resName);
            }
            game.Protobuf.addDecodeProtos(NET_CONF.s2cDecode, NET_CONF.typeDecode);
            game.Protobuf.addEncodeProtos(NET_CONF.c2sEncode, NET_CONF.typeDecode);
            TRain.core.addFrameDo(TRain.actionMgr.advanceTime, TRain.actionMgr, true);
            TRain.core.addFrameDo(TRain.mcMgr.advanceTime, TRain.mcMgr, true);
            self.startLogin();
        };
        GameManager.prototype.gotoScene = function (tp) {
            var self = this;
            if (self._scTp == tp)
                return;
            self._scTp = tp;
            var scene;
            switch (tp) {
                case 1 /* LodingScene */:
                    scene = game.LoadingScene.getInst();
                    break;
                case 2 /* LoginScene */:
                    scene = new game.LoginScene();
                    break;
                case 3 /* GameScene */:
                    scene = game.GameScene.createInst();
                    break;
            }
            var oldScene = self._curScene;
            if (oldScene) {
                self._main.removeChild(oldScene);
                if (tp == 3 /* GameScene */ || game.LoadingScene.getInst() != oldScene)
                    oldScene.dispose();
                self._curScene = null;
            }
            self._curScene = scene;
            if (scene) {
                self._main.addChild(scene);
            }
        };
        //------------------------------------------------- login ---------------------------------------
        GameManager.prototype.startLogin = function () {
            var self = this;
            //notifiCenter.addListener( CONN_EVT.CONN_SUCC, self.tryStartStep, self, true );
            //dataMgr.accMo.addListener( Account_EVT.got_svrinfo, self.tryStartStep, self, true );
            var accMo = game.dataMgr.accMo;
            var isReload = game.GameUtil.getLocalBool("RELOAD" /* ISRELOAD */);
            // let binaryPwd = GameUtil.binaryToStr(codePwd) ;
            var loginType = game.GameUtil.getLocal("LAST_LOGIN" /* LAST_LOGIN */);
            var isApi = accMo.isApi;
            if (isApi && CONF.apiInfo) {
                self.gotoScene(1 /* LodingScene */);
                accMo.apiLogin();
            }
            else {
                if (!isReload) {
                    self.gotoScene(1 /* LodingScene */);
                    URLUtil.checkDeviceID(function () {
                        if (loginType == "1") {
                            accMo.login();
                        }
                        else if (loginType == "3") {
                            accMo.wxLogin();
                        }
                        else {
                            accMo.verlogin(null, null);
                        }
                        // dataMgr.accMo.addListener( AccountMo_EVT.login_fin, function(){ 
                        // },self,true);
                        game.notifiCenter.addListener("loginfin" /* CONN_LOGINFAIL */, function (err) {
                            game.MsgBox.showTipBox(true, err, null, null, null, true);
                            if (err == 10028 /* client_Login_OpenIdError */ || err == 10029 /* client_Login_OpenSignError */) {
                                game.GameUtil.setLocal("ACC_Pwd" /* ACC_Pwd */, "");
                                game.GameUtil.setLocal("LAST_LOGIN" /* LAST_LOGIN */, "2");
                            }
                            TRain.core.addDelayDo(function () {
                                self.gotoScene(2 /* LoginScene */);
                            }, self, 1000);
                        }, self);
                    }, function () {
                        TRain.core.addDelayDo(function () {
                            self.gotoScene(2 /* LoginScene */);
                        }, self, 1000);
                    });
                }
                else {
                    self.gotoScene(2 /* LoginScene */);
                }
            }
            self.tryStartStep();
            self._main.onGameShow();
            //请求背景音乐
            accMo.getChannelInfo();
        };
        GameManager.prototype.startGame = function () {
            var self = this;
            self._main.onGameShow();
            self.gotoScene(3 /* GameScene */);
            TRain.core.addDelayDo(function () {
                RES.loadGroup("publicRes");
            }, self, 500);
            // dataMgr.startTimeSync();
        };
        //------------------------------------------------ 开始进入游戏 -----------------------------------
        GameManager.prototype.loadUpdate = function () {
            var self = this;
            var step = self._loadStep;
            switch (step) {
                case 0 /* loadmainui */:
                    if (game.dataMgr.gameMo.isMoLoaded("resource" /* resNm */)) {
                        self.setStepState(2 /* finish */);
                    }
                    break;
                case 1 /* loadgameConf */:
                    if (self._scTp != 2 /* LoginScene */ && game.resMgr.getLoadCnt() == 0) {
                        self.setStepState(2 /* finish */);
                    }
                    break;
                case 2 /* loadhall */:
                    var gameMo = game.dataMgr.gameMo;
                    if (gameMo.isMoLoaded("hall" /* hall */)) {
                        var moList = CONF.moList;
                        for (var moName in moList) {
                            var moInfo = moList[moName];
                            if (moInfo) {
                                gameMo.initMo(moName, moInfo);
                            }
                            gameMo.loadModule(moName);
                        }
                        self.setStepState(2 /* finish */);
                    }
                    break;
                case 3 /* loadPreload */:
                    if (game.resMgr.preloadFin) {
                        self.setStepState(2 /* finish */);
                    }
                    break;
                case 4 /* waitparse */:
                    if (game.resMgr.getParseCnt() == 0) {
                        self.setStepState(2 /* finish */);
                    }
                    break;
                case 5 /* end */:
                    if (game.LoadingScene.getInst().isFinish() && self._curScene) {
                        TRain.core.rmvFrameDo(self, self.loadUpdate);
                        self.startGame();
                    }
                    break;
            }
        };
        GameManager.prototype.setStepState = function (state) {
            var self = this;
            if (self._stepState === state)
                return;
            self._stepState = state;
            if (state === 2 /* finish */) {
                self._loadStep++;
                self._stepState = 0 /* wait */;
                self.tryStartStep();
            }
        };
        GameManager.prototype.tryStartStep = function () {
            var self = this;
            if (self._stepState != 0 /* wait */)
                return;
            if (self._loadStep == 5 /* end */)
                return;
            var text = "";
            var loadingScene = game.LoadingScene.getInst();
            switch (self._loadStep) {
                case 0 /* loadmainui */:
                    loadingScene.setLoadStep(text, 40, 30000);
                    var moInfo = CONF.moList["resource" /* resNm */];
                    if (moInfo) {
                        delete CONF.moList["resource" /* resNm */];
                        game.dataMgr.gameMo.initMo("resource" /* resNm */, moInfo);
                    }
                    else {
                        game.dataMgr.gameMo.initMo("resource" /* resNm */, { res: true, theme: true });
                    }
                    game.dataMgr.gameMo.loadModule("resource" /* resNm */);
                    TRain.core.addFrameDo(self.loadUpdate, self, false, 100);
                    break;
                case 1 /* loadgameConf */:
                    loadingScene.setLoadStep(text, 10, 1000);
                    //analyMgr.loadingSet( 3, text );
                    game.dataMgr.loadConfs();
                    break;
                case 2 /* loadhall */:
                    loadingScene.setLoadStep(text, 20, 10000);
                    game.dataMgr.gameMo.loadModule("hall" /* hall */, true);
                    break;
                case 3 /* loadPreload */:
                    loadingScene.setLoadStep(text, 20, 4000);
                    game.resMgr.startPreload();
                    break;
                case 4 /* waitparse */://
                    loadingScene.setLoadStep(text, 10, 1000);
                    //analyMgr.loadingSet( 7, text );
                    break;
            }
            var state = self._stepState = 1 /* loading */;
            self.setStepState(state);
        };
        //----------------------------------------------------------------
        GameManager.prototype.setTimeScale = function (val) {
            TRain.core.setTimeScale(val);
            game.DBoneManager.timeScale = val;
        };
        GameManager.prototype.beginScaleMode = function () {
            TRain.core.beginScaleMode();
        };
        GameManager.prototype.endScaleMode = function () {
            TRain.core.endScaleMode();
        };
        return GameManager;
    }());
    game.GameManager = GameManager;
    __reflect(GameManager.prototype, "game.GameManager");
})(game || (game = {}));
var game;
(function (game) {
    var UIDomBase = (function (_super) {
        __extends(UIDomBase, _super);
        function UIDomBase() {
            var _this = _super.call(this) || this;
            var self = _this;
            self._mx = egret.Matrix.create();
            var node = self._node = document.createElement("div");
            URLUtil.initDom(node);
            return _this;
        }
        UIDomBase.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
            var self = this;
            var node = self._node;
            if (node && node.parentNode) {
                node = null;
                URLUtil.hideDom(node);
            }
            self._ele = null;
            egret.Matrix.release(self._mx);
            self._mx = null;
        };
        UIDomBase.prototype.$onAddToStage = function (stage, nestLevel) {
            _super.prototype.$onAddToStage.call(this, stage, nestLevel);
            var self = this;
            URLUtil.showDom(self._node);
            game.notifiCenter.addListener(egret.Event.RESIZE, self.onResize, self);
            TRain.core.addDelayDo(self.onResize, self, 100);
        };
        UIDomBase.prototype.$onRemoveFromStage = function () {
            _super.prototype.$onRemoveFromStage.call(this);
            var self = this;
            game.notifiCenter.rmvListener(egret.Event.RESIZE, self);
            URLUtil.hideDom(self._node);
        };
        UIDomBase.prototype.onResize = function () {
            var self = this;
            if (self.disposed)
                return;
            var mx = self._mx;
            mx.identity();
            var list = egret.sys.DisplayList;
            mx.scale(list.$canvasScaleX, list.$canvasScaleY);
            URLUtil.setDomMx(self._node, mx);
            self.adjustPos();
        };
        UIDomBase.prototype.validateDL = function () {
            _super.prototype.validateDL.call(this);
            var self = this;
            var ele = self._node;
            ele.style.width = self.width + "px";
            ele.style.height = self.height + "px";
            self.adjustPos();
        };
        UIDomBase.prototype.adjustPos = function () {
            var self = this;
            var ele = self._node;
            var pt = egret.$TempPoint;
            self.localToGlobal(0, 0, pt);
            var list = egret.sys.DisplayList;
            ele.style.left = (list.$canvasScaleX * pt.x) + "px";
            ele.style.top = (list.$canvasScaleY * pt.y) + "px";
            // console.log( "x=" + self.parent.x + "  y=" + self.parent.y );
            // console.log( "pt.x=" + pt.x + "  pt.y=" + pt.y );
            // console.log( "canvasScaleX=" + list.$canvasScaleX + "  canvasScaleY=" + list.$canvasScaleY );
        };
        return UIDomBase;
    }(cui.Group));
    game.UIDomBase = UIDomBase;
    __reflect(UIDomBase.prototype, "game.UIDomBase");
    var UIIFrame = (function (_super) {
        __extends(UIIFrame, _super);
        function UIIFrame() {
            var _this = _super.call(this) || this;
            var self = _this;
            var ele = self._ele = document.createElement("iframe");
            URLUtil.initDom(ele);
            ele.style.width = "100%";
            ele.style.height = "100%";
            var node = self._node;
            if (game.GameUtil.os == 1 /* iOS */) {
                node.style["-webkit-overflow-scrolling"] = "touch";
                node.style["overflow-y"] = "scroll";
            }
            node.appendChild(ele);
            return _this;
        }
        Object.defineProperty(UIIFrame.prototype, "src", {
            get: function () {
                return this._ele.src;
            },
            set: function (v) {
                this._ele.src = v;
            },
            enumerable: true,
            configurable: true
        });
        return UIIFrame;
    }(UIDomBase));
    game.UIIFrame = UIIFrame;
    __reflect(UIIFrame.prototype, "game.UIIFrame");
})(game || (game = {}));
var game;
(function (game) {
    var ResManager = (function () {
        //private _clrs:number[];
        function ResManager() {
            var self = this;
            self._loadConf = {};
            self._parses = [];
            self._loadcnt = 0;
            // self._clrs = [
            //     0,
            //     0xafd1db,
            //     0x70c1ff,
            //     0xde88fe,
            //     0xff983c,
            //     0xffffff,
            //     0xffcc00,
            //     0xfff600
            // ];
        }
        ResManager.getConfUrl = function (name) {
            return "conf/" /* confPath */ + name + ".json";
        };
        ResManager.loadVer = function (fileNm, cb, tar) {
            var verCtrl = RES.getVerCtrl();
            var homeUrl = verCtrl.getHome(fileNm);
            if (homeUrl.length == 0) {
                homeUrl = game.GameUtil.getHome(fileNm);
                verCtrl.addHome(fileNm, homeUrl);
                homeUrl = verCtrl.getHome(fileNm);
            }
            if (true) {
                cb.call(tar, true);
                return;
            }
            var cb1 = function (event) {
                if (event.type == egret.Event.COMPLETE) {
                    var request_1 = (event.target);
                    var data = JSON.parse(request_1.response);
                    var jsver = data.js;
                    if (jsver)
                        delete data.js;
                    var gver = data.gVer;
                    if (gver)
                        delete data.gVer;
                    var zip = data.zip;
                    if (zip)
                        delete data.zip;
                    var verCtrl_1 = RES.getVerCtrl();
                    var homever = data.ver;
                    if (homever) {
                        delete data.ver;
                        verCtrl_1.addVer(fileNm, homever);
                    }
                    verCtrl_1.addWebVer(data);
                    cb.call(tar, true, jsver, gver, zip);
                }
                else {
                    cb.call(tar, false);
                }
            };
            var request = new egret.HttpRequest();
            request.addEventListener(egret.Event.COMPLETE, cb1, ResManager);
            request.addEventListener(egret.IOErrorEvent.IO_ERROR, cb1, ResManager);
            request.responseType = egret.HttpResponseType.TEXT;
            request.open(homeUrl + "webver_" /* WEBVER_HEAD */ + fileNm + ".ver?v=" + Date.now());
            request.send();
        };
        ResManager.loadRes = function (fileNm, cb, tar) {
            var loadData = { nm: fileNm, cb: cb, tar: tar };
            var resData = ResManager._resData;
            resData.waits.push(loadData);
            if (!resData.cur) {
                RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, ResManager._loadResCom, ResManager);
                ResManager._loadNextRes();
            }
        };
        ResManager._loadNextRes = function () {
            var resData = ResManager._resData;
            var waits = resData.waits;
            if (waits.length <= 0) {
                resData.cur = null;
                RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, ResManager._loadResCom, ResManager);
            }
            else {
                var loadData = resData.cur = waits.shift();
                var resUrl = loadData.nm + "_res" /* RES_POSTFIX */ + "." + "json" /* JSON */;
                RES.loadConfig(resUrl, "");
            }
        };
        ResManager._loadResCom = function (event) {
            var resData = ResManager._resData;
            var loadData = resData.cur;
            if (loadData) {
                loadData.cb.call(loadData.tar, !event.isErr);
            }
            ResManager._loadNextRes();
        };
        ResManager.loadTheme = function (fileNm, cb, tar, gpNm) {
            var resUrl = fileNm + "_theme" /* THEME_POSTFIX */ + "." + "json" /* JSON */;
            RES.getUrlResAsync(resUrl, "json" /* JSON */, function (data) {
                if (data) {
                    TRain.UITheme.addSkinConf(data, gpNm);
                    RES.destroyUrl(resUrl, "json" /* JSON */);
                }
                cb.call(tar, !!data);
            }, ResManager);
        };
        ResManager.loadGroup = function (groupNm, cb, tar) {
            var cb1 = function (event) {
                if (event.groupName == groupNm) {
                    RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, cb1, ResManager);
                    cb.call(tar);
                }
            };
            RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, cb1, ResManager);
            RES.loadGroup(groupNm);
        };
        ResManager.prototype.initResConf = function (data) {
            var self = this;
            if (data) {
                var paths = self._paths = data.path;
                if (paths) {
                    game.DBoneManager.resPath = paths.db;
                }
                //self._iconRes = data.iconRes;
            }
            var soundMgr = TRain.soundMgr;
            soundMgr.sfxState = game.GameUtil.getLocalBool("SFX_STATUS" /* SFX_STATUS */, true);
            soundMgr.musicState = game.GameUtil.getLocalBool("MUSIC_STATUS" /* MUSIC_STATUS */, true);
        };
        // public getQualColor( qual:number ){
        //     return this._clrs[qual];
        // }
        //---------------------------------------------------------------
        // private _getIconSrc( key:string, arg1:number|string ):string
        // {
        //     let iconRess = this._iconRes[key];
        //     for( let i=0, len=iconRess.length; i<len; ++i ){
        //         let info = iconRess[i];
        //         if( info.min<=arg1 && info.max>=arg1 ){
        //             return info.nm + "@" + arg1;
        //         }
        //     }
        //     return null;
        // }
        ResManager.prototype.getImgUrl = function (nm, isJpg) {
            return this._paths.img + nm + (isJpg ? ".jpg" : ".png");
        };
        /**
         *
         * @param cdnPath 云平台cdn地址
         */
        ResManager.prototype.getYptUrl = function (cdnPath) {
            var url = "ypt/" /* yptPath */ + cdnPath;
            return this.getNoHomeUrl(url);
        };
        ResManager.prototype.getNoHomeUrl = function (url) {
            return (url.indexOf("?") >= 0) ? url + "&noHome=1" : url + "?noHome=1";
        };
        ResManager.prototype.getNoticeUrl = function (noticePath) {
            var url = noticePath;
            return this.getNoHomeUrl(url);
        };
        //-------------------------- load config ----------------------------------------
        //获取游戏内平台相关配置
        // public loadPlatConf(tp:PlatSourceTp,platId:number,fin:Function, thisObj:any)
        // {
        //     let self = this;
        //     let key = "";
        //     switch (tp)
        //     {
        //         case PlatSourceTp.poster: key = "poster"; break;
        //     }
        //     if(platId) key += "_" + platId;
        //     self.loadConf(self._paths.plat + key + ".json",fin,thisObj,true);
        // }
        //----------------------------------- 加载 config ----------------------------------------------
        ResManager.prototype.getLoadCnt = function () {
            return this._loadcnt;
        };
        ResManager.prototype.getParseCnt = function () {
            return this._parses.length;
        };
        // public getLoadIcons():Array<any>
        // {
        //     let loadArr = this._loadIcons;
        //     let loadNms = []; 
        //     for(let j = 0,jLen = loadArr.length;j<jLen;j++){
        //         let loadBg = loadArr[j];
        //         let loadBgAfter = loadBg.split("_")[1];
        //         let loadNm = loadBgAfter.split(".")[0]; //截取出名字
        //         loadNms.push(loadNm);
        //     }
        //     return loadNms;
        // }
        ResManager.prototype.loadConf = function (url, fin, tar, isURL) {
            if (isURL === void 0) { isURL = false; }
            var self = this;
            var loadConfList = self._loadConf;
            if (!isURL)
                url = ResManager.getConfUrl(url);
            var target = { fin: fin, tar: tar };
            var loadInfo = loadConfList[url];
            if (loadInfo) {
                loadInfo.tars.push(target);
            }
            else {
                self._loadcnt++;
                loadInfo = loadConfList[url] = { tars: [target], url: url, data: null };
                RES.getUrlResAsync(url, "json" /* JSON */, self.loadConfFin, self);
            }
        };
        ResManager.prototype.loadConfFin = function (data, url) {
            var self = this;
            if (data) {
                var loadInfo = self._loadConf[url];
                loadInfo.data = data;
                var parses = self._parses;
                parses.push(loadInfo);
                if (parses.length == 1) {
                    TRain.core.addFrameDo(self.parseConf, self, false);
                }
            }
            self._loadcnt--;
            delete self._loadConf[url];
        };
        ResManager.prototype.parseConf = function () {
            var self = this;
            var loadInfo = self._parses[0];
            var target = loadInfo.tars.shift();
            target.fin.call(target.tar, loadInfo.data, loadInfo.url);
            if (loadInfo.tars.length === 0) {
                self._parses.shift();
                RES.destroyUrl(loadInfo.url, "json" /* JSON */);
                if (self._parses.length === 0) {
                    TRain.core.rmvFrameDo(self, self.parseConf);
                }
            }
        };
        ResManager.prototype.startPreload = function () {
            var self = this;
            var accMo = game.dataMgr.accMo;
            if (accMo.getData()) {
                self._startPreload();
            }
            else {
                accMo.addListener("svr_fin" /* login_svr_fin */, self._startPreload, self, true);
            }
        };
        ResManager.prototype.compGameList = function (a, b) {
            if (a.isHot) {
                if (!b.isHot) {
                    return -1;
                }
            }
            else {
                if (b.isHot) {
                    return 1;
                }
            }
            if (a.sort == b.sort) {
                return a.gameid - b.gameid;
            }
            else {
                return a.sort - b.sort;
            }
        };
        ResManager.prototype._startPreload = function () {
            var self = this;
            var gameModel = game.dataMgr.gameMo;
            //预加载大厅背景声音
            game.dataMgr.soundMo.loadMusic();
            var curSvrList = gameModel.getData();
            var isApi = game.dataMgr.accMo.isApi;
            if (!isApi)
                curSvrList.sort(self.compGameList);
            var loadGmds = [];
            for (var i = 0; i < curSvrList.length; i++) {
                var gameData = curSvrList[i];
                var conf = gameData.conf;
                var isRoomCls = conf.class2.indexOf(7 /* create_room */) != -1;
                if (!isRoomCls) {
                    if (isApi) {
                        if (conf.isHot) {
                            loadGmds.push(conf);
                        }
                    }
                    else {
                        loadGmds.push(conf);
                    }
                }
            }
            var loadCnt = loadGmds.length;
            if (loadCnt > 0) {
                if (loadCnt > 10)
                    loadCnt = 10;
                var needRess = [];
                for (var i = 0; i < loadCnt; ++i) {
                    var gameConf = loadGmds[i];
                    var file = gameConf.icon || gameConf.file;
                    var url = game.dbMgr.getUrl("hall_" /* hallNm */ + file);
                    needRess.push([url, "mc" /* MC */]);
                }
                var finCB_1;
                finCB_1 = function (event) {
                    if (event.groupName == "com_preload") {
                        self.preloadFin = true;
                        RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, finCB_1, self);
                    }
                };
                // let progressCB:(event:RES.ResourceEvent)=>void;
                // progressCB = function( event:RES.ResourceEvent ){
                //     if( event.groupName == "com_preload" ){
                //         // self.preloadFin = true;
                //         // RES.removeEventListener( RES.ResourceEvent.GROUP_COMPLETE, progressCB, self );
                //         let waitDic = event.currentTarget._waitGpDic["com_preload"];
                //         let fins = waitDic.fins as Array<any>;
                //         let fails = waitDic.fails as Array<any>;
                //         let newArr = self._loadIcons = fins.filter(items => {
                //             if(fails.indexOf(items) == -1) return items;
                //         })
                //         if(newArr.length > loadVal && !self.preloadFin){ 
                //             self.preloadFin = true;
                //         }
                //         notifiCenter.postEvent(UIEvent.LOAD_ICON,newArr);
                //     }
                // }
                // RES.addEventListener( RES.ResourceEvent.GROUP_PROGRESS, progressCB, self )
                RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, finCB_1, self);
                RES.loadCustomGroup("com_preload", needRess);
            }
            else {
                self.preloadFin = true;
            }
        };
        ResManager._resData = { waits: [], cur: null };
        return ResManager;
    }());
    game.ResManager = ResManager;
    __reflect(ResManager.prototype, "game.ResManager");
})(game || (game = {}));
var game;
(function (game) {
    var EffectNode = (function (_super) {
        __extends(EffectNode, _super);
        function EffectNode() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.useOnce = true;
            self.touchEnabled = false;
            return _this;
        }
        EffectNode.prototype.setFinish = function (cb, tar) {
            this._cb = cb != null ? { fun: cb, tar: tar } : null;
        };
        EffectNode.prototype.play = function () {
            this._inPly = true;
        };
        EffectNode.prototype.aniFin = function () {
            var self = this;
            var cbData = self._cb;
            if (cbData) {
                self._cb = null;
                cbData.fun.call(cbData.tar, self);
            }
            if (self.useOnce) {
                self.dispose();
            }
            else {
                var parent_1 = self.parent;
                if (parent_1)
                    parent_1.removeChild(self);
            }
        };
        EffectNode.prototype.dispose = function () {
            var self = this;
            var parent = self.parent;
            if (parent)
                parent.removeChild(self);
            self._cb = null;
            _super.prototype.dispose.call(this);
        };
        return EffectNode;
    }(cui.Group));
    game.EffectNode = EffectNode;
    __reflect(EffectNode.prototype, "game.EffectNode");
    var ImgEffect = (function (_super) {
        __extends(ImgEffect, _super);
        function ImgEffect(img, showTm) {
            var _this = _super.call(this) || this;
            var self = _this;
            img.visible = false;
            self._img = img;
            self.addChild(img);
            self._aniTm = showTm;
            return _this;
        }
        ImgEffect.prototype.play = function () {
            _super.prototype.play.call(this);
            var self = this;
            self._img.visible = true;
            self._tag = TRain.core.addDelayDo(self.aniFin, self, self._aniTm);
        };
        ImgEffect.prototype.aniFin = function () {
            this._tag = 0;
            _super.prototype.aniFin.call(this);
        };
        ImgEffect.prototype.dispose = function () {
            var tag = this._tag;
            if (tag) {
                TRain.core.rmvDelayDoByID(tag);
            }
            _super.prototype.dispose.call(this);
        };
        return ImgEffect;
    }(EffectNode));
    game.ImgEffect = ImgEffect;
    __reflect(ImgEffect.prototype, "game.ImgEffect");
    var ClipEffect = (function (_super) {
        __extends(ClipEffect, _super);
        function ClipEffect(anitp, aniName) {
            var _this = _super.call(this) || this;
            var self = _this;
            self._anitp = anitp;
            var clip = new TRain.MovieClip();
            self._clip = clip;
            clip.addEventListener(egret.Event.COMPLETE, self.aniFin, self);
            self.addChild(clip);
            var idx = aniName.indexOf(".");
            if (idx < 0) {
                TRain.mcMgr.getMCDataAsync(anitp, aniName, self.onLoadDataFinish, self);
            }
            else {
                TRain.mcMgr.getMCDataAsync(anitp, aniName.substr(0, idx), self.onLoadDataFinish, self, aniName.substring(idx + 1));
            }
            return _this;
        }
        ClipEffect.prototype.onLoadDataFinish = function (clipData, anitp) {
            var self = this;
            if (!clipData) {
                TRain.core.addDelayDo(self.aniFin, self, 500);
                return;
            }
            var clip = self._clip;
            clip.movieClipData = clipData;
            if (self._inPly) {
                clip.gotoAndPlay(0, 1);
                TRain.mcMgr.add(clip);
            }
        };
        ClipEffect.prototype.play = function () {
            _super.prototype.play.call(this);
            var clip = this._clip;
            if (clip.movieClipData) {
                clip.gotoAndPlay(0, 1);
                TRain.mcMgr.add(clip);
            }
        };
        ClipEffect.prototype.aniFin = function () {
            var self = this;
            var clip = self._clip;
            clip.stop();
            TRain.mcMgr.remove(clip);
            _super.prototype.aniFin.call(this);
        };
        ClipEffect.prototype.dispose = function () {
            var self = this;
            var movieClipData = self._clip.movieClipData;
            if (movieClipData) {
                self._clip.movieClipData = null;
                TRain.mcMgr.freeMCData(self._anitp, movieClipData);
            }
            _super.prototype.dispose.call(this);
        };
        return ClipEffect;
    }(EffectNode));
    game.ClipEffect = ClipEffect;
    __reflect(ClipEffect.prototype, "game.ClipEffect");
    var DBEffect = (function (_super) {
        __extends(DBEffect, _super);
        /**
         * - 播放指定动画。
         * @param name - 龙骨资源名字
         * @param aniNm - 动画数据名称。 （如果未设置，则播放默认动画，或将暂停状态切换为播放状态，或重新播放之前播放的动画）
         * @param playTimes - 循环播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）
         */
        function DBEffect(name, aniNm, playTime) {
            var _this = _super.call(this) || this;
            var self = _this;
            self._aniNm = aniNm;
            self._playTime = playTime || -1;
            game.dbMgr.createArmAsync(name, function (arm) {
                if (self.disposed)
                    return;
                self._arm = arm;
                arm.addDBEventListener(dragonBones.EventObject.COMPLETE, self.aniFin, self);
                self.addChild(arm);
                if (self._inPly) {
                    arm.animation.play(self._aniNm, self._playTime);
                }
            }, self);
            return _this;
        }
        DBEffect.prototype.play = function () {
            _super.prototype.play.call(this);
            var self = this;
            var arm = self._arm;
            if (arm) {
                arm.animation.play(self._aniNm, self._playTime);
            }
        };
        return DBEffect;
    }(EffectNode));
    game.DBEffect = DBEffect;
    __reflect(DBEffect.prototype, "game.DBEffect");
    var EffectLayer = (function (_super) {
        __extends(EffectLayer, _super);
        function EffectLayer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._deque = new Array();
            return _this;
        }
        EffectLayer.prototype.dispose = function () {
            var self = this;
            self.clearAll();
            self.delegate = null;
        };
        EffectLayer.prototype.isPlaying = function () {
            var self = this;
            return self.numChildren > 0 || self._deque.length > 0;
        };
        EffectLayer.prototype.addEffect = function (node) {
            var self = this;
            if (self.numChildren <= 0) {
                self.showEffect(node);
            }
            else {
                self._deque.push(node);
            }
        };
        EffectLayer.prototype.showEffect = function (node) {
            var self = this;
            node.play();
            self.addChild(node);
            self.touchEnabled = node.touchEnabled;
            if (self.delegate)
                self.delegate.showLayer(self);
        };
        EffectLayer.prototype.clearAll = function () {
            var self = this;
            self._deque.length = 0;
            var children = self.$children;
            for (var i = 0, n = children.length; i < n; ++i) {
                children[i].dispose();
            }
            self.removeChildren();
        };
        EffectLayer.prototype.$childRemoved = function (child, index) {
            _super.prototype.$childRemoved.call(this, child, index);
            var self = this;
            self.touchEnabled = false;
            TRain.core.addDelayDo(self.update, self, 0);
        };
        EffectLayer.prototype.update = function () {
            var self = this;
            if (self.numChildren <= 0) {
                var deque = self._deque;
                var node = void 0;
                while (deque.length > 0) {
                    node = deque.shift();
                    if (!node.disposed)
                        break;
                    node = null;
                }
                if (node) {
                    self.touchEnabled = node.touchEnabled;
                    node.play();
                    self.addChild(node);
                }
                else {
                    if (self.delegate)
                        self.delegate.hideLayer(self);
                }
            }
        };
        return EffectLayer;
    }(cui.Group));
    game.EffectLayer = EffectLayer;
    __reflect(EffectLayer.prototype, "game.EffectLayer");
})(game || (game = {}));
///<reference path="./DataModel.ts" />
var game;
(function (game) {
    // export const enum PidType {
    //     channelId = "Cloud249", //440001 Cloud259  Cloud249
    //     agentId = "310"// 1 165 310
    // }
    var AccountModel = (function (_super) {
        __extends(AccountModel, _super);
        // private _networkDelay:number;
        // private _sendNetTime:number;
        function AccountModel() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.accNm = "";
            self.isAuto = true;
            self._notifys = [];
            self._bindReward = 0;
            self._isChgQR = false;
            // self._networkDelay = 0;
            game.notifiCenter.addListener("re" /* RECONN */, self.reLogin, self);
            self.regNetHandle();
            var rememberAccs = game.GameUtil.getLocal("ACC_REMEMBER" /* ACC_REMEMBER */, "");
            var accInfos = rememberAccs.split("&");
            self._accArrs = self.formatAccInfo(accInfos);
            self.gameId = 0;
            var lastGameStrs = self._lastGms = game.GameUtil.getLocal("LAST_GAME" /* LAST_GAME */);
            if (lastGameStrs) {
                var lastGameStr = lastGameStrs.split("&");
                self._lastId = parseInt(lastGameStr[0]);
            }
            else {
                self._lastId = 0;
            }
            self._sortClass = [];
            self._webHardwareId = game.GameUtil.getLocal("WEB_HARDWAREID" /* WEB_HARDWAREID */);
            if (!self._webHardwareId) {
                var webHardwareId = self._webHardwareId = game.GameUtil.getUUID();
                game.GameUtil.setLocal("WEB_HARDWAREID" /* WEB_HARDWAREID */, webHardwareId);
            }
            return _this;
        }
        Object.defineProperty(AccountModel.prototype, "lastId", {
            get: function () {
                return this._lastId;
            },
            set: function (val) {
                var self = this;
                if (self._lastId != val) {
                    self._lastId = val;
                    var valStr = val.toString();
                    var lastGameStrs = self._lastGms;
                    var lastGameStr = void 0;
                    if (lastGameStrs) {
                        lastGameStr = lastGameStrs.split("&");
                        var index = lastGameStr.indexOf(valStr);
                        if (index >= 0) {
                            lastGameStr.splice(index, 1);
                        }
                        lastGameStr.unshift(valStr);
                        if (lastGameStr.length > 10) {
                            lastGameStr.pop();
                        }
                    }
                    else {
                        lastGameStr = [];
                        lastGameStr.push(valStr);
                    }
                    var endGms = self._lastGms = lastGameStr.join("&");
                    game.GameUtil.setLocal("LAST_GAME" /* LAST_GAME */, endGms);
                }
            },
            enumerable: true,
            configurable: true
        });
        AccountModel.prototype.getApiHotNum = function () {
            return this._apiHotNum || 20;
        };
        AccountModel.prototype.getLastGms = function () {
            var self = this;
            var lastGms = self._lastGms;
            if (lastGms) {
                return lastGms.split("&");
            }
        };
        AccountModel.prototype.getBindReward = function () {
            return this._bindReward;
        };
        AccountModel.prototype.getIsChgQR = function () {
            return this._isChgQR;
        };
        AccountModel.prototype.getSortCls = function () {
            var self = this;
            var sortList = CONF.preview.sortList;
            if (sortList) {
                var tmpList = [];
                var sortVals = sortList.split(",");
                for (var i = 0, len = sortVals.length; i < len; i++) {
                    var val = sortVals[i];
                    tmpList.push(parseInt(val));
                }
                self._sortClass = tmpList;
            }
            return self._sortClass;
        };
        AccountModel.prototype.getData = function () {
            return this._data;
        };
        Object.defineProperty(AccountModel.prototype, "isApi", {
            get: function () {
                return !!CONF.platNm;
            },
            enumerable: true,
            configurable: true
        });
        AccountModel.prototype.getNoticeDatas = function () {
            return this._noticeDatas || [];
        };
        AccountModel.prototype.apiLogin = function () {
            var self = this;
            var apiInfo = CONF.apiInfo;
            var accNm = apiInfo.acc;
            self.accNm = accNm;
            self._token = apiInfo.info;
            game.Net.ip = apiInfo.gameip;
            // GameUtil.setLocal(GameUtil.LocalKey.LAST_LOGIN,"2");
            CONF.webSvrUrl = apiInfo.gameWebIp;
            var urlCfg = CONF.urlConfig;
            if (urlCfg) {
                var urlConfig = Base64.decode(urlCfg);
                self.setLocals(urlConfig);
            }
            // GameUtil.setLocal(GameUtil.LocalKey.ACC_NAME, accNm);
            self.doConnect();
            self.postEvent("login_fin" /* login_fin */);
        };
        AccountModel.prototype.wxLogin = function () {
            var self = this;
            //获取缓存的openid
            var wxAccInfo = game.GameUtil.getLocal("ACC_Pwd" /* ACC_Pwd */);
            var wxData = JSON.parse(game.GameUtil.binaryToStr(wxAccInfo));
            var openid = wxData.openid;
            var opensign = wxData.opensign;
            // let nickname:string = encodeURIComponent(wxData.nickname);
            var nickname = Base64.base64Encode(wxData.nickname);
            // let headimgurl:string = encodeURIComponent(wxData.headimgurl);
            var headimgurl = Base64.base64Encode(wxData.headimgurl);
            var urlKey = self.getLocals();
            game.GameUtil.setLocal("RELOAD" /* ISRELOAD */, false);
            var hardwareId;
            var packAgeTp;
            if (CONF.isNative) {
                hardwareId = CONF.deviceId;
                packAgeTp = CONF.packAgeTp;
            }
            else {
                hardwareId = self._webHardwareId;
                packAgeTp = "web" /* web */;
            }
            game.HttpUtil.wxLogin({ openid: openid, openSign: opensign, nickname: nickname, headimgurl: headimgurl, channel: CONF.channelId, agentId: CONF.agentId, hardwareId: hardwareId, urlKey: urlKey, clientIp: CONF.clientIp, packAgeTp: packAgeTp }, true, function (data) {
                if (data && data.ret) {
                    self.accNm = data.acc;
                    self._token = data.info;
                    game.Net.ip = data.gameip;
                    CONF.webSvrUrl = data.gameWebIp;
                    game.GameUtil.setLocal("LAST_LOGIN" /* LAST_LOGIN */, "3");
                    if (data.urlConfig) {
                        var urlConfig = Base64.decode(data.urlConfig);
                        self.setLocals(urlConfig);
                    }
                    // GameUtil.setLocal(GameUtil.LocalKey.ACC_PHONE, "");
                    // GameUtil.setLocal(GameUtil.LocalKey.ACC_Pwd, "");
                    // if(data.needip){
                    //     self.getIpInfo();
                    // }
                    self.doConnect();
                    self.postEvent("login_fin" /* login_fin */);
                }
                else {
                    // GameUtil.setLocal(GameUtil.LocalKey.ACC_NAME, "");
                    if (data) {
                        game.notifiCenter.postEvent("loginfin" /* CONN_LOGINFAIL */, game.GameUtil.getErrInfo(data.info));
                    }
                    else {
                        game.notifiCenter.postEvent("fail" /* CONN_FAIL */);
                    }
                    // MsgBox.showPrompt(langConsts.errCode.svrConnectErr);
                }
            }, self);
        };
        AccountModel.prototype.setGmsList = function (list) {
            var self = this;
            self._roomCardList = [];
            self._centerGms = [];
            self._transferGms = [];
            for (var i = 0, len = list.length; i < len; i++) {
                var gameInfo = list[i];
                var card_config = gameInfo.roomcard_config;
                if (card_config) {
                    var tmpArrs = self._roomCardList[card_config.room_type];
                    if (!tmpArrs) {
                        tmpArrs = [];
                    }
                    tmpArrs.push(card_config);
                    self._roomCardList[card_config.room_type] = tmpArrs;
                }
                var walletType = gameInfo.wallet;
                if (walletType) {
                    self._transferGms.push(gameInfo); // 所有api都是转账钱包
                    if (walletType == (0 /* centerWallet */ + 1)) {
                        self._centerGms.push(gameInfo);
                    }
                }
            }
        };
        AccountModel.prototype.getRoomCardList = function (room_type) {
            return this._roomCardList[room_type] || [];
        };
        AccountModel.prototype.getCenterGms = function () {
            return this._centerGms;
        };
        AccountModel.prototype.getTransferGms = function () {
            return this._transferGms;
        };
        AccountModel.prototype.isCenterGm = function (gameid) {
            var self = this;
            var centerGms = self._centerGms;
            for (var i = 0, len = centerGms.length; i < len; ++i) {
                var gameInfo = centerGms[i];
                if (gameInfo.gameid == gameid) {
                    return true;
                }
            }
            return false;
        };
        AccountModel.prototype.isTransferGm = function (gameid) {
            var self = this;
            var transferGms = self._transferGms;
            for (var i = 0, len = transferGms.length; i < len; ++i) {
                var gameInfo = transferGms[i];
                if (gameInfo.gameid == gameid) {
                    return true;
                }
            }
            return false;
        };
        /**
         *
         * @param nm  游客则传null
         * @param pwd  游客则传null
         */
        AccountModel.prototype.verlogin = function (nm, pwd) {
            var self = this;
            if (!nm) {
                nm = self.accNm;
                pwd = "";
                if (!nm) {
                    nm = game.GameUtil.getLocal("ACC_NAME" /* ACC_NAME */) || "";
                }
            }
            var urlKey = self.getLocals();
            game.GameUtil.setLocal("RELOAD" /* ISRELOAD */, false);
            var hardwareId;
            var packAgeTp;
            if (CONF.isNative) {
                hardwareId = CONF.deviceId;
                packAgeTp = CONF.packAgeTp;
            }
            else {
                hardwareId = self._webHardwareId;
                packAgeTp = "web" /* web */;
            }
            game.HttpUtil.accLogin({ nm: nm, channel: CONF.channelId, agentId: CONF.agentId, hardwareId: hardwareId, urlKey: urlKey, clientIp: CONF.clientIp, packAgeTp: packAgeTp }, true, function (data) {
                if (data && data.ret) {
                    var accNm = data.acc;
                    self.accNm = accNm;
                    self._token = data.info;
                    game.Net.ip = data.gameip;
                    CONF.webSvrUrl = data.gameWebIp;
                    game.GameUtil.setLocal("LAST_LOGIN" /* LAST_LOGIN */, "2");
                    if (data.urlConfig) {
                        var urlConfig = Base64.decode(data.urlConfig);
                        self.setLocals(urlConfig);
                    }
                    game.GameUtil.setLocal("ACC_NAME" /* ACC_NAME */, accNm);
                    // GameUtil.setLocal(GameUtil.LocalKey.ACC_PHONE, "");
                    // GameUtil.setLocal(GameUtil.LocalKey.ACC_Pwd, "");
                    // if(data.needip){
                    //     self.getIpInfo();
                    // }
                    self.doConnect();
                    self.postEvent("login_fin" /* login_fin */);
                }
                else {
                    // GameUtil.setLocal(GameUtil.LocalKey.ACC_NAME, "");
                    if (data) {
                        game.notifiCenter.postEvent("loginfin" /* CONN_LOGINFAIL */, game.GameUtil.getErrInfo(data.info));
                    }
                    else {
                        game.notifiCenter.postEvent("fail" /* CONN_FAIL */);
                    }
                    // MsgBox.showPrompt(langConsts.errCode.svrConnectErr);
                }
            }, self);
        };
        AccountModel.prototype.getLocals = function () {
            var urlKey = {};
            urlKey.csUrl = game.GameUtil.getLocal("URL_kefu" /* URL_kefu */);
            urlKey.shareUrl = game.GameUtil.getLocal("URL_erweima" /* URL_erweima */);
            urlKey.locationUrl = game.GameUtil.getLocal("URL_location" /* URL_location */);
            urlKey.bsKfUrl = game.GameUtil.getLocal("URL_bsKf" /* URL_bsKfUrl */);
            urlKey.bsKfUrlWeb = game.GameUtil.getLocal("URL_bsKfWeb" /* URL_bsKfUrlWeb */);
            return JSON.stringify(urlKey);
        };
        AccountModel.prototype.setLocals = function (data) {
            //客服
            var urlConfig = JSON.parse(data);
            var tmpVal = urlConfig.csUrl;
            if (tmpVal && tmpVal.length > 0) {
                if (!CONF.isNative)
                    CONF.kefuUrl = tmpVal;
                game.GameUtil.setLocal("URL_kefu" /* URL_kefu */, tmpVal);
            }
            tmpVal = urlConfig.shareUrl;
            if (tmpVal && tmpVal.length > 0) {
                var oldErweima = game.GameUtil.getLocal("URL_erweima" /* URL_erweima */);
                this._isChgQR = oldErweima != tmpVal;
                CONF.erweima = tmpVal;
                game.GameUtil.setLocal("URL_erweima" /* URL_erweima */, tmpVal);
            }
            tmpVal = urlConfig.locationUrl;
            if (tmpVal && tmpVal.length > 0) {
                CONF.location = tmpVal;
                game.GameUtil.setLocal("URL_location" /* URL_location */, tmpVal);
            }
            tmpVal = urlConfig.bskf;
            if (tmpVal && tmpVal.length > 0) {
                CONF.bsKfUrl = tmpVal;
                game.GameUtil.setLocal("URL_bsKf" /* URL_bsKfUrl */, tmpVal);
            }
            tmpVal = urlConfig.bskfWeb;
            if (tmpVal && tmpVal.length > 0) {
                CONF.bsKfUrlWeb = tmpVal;
                game.GameUtil.setLocal("URL_bsKfWeb" /* URL_bsKfUrlWeb */, tmpVal);
            }
        };
        //账号密码登录
        /**
         *
         * @param nm 手机号
         * @param pwd 密码
         * @param isRemember 记住密码
         */
        AccountModel.prototype.login = function (nm, pwd, isRemember) {
            if (isRemember === void 0) { isRemember = true; }
            var self = this;
            var urlKey = self.getLocals();
            game.GameUtil.setLocal("RELOAD" /* ISRELOAD */, false);
            if (!nm) {
                var accData = self.getAccInfos()[0];
                nm = accData.nm;
                pwd = self.getPwdByPhone(accData.nm);
            }
            var hardwareId;
            var packAgeTp;
            if (CONF.isNative) {
                hardwareId = CONF.deviceId;
                packAgeTp = CONF.packAgeTp;
            }
            else {
                hardwareId = self._webHardwareId;
                packAgeTp = "web" /* web */;
            }
            game.HttpUtil.loginAcc({ phone: nm, pwd: pwd, channel: CONF.channelId, agentId: CONF.agentId, hardwareId: hardwareId, urlKey: urlKey, clientIp: CONF.clientIp, packAgeTp: packAgeTp }, true, function (data) {
                if (data && data.ret) {
                    var accNm = data.acc;
                    self.accNm = accNm;
                    self._token = data.info;
                    game.Net.ip = data.gameip;
                    CONF.webSvrUrl = data.gameWebIp;
                    game.GameUtil.setLocal("LAST_LOGIN" /* LAST_LOGIN */, "1");
                    if (data.urlConfig) {
                        var urlConfig = Base64.decode(data.urlConfig);
                        self.setLocals(urlConfig);
                    }
                    //GameUtil.setLocal(GameUtil.LocalKey.ACC_NAME, accNm);
                    //记录当前登录的手机号和密码 ，密码需要加密处理一下
                    self.setAccPwd(nm, (isRemember ? pwd : ""));
                    // GameUtil.setLocal(GameUtil.LocalKey.ACC_NAME, "");
                    // if(data.needip){
                    //     self.getIpInfo();
                    // }
                    self.doConnect();
                    self.postEvent("login_fin" /* login_fin */);
                }
                else {
                    //GameUtil.setLocal(GameUtil.LocalKey.ACC_NAME, "");
                    //GameUtil.setLocal(GameUtil.LocalKey.ACC_PHONE, "");
                    //GameUtil.setLocal(GameUtil.LocalKey.ACC_Pwd, "");
                    if (data) {
                        game.notifiCenter.postEvent("loginfin" /* CONN_LOGINFAIL */, game.GameUtil.getErrInfo(data.info));
                    }
                    else {
                        game.notifiCenter.postEvent("fail" /* CONN_FAIL */);
                    }
                    // if (data.info == "Login_AccIsNotExist") {
                    //     MsgBox.showPrompt(langConsts.errCode.e_rmt_login_AccIsNotExists);
                    // } else {
                    //     MsgBox.showPrompt(langConsts.errCode.e_rmt_gold_accountnum_or_pwd_error);// MsgBox.showPrompt(data ? data.info : "");
                    // }
                }
            }, self);
        };
        AccountModel.prototype.setAccPwd = function (nm, pwd) {
            var self = this;
            var codePwd = game.GameUtil.strToBinary(pwd);
            var finPwd = (codePwd || "");
            var curAcc = nm + ":" + finPwd;
            var rememberAccs = game.GameUtil.getLocal("ACC_REMEMBER" /* ACC_REMEMBER */, "");
            var accArrs = rememberAccs.split("&");
            var index = -1;
            for (var i = 0; i < accArrs.length; i++) {
                var accNm = accArrs[i].split(":")[0];
                if (accNm == nm) {
                    index = i;
                    break;
                }
            }
            if (index >= 0) {
                accArrs.splice(index, 1);
            }
            accArrs.unshift(curAcc);
            if (accArrs.length > 5) {
                accArrs.pop();
            }
            self._accArrs = self.formatAccInfo(accArrs);
            var endStr = accArrs.join("&");
            game.GameUtil.setLocal("ACC_REMEMBER" /* ACC_REMEMBER */, endStr);
        };
        AccountModel.prototype.formatAccInfo = function (accArrs) {
            var accArr = [];
            for (var i = 0, len = accArrs.length; i < len; i++) {
                var accInfo = accArrs[i];
                var tempArr = accInfo.split(":");
                var accData = {};
                accData.nm = tempArr[0];
                var pwd = tempArr[1];
                accData.pwd = pwd;
                accData.isHasPwd = !!pwd;
                accArr.push(accData);
            }
            return accArr;
        };
        AccountModel.prototype.getPwdByPhone = function (phone) {
            var self = this;
            var accArrs = self._accArrs;
            var pwd = "";
            for (var i = 0, len = accArrs.length; i < len; i++) {
                var accInfo = accArrs[i];
                if (accInfo.nm == phone) {
                    pwd = game.GameUtil.binaryToStr(accInfo.pwd);
                }
            }
            return pwd;
        };
        AccountModel.prototype.getAccInfos = function () {
            var rememberAccs = game.GameUtil.getLocal("ACC_REMEMBER" /* ACC_REMEMBER */, "");
            var accArrs = this._accArrs;
            if (!rememberAccs) {
                var phone = game.GameUtil.getLocal("ACC_PHONE" /* ACC_PHONE */);
                var codePwd = game.GameUtil.getLocal("ACC_Pwd" /* ACC_Pwd */);
                if (phone) {
                    var accData = {};
                    accData.nm = phone;
                    accData.pwd = codePwd;
                    accData.isHasPwd = !!codePwd;
                    accArrs.unshift(accData);
                }
            }
            return accArrs;
        };
        AccountModel.prototype.setIdToLocal = function (playId) {
            var playIds = game.GameUtil.getLocal("LOGIN_PLAYID" /* LOGIN_PLAYID */, "");
            var playIdArrs = playIds.split("&");
            var index = -1;
            for (var i = 0; i < playIdArrs.length; i++) {
                var localId = playIdArrs[i];
                if (parseInt(localId) == playId) {
                    index = i;
                    break;
                }
            }
            if (index < 0) {
                playIdArrs.push(String(playId));
                var playIdStr = playIdArrs.join("&");
                game.GameUtil.setLocal("LOGIN_PLAYID" /* LOGIN_PLAYID */, playIdStr);
            }
        };
        AccountModel.prototype.idHaveLocal = function (playId) {
            var playIds = game.GameUtil.getLocal("LOGIN_PLAYID" /* LOGIN_PLAYID */, "");
            var playIdArrs = playIds.split("&");
            for (var i = 0; i < playIdArrs.length; i++) {
                var localId = playIdArrs[i];
                if (parseInt(localId) == playId) {
                    return true;
                }
            }
            return false;
        };
        AccountModel.prototype.reLogin = function () {
            var self = this;
            var cb = function (data) {
                if (data && data.ret) {
                    game.Net.ip = data.info;
                    CONF.webSvrUrl = data.gameWebIp;
                    self.doConnect();
                }
                else {
                    game.notifiCenter.postEvent("fail" /* CONN_FAIL */);
                }
            };
            if (CONF.isNative) {
                URLUtil.nativeHandler("getChatURL", null, function (url) {
                    if (url)
                        CONF.kefuUrl = url;
                });
                URLUtil.nativeHandler("getGameURL", null, function (url) {
                    if (url)
                        CONF.svrUrl = URLUtil.amendSvrDomain(url, CONF.webSvrUrl);
                    game.HttpUtil.serverList({ nm: self.accNm }, true, cb, self);
                });
            }
            else {
                game.HttpUtil.serverList({ nm: self.accNm }, true, cb, self);
            }
        };
        AccountModel.prototype.resetPassward = function (phone, pwd, code) {
            var self = this;
            var hardwareId;
            if (CONF.isNative) {
                hardwareId = CONF.deviceId;
            }
            else {
                hardwareId = self._webHardwareId;
            }
            game.HttpUtil.resetPwd({ phone: phone, pwd: pwd, checkcode: code, channel: CONF.channelId, agentId: CONF.agentId, hardwareId: hardwareId }, true, function (data) {
                if (data && data.ret) {
                    self.postEvent("resetPwd_fin" /* reset_pwd_fin */);
                }
                else if (data.info == "VerifyError" /* verifyErr */) {
                    game.MsgBox.showTipBox(true, 38 /* e_rmt_code_error */);
                }
                else {
                    game.MsgBox.showTipBox(true, 10016 /* reset_pwd_fail */);
                }
            }, self);
        };
        AccountModel.prototype.registered = function (phone, pwd, code) {
            var self = this;
            //if (DEBUG) code = "111111";
            var urlKey = self.getLocals();
            var hardwareId;
            var packAgeTp;
            if (CONF.isNative) {
                hardwareId = CONF.deviceId;
                packAgeTp = CONF.packAgeTp;
            }
            else {
                hardwareId = self._webHardwareId;
                packAgeTp = "web" /* web */;
            }
            game.HttpUtil.regAcc({ phone: phone, pwd: pwd, checkcode: code, channel: CONF.channelId, agentId: CONF.agentId, hardwareId: hardwareId, urlKey: urlKey, clientIp: CONF.clientIp, packAgeTp: packAgeTp }, true, function (data) {
                if (data && data.ret) {
                    if (data.urlConfig) {
                        var urlConfig = Base64.decode(data.urlConfig);
                        self.setLocals(urlConfig);
                    }
                    self.postEvent("reg_fin" /* reg_phone_fin */);
                    self.login(phone, pwd);
                }
                else if (data.info == "Login_AccIsNotExists" /* accIsNotExt */) {
                    game.MsgBox.showTipBox(true, 10010 /* e_rmt_login_AccIsExists */);
                }
                else if (data.info == "VerifyError" /* verifyErr */) {
                    game.MsgBox.showTipBox(true, 38 /* e_rmt_code_error */);
                }
                else if (data.info == "Login_IpBlock" /* ipBlock */) {
                    game.MsgBox.showTipBox(true, 10014 /* ip_block */);
                }
                else if (data.info == "Login_ChannelIdError" /* Login_ChannelIdError */) {
                    game.MsgBox.showTipBox(true, 10025 /* client_Login_ChannelIdError */);
                }
                else if (data.info == "Login_PackageIdIsNull" /* Login_PackageIdIsNull */) {
                    game.MsgBox.showTipBox(true, 10026 /* client_Login_PackageIdIsNull */);
                }
                else {
                    game.MsgBox.showTipBox(true, 10006 /* e_rmt_register_faild */);
                }
            }, self);
        };
        AccountModel.prototype.bind = function (phone, pwd, nm, code) {
            var self = this;
            //if (DEBUG) code = "111111";
            var hardwareId;
            if (CONF.isNative) {
                hardwareId = CONF.deviceId;
            }
            else {
                hardwareId = self._webHardwareId;
            }
            game.HttpUtil.bindAcc({ phone: phone, pwd: pwd, channel: CONF.channelId, nm: nm, checkcode: code, agentId: CONF.agentId, hardwareId: hardwareId }, true, function (data) {
                if (data && data.ret) {
                    //MsgBox.showPrompt(langConsts.errCode.e_rmt_binding_success);
                    // let view = new SaveMoneyDialog();
                    // gameScene.openPopup(view);
                    //记录当前登录的手机号和密码 ，密码需要加密处理一下
                    // let codePwd = GameUtil.strToBinary(pwd);
                    // GameUtil.setLocal(GameUtil.LocalKey.ACC_PHONE, phone);
                    // GameUtil.setLocal(GameUtil.LocalKey.ACC_Pwd, codePwd);
                    self.setAccPwd(phone, pwd);
                    game.GameUtil.setLocal("LAST_LOGIN" /* LAST_LOGIN */, "1");
                }
                else {
                    if (data.info == "VerifyError" /* verifyErr */) {
                        game.MsgBox.showTipBox(true, 38 /* e_rmt_code_error */);
                    }
                    else if (data.info == "Login_AccIsNotExists" /* accIsNotExt */) {
                        game.MsgBox.showTipBox(false, 839 /* Binging_AccIsExists */, "mainLang" /* mainLang */);
                    }
                    else if (data.info == "Login_AccountIsFormal" /* Login_AccountIsFormal */) {
                        game.MsgBox.showTipBox(false, 40 /* Login_AccountIsFormal */, "mainLang" /* mainLang */);
                    }
                    else if (data.info == "Login_DeviceIDError" /* Login_DeviceIDError */) {
                        game.MsgBox.showTipBox(false, 42 /* Login_DeviceIDError */, "mainLang" /* mainLang */);
                    }
                    else if (data.info == "Login_PhoneError" /* Login_PhoneError */) {
                        game.MsgBox.showTipBox(false, 30 /* Login_PhoneError */, "mainLang" /* mainLang */);
                    }
                    else if (data.info == "Login_ChannelIdError" /* Login_ChannelIdError */) {
                        game.MsgBox.showTipBox(true, 10025 /* client_Login_ChannelIdError */);
                    }
                    else if (data.info == "Login_PackageIdIsNull" /* Login_PackageIdIsNull */) {
                        game.MsgBox.showTipBox(true, 10026 /* client_Login_PackageIdIsNull */);
                    }
                    else {
                        game.MsgBox.showTipBox(true, 10008 /* e_rmt_binding_falid */);
                    }
                    self.postEvent("bind_fail" /* bind_fail_fin */);
                }
            }, self);
        };
        AccountModel.prototype.checkCode = function (phone, opType, playId) {
            game.MsgBox.showTipBox(false, 32 /* Login_AskCode */, "mainLang" /* mainLang */);
            game.HttpUtil.checkCode({ phone: phone, agentId: CONF.agentId, opType: opType, channel: CONF.channelId, playId: playId }, false, function (data) {
                if (data && data.ret) {
                    game.MsgBox.showTipBox(false, 33 /* Login_AskCodeSuccess */, "mainLang" /* mainLang */);
                    // self.postEvent(AccountMo_EVT.bin_phone_fin);
                    // MsgBox.showPrompt(langConsts.errCode.e_rmt_binding_success);
                    // // let view = new SaveMoneyDialog();
                    // // gameScene.openPopup(view);
                }
                else if (data.info == "Login_AccIsExists" /* accIsExt */) {
                    game.MsgBox.showTipBox(true, 10019 /* client_phone_isExists */);
                }
                // else {
                //     MsgBox.showPrompt(langConsts.errCode.e_rmt_binding_falid);
                // }
            }, self);
        };
        AccountModel.prototype.CheckNoticeInfo = function () {
            var self = this;
            game.HttpUtil.CheckNotice({ agentId: CONF.agentId }, false, function (data) {
                var noticeDatas = self._noticeDatas = self.deletePack(data);
                self.postEvent("check_fin" /* check_svr_info */, data);
                var newNotice = game.GameUtil.getLocal("NOW_NOTICE" /* NOW_NOTICE */);
                if (newNotice && noticeDatas) {
                    var noticeStr = "";
                    //将公告记录到缓存
                    for (var i = 0, len = noticeDatas.length; i < len; i++) {
                        var data_1 = noticeDatas[i];
                        noticeStr += "_" + data_1.Id;
                    }
                    game.GameUtil.setLocal("NOW_NOTICE" /* NOW_NOTICE */, noticeStr);
                    self.postEvent("update_notice" /* update_notice */);
                }
            }, self);
        };
        AccountModel.prototype.deletePack = function (datas) {
            if (CONF.isNative) {
                for (var i = 0; i < datas.length; i++) {
                    var data = datas[i];
                    var packAges = data.Packages;
                    if (packAges && packAges.length > 0) {
                        var packId = parseInt(CONF.packId);
                        if (packAges.indexOf(packId) == -1) {
                            datas.splice(i, 1);
                            i--;
                        }
                    }
                }
                return datas;
            }
            else {
                return datas;
            }
        };
        AccountModel.prototype.getChannelInfo = function () {
            var self = this;
            var soundMo = game.dataMgr.soundMo;
            var soundBgm = CONF.preview.sound;
            if (soundBgm) {
                soundMo.bgm = soundBgm;
                soundMo.loadMusic();
            }
            else {
                game.HttpUtil.channelCfgInfo({ agentId: CONF.agentId, channelId: CONF.channelId }, false, function (data) {
                    if (data && data.ret) {
                        if (data.bgm) {
                            soundMo.bgm = data.bgm;
                            soundMo.loadMusic();
                        }
                    }
                    else {
                        var webLogData = game.GameUtil.getWebLogData();
                        game.HttpUtil.webLogInfo({ playId: webLogData.playId, error: data ? data.info : "", gameId: webLogData.gameId, gameVer: "" });
                    }
                }, self);
            }
        };
        AccountModel.prototype.regNetHandle = function () {
            var self = this;
            game.Net.regHandle(401 /* s2c_send_msglist */, function (data) {
                var msgs = data.msgpaks;
                if (msgs) {
                    for (var _i = 0, msgs_1 = msgs; _i < msgs_1.length; _i++) {
                        var msg = msgs_1[_i];
                        game.Net.decodeMsg(msg.msgid, msg.msginfo.length, msg.msginfo);
                    }
                }
            }, self);
            game.Net.regHandle(444 /* msg_t2t_start */, self.onT2TStart, self);
            game.Net.regHandle(7501 /* s2c_connect_result */, self.onConnRes, self);
            game.Net.regHandle(7503 /* s2c_asklogin_result */, self.onLoginRes, self);
            game.Net.regHandle(7509 /* s2c_update_playerhead_result */, self.onHeadChange, self);
            game.Net.regHandle(7510 /* s2c_update_nickname_result */, self.onNickNameChange, self);
            game.Net.regHandle(7511 /* s2c_update_sex_result */, self.onSexChange, self);
            game.Net.regHandle(7589 /* s2c_bind_reward */, self.onBindReward, self);
            game.Net.regHandle(7523 /* s2c_w2c_notify */, self.onNotify, self);
            game.Net.regHandle(7541 /* s2c_player_kick */, self.playKick, self);
            game.Net.regHandle(7660 /* s2c_req_vip_info_result */, self.askVipInfoResult, self);
            game.Net.regHandle(41105 /* s2c_activity_reward_log_result */, self.askRewardResult, self);
            game.Net.regHandle(7622 /* s2c_req_sync_gold_result */, self.updateGold, self);
            game.Net.regHandle(41109 /* s2c_activity_vip_ac_list_result */, self.askVipAcInfoResult, self);
            game.Net.regHandle(7644 /* s2c_notice */, function () {
                //请求公告
                self.CheckNoticeInfo();
            }, self);
            // Net.regHandle(NET_CONF.S2C_ROUTE_TP.s2c_update_ipinfo_result, self.updateIpInfo, self);
            // Net.regHandle( NET_CONF.S2C_ROUTE_TP.s2c_w2c_notify, self.onHeadChange, self );
        };
        AccountModel.prototype.doConnect = function () {
            var self = this;
            if (CONF.isNative) {
                var ip = game.Net.ip;
                var webIp_1 = CONF.webSvrUrl;
                URLUtil.nativeHandler("getGateURL", { url1: ip, url2: webIp_1 }, function (ip) {
                    if (ip) {
                        if (ip.indexOf("wss") >= 0) {
                            game.Net.ip = URLUtil.amendSvrDomain(ip, webIp_1);
                        }
                        else {
                            game.Net.ip = ip;
                        }
                    }
                    game.Net.connect();
                    if (500 /* connIntervalTime */ > 0) {
                        self._startTm = egret.getTimer();
                        self._heartTag = TRain.core.addDelayDo(function () {
                            game.GameUtil.sendIntervalTm("Close-444", 20000);
                        }, self, 2000);
                    }
                });
            }
            else {
                game.Net.connect();
                if (500 /* connIntervalTime */ > 0) {
                    self._startTm = egret.getTimer();
                    self._heartTag = TRain.core.addDelayDo(function () {
                        game.GameUtil.sendIntervalTm("Close-444", 20000);
                    }, self, 2000);
                }
            }
        };
        //请求ip信息
        // private getIpInfo(){
        //     HttpUtil.getIp(false,function(data: any){
        //         HttpUtil.sendLogInfo(data,false,null,self);
        //     },self);
        // }
        // private updateIpInfo(data: NET_CONF.s2c_update_ipinfo_result){
        //     if(data){
        //         //去掉运营商
        //         let ip = data.ipinfo.split(" ")[0];
        //         this.postEvent(AccountMo_EVT.update_ip_info,ip);
        //     }
        // } 
        AccountModel.prototype.onNotify = function (data) {
            var self = this;
            if (self.isApi)
                return;
            var notifys = self._notifys;
            notifys.push(data);
            notifys.sort(function (a, b) {
                return b.notifyType - a.notifyType;
            });
            if (notifys.length > 50)
                notifys.pop();
            self.postEvent("new" /* got_notify */, true);
        };
        AccountModel.prototype.playKick = function (data) {
            //0是重新登录 1，踢人下线
            if (data.kick_type == 1) {
                // MsgBox.showBoxCB(LangGrp.mainLang, langConsts.mainLang.kickingOff,function(tag){
                //     location.reload(); 
                // },self); 
                if (CONF.isNative) {
                    URLUtil.nativeHandler("closeWebView");
                }
                if (this.gameId != 0) {
                    game.MsgBox.showBoxCB("mainLang" /* mainLang */, 835 /* kickingOff */, function () {
                        game.GameUtil.gameReload(true);
                    }, self);
                }
            }
            else {
                game.MsgBox.showBoxCB("mainLang" /* mainLang */, 796 /* playKickDesc */, function () {
                    //登出
                    //location.reload(); 
                    game.GameUtil.gameReload();
                }, self);
            }
        };
        AccountModel.prototype.popNotify = function () {
            return this._notifys.shift();
        };
        AccountModel.prototype.onT2TStart = function () {
            var self = this;
            self.printLog("connect-444", "Close-7501");
            var args = {};
            args.account = self.accNm;
            args.token = self._token;
            args.sign = md5(args.account + args.token + "5C4BEE401828DF1D920F9CFD323C9AFA");
            args.platform = "default";
            args.login_platform = "web";
            //args.channelid = self.channel || 440001;
            game.Net.sendMsg(5001 /* c2s_connect */, args);
        };
        ;
        AccountModel.prototype.printLog = function (connNm, closeNm) {
            var self = this;
            if (500 /* connIntervalTime */ > 0) {
                self.calInterValTm(connNm);
                self._heartTag = TRain.core.addDelayDo(function () {
                    game.GameUtil.sendIntervalTm(closeNm, 20000);
                }, self, 2000);
            }
        };
        AccountModel.prototype.calInterValTm = function (nm) {
            var self = this;
            if (self._heartTag) {
                TRain.core.rmvDelayDoByID(self._heartTag);
                self._heartTag = 0;
            }
            var nowTm = egret.getTimer();
            var val = 500 /* connIntervalTime */;
            if (nowTm - self._startTm > val) {
                game.GameUtil.sendIntervalTm(nm, (nowTm - self._startTm));
            }
            self._startTm = nowTm;
        };
        AccountModel.prototype.onConnRes = function (data) {
            var self = this;
            self.printLog("connect-7501", "Close-7503");
            var succ = data.result == 1 /* e_rmt_success */;
            game.Net.loginFin(succ);
            // data.result = 79;
            // succ = false;
            if (succ) {
                self.gameId = data.gaming;
                TimeUtil.setSvrTm(data.servertime);
                //login
                //Net.sendMsg(NET_CONF.C2S_ROUTE_TP.c2s_asklogin, {});  
                self.askLogin();
            }
            else {
                if (data.result == 10004 /* e_rmt_input_correct_code */) {
                    //重新登入
                    self.reLogin();
                }
                else {
                    game.notifiCenter.postEvent("fail" /* CONN_FAIL */, data.result);
                }
            }
        };
        AccountModel.prototype.askLogin = function () {
            var args = {};
            args.channelid = this.channel || CONF.channelId;
            game.Net.sendMsg(5003 /* c2s_asklogin */, args);
        };
        AccountModel.prototype.onLoginRes = function (data) {
            var self = this;
            if (500 /* connIntervalTime */ > 0) {
                self.calInterValTm("connect-7503");
            }
            self.gameId = data.gaming || 0;
            self.setData(data.account_info);
            game.dataMgr.init();
            var bindData = game.dataMgr.generalMo.bindBenData;
            bindData.bindPhone = data.bind_phone_demo;
            bindData.binGold = data.bin_gold;
            bindData.benefitsCount = data.benefits_count;
            bindData.benefitsGold = data.benefits_gold;
            bindData.benefitsLimit = data.benefits_limit;
            game.dataMgr.guildMo.guildAsks = data.guild_asks || [];
            var list = data.game_list || [];
            self.setGmsList(list);
            game.dataMgr.gameMo.setData(list);
            self._sortClass = data.sort_class || [];
            game.dataMgr.gsMo.restCoon();
            //dataMgr.activityMo.askRedPoint();
            //断线重连时，立即发游戏消息 服务器收不到  这边延时100
            self.delayPostEvent("svr_fin" /* login_svr_fin */, 100);
            //self.postEvent( NotifyMo_EVT.got_notify );
            // if (self.gameId > 0)
            // {
            //     if (_Reconnected && (_GameLogic != null) && (_GameLogic.onVerifySucess != null))
            //     {
            //         _GameLogic.onVerifySucess();
            //     }
            //     else
            //         _ClientLogic.enterGame();
            // }
            // else
            // {
            //     if (Net.isReCon && ( != null))
            //     {
            //         _ClientLogic.leaveGame();
            //     }
            //     else
            //         _ClientLogic.showLobby();
            // } 
        };
        AccountModel.prototype.changeHead = function (icon) {
            var args = {};
            args.headStr = icon;
            game.Net.sendMsg(5010 /* c2s_update_playerhead */, args);
        };
        AccountModel.prototype.onHeadChange = function (data) {
            if (data.result != 1 /* e_rmt_success */) {
                game.MsgBox.showTipBox(true, data.result);
            }
            else {
                this.setVal("icon_custom", data.headstr);
                var sex = data.headstr.indexOf("nan") >= 0 ? 1 : 2;
                this.changeSex(sex);
            }
        };
        AccountModel.prototype.changeNickName = function (nickname) {
            var args = {};
            args.nickName = nickname;
            game.Net.sendMsg(5011 /* c2s_update_nickname */, args);
        };
        AccountModel.prototype.onNickNameChange = function (data) {
            var self = this;
            if (data.result != 1 /* e_rmt_success */) {
                game.MsgBox.showTipBox(true, data.result);
            }
            else {
                //当前玩家的updateNicknameCount
                var count = self.getData().updateNicknameCount;
                if (count == 0) {
                    self.setVal("updateNicknameCount", ++count);
                    self.setVal("nickname", data.nickName);
                }
                else {
                    var curGold = self.getData().gold;
                    self.setVal("updateNicknameCount", ++count);
                    self.setVal("nickname", data.nickName);
                    self.setVal("gold", (curGold - 500 /* modifyNicknameCost */));
                }
            }
        };
        //请求vip信息
        AccountModel.prototype.askVipInfo = function () {
            var args = {};
            args.skin = parseInt(CONF.res.all);
            game.Net.sendMsg(5150 /* c2s_req_vip_info */, args);
        };
        //请求vip活动列表
        AccountModel.prototype.askVipAcInfo = function () {
            var args = {};
            args.skin = parseInt(CONF.res.all);
            game.Net.sendMsg(40109 /* c2s_activity_vip_ac_list */, args);
        };
        AccountModel.prototype.askVipInfoResult = function (data) {
            this.setVal("viplvl", data.viplv);
            this.setVal("vipexp", data.vipexp);
            this.postEvent("GetVipInfoResult" /* GetVipInfoResult */, data, true);
        };
        AccountModel.prototype.askVipAcInfoResult = function (data) {
            this.postEvent("GetVipActivityResult" /* GetVipActivityResult */, data, true);
        };
        //请求活动奖励信息
        AccountModel.prototype.askRewardInfo = function () {
            var args = {};
            game.Net.sendMsg(40105 /* c2s_activity_reward_log */, args);
        };
        AccountModel.prototype.askRewardResult = function (data) {
            this.postEvent("GetVipInfoResult" /* GetVipInfoResult */, data, false);
        };
        //1-男    2-女
        AccountModel.prototype.changeSex = function (sex) {
            var args = {};
            args.sex = sex;
            game.Net.sendMsg(5012 /* c2s_update_sex */, args);
        };
        AccountModel.prototype.askSynGold = function () {
            // this._sendNetTime = TimeUtil.getSvrMS();
            game.Net.sendMsg(5111 /* c2s_req_sync_gold */, {});
        };
        //同步玩家金币返回
        AccountModel.prototype.updateGold = function (data) {
            var self = this;
            // self._networkDelay =Math.floor((TimeUtil.getSvrMS() - self._sendNetTime) / 2);
            // self.postEvent(<any>AccountMo_EVT.NetWorkDelay, self._networkDelay);
            if (data && (data.gold || data.gold == 0)) {
                if (self._data) {
                    self.setVal("gold", data.gold);
                }
            }
            if (data && (data.roomcard || data.roomcard == 0)) {
                if (self._data) {
                    self.setVal("room_card", data.roomcard);
                }
            }
        };
        AccountModel.prototype.onSexChange = function (data) {
            var self = this;
            if (data.result != 1 /* e_rmt_success */) {
                game.MsgBox.showTipBox(true, data.result);
            }
            else {
                self.setVal("sex", data.sex);
            }
        };
        AccountModel.prototype.onBindReward = function (data) {
            var self = this;
            var totalGold = data.reward_gold + data.reward_gold_new;
            self._bindReward = totalGold;
            if (self._data) {
                self.setVal("isFormal", true);
                var accData = self.getAccInfos()[0];
                self.setVal("bindphone", accData.nm);
                self.postEvent("bin_fin" /* bin_phone_fin */);
            }
        };
        // public checkChangeNickNameCount()
        // {
        // }
        // function do_packetw2c_enter_game_result(msgData){
        //     if (_AccountInfo.myInfo == null)
        //     {
        //         console.log("Error: do_packetw2c_enter_game_result before receive ask_login_result, result-", result);
        //         return;
        //     }
        //     var result = msgData.result;
        //     if (result != e_msg_result_def.e_rmt_success)
        //     {
        //         console.log("Error: do_packetw2c_enter_game_result return ", result);
        //         //_ClientLogic.enterGame();
        //     }
        //     else
        //     {
        //         _ClientLogic.enterGame();
        //     }
        // }
        // function do_packetw2c_leave_game_result(msgData){
        //     _ClientLogic.leaveGame();
        // }
        // function do_packetw2c_update_nickname_result(msgData){
        //     if(msgData.result == e_msg_result_def.e_rmt_success)
        //     {
        //         if (_AccountInfo.getUpdateNameCount() >= 1)
        //         {
        //             _AccountInfo.addPlayerGold(-_GetBaseValue("modifyNicknameCost"));
        //         }
        //         _AccountInfo.updateNameCount();
        //         _ClientLogic.processUpdateNicknameResult(msgData.nickName);
        //     }
        //     else if (msgData.result == e_msg_result_def.e_rmt_error_nickname)//   --昵称错误
        //         _M_ShowMsgTip("Msg_Result7");
        //     else if (msgData.result == e_msg_result_def.e_rmt_same_nickname)//     --昵称重复
        //         _M_ShowMsgTip("Msg_Result8");
        //     else
        //         _M_ShowMsgTip("InvalidName");
        // }
        // function do_packetw2c_update_sex_result(msgData){
        //     if(msgData.result == e_msg_result_def.e_rmt_success)
        //     {
        //         _ClientLogic.processUpdateSexResult(msgData.sex);
        //     }
        //     else
        //     {
        //         console.log("Error: packetw2c_update_nickname_result return failed: ", msgData.result);
        //         _M_ShowMsgTip("Failed");
        //     }
        // }
        // function do_packetw2c_change_photo_frame_result(msgData){
        //     if(msgData.result == e_msg_result_def.e_rmt_success)
        //     {
        //         _ClientLogic.processChangePhotoFrameResult(msgData.photoFrameId);
        //     }
        //     else
        //     {
        //         console.log("Error: packetw2c_update_nickname_result return failed: ", msgData.result);
        //         _M_ShowMsgTip("Failed");
        //     }
        // }
        // function do_packetw2c_player_kick(msgData){
        //     console.log("do_packetw2c_player_kick for ", msgData.kickType);// 0: "relogin"  1: "kick"
        //     if (msgData.kickType == 0)
        //         _M_ShowMsgTip("RepeatLogin5");
        //     else
        //         _M_ShowMsgTip("RepeatLogin4");
        // }
        //救济金领取成功后，更新本地领取次数
        AccountModel.prototype.updateGetCount = function () {
            var self = this;
            ++self._data.collected;
            var txt = StringUtil.printf(TRain.langMgr.getTxt("mainLang", 211 /* AlmsGetInfo */), game.DataFormat.convertGold(50 /* almsGoldCount */), 6 /* almsMaxCount */ - self._data.collected);
            // game.TipsMgr.showPrompt();
            game.MsgBox.showTipBox(false, 211 /* AlmsGetInfo */, "mainLang" /* mainLang */, txt);
            // self.postEvent("getSaveMoney");
        };
        AccountModel.prototype.havePopNotice = function () {
            var self = this;
            var datas = self._noticeDatas || [];
            var tempDatas = [];
            var isOpen_2 = game.GameUtil.getLocal("NOTICE_2" /* NOTICE_2 */);
            var isOpen_3 = game.GameUtil.getLocal("NOTICE_3" /* NOTICE_3 */);
            var localSvrTm1 = parseInt(game.GameUtil.getLocal("NOTICE_TM_1" /* NOTICE_TM_1 */));
            var localSvrTm2 = parseInt(game.GameUtil.getLocal("NOTICE_TM_2" /* NOTICE_TM_2 */));
            var svrMsTm = TimeUtil.getSvrMS();
            var isEqual1 = TimeUtil.equalsDay(localSvrTm1, svrMsTm);
            var isEqual2 = TimeUtil.equalsDay(localSvrTm2, svrMsTm);
            for (var i = 0, len = datas.length; i < len; i++) {
                var data = datas[i];
                if (data.ShowStage == 1 /* one */ || data.ShowStage == 101 /* oneToOne */) {
                    tempDatas.push(data);
                }
                else if (data.ShowStage == 2 /* two */) {
                    if (!isOpen_2) {
                        tempDatas.push(data);
                    }
                }
                else if (data.ShowStage == 3 /* three */) {
                    if (!isOpen_3) {
                        tempDatas.push(data);
                    }
                }
                else if (data.ShowStage == 102 /* oneToTwo */) {
                    //获取服务器时间
                    if (!isEqual1) {
                        tempDatas.push(data);
                    }
                }
                else if (data.ShowStage == 103 /* oneToThree */) {
                    //获取服务器时间
                    if (!isEqual2) {
                        tempDatas.push(data);
                    }
                }
            }
            return tempDatas.length > 0;
        };
        AccountModel.prototype.haveLoginNotice = function () {
            var self = this;
            var datas = self._noticeDatas || [];
            var tempDatas = [];
            for (var i = 0, len = datas.length; i < len; i++) {
                var data = datas[i];
                if (data.ShowStage == 2 /* two */ || data.ShowStage == 102 /* oneToTwo */) {
                    continue;
                }
                else {
                    tempDatas.push(data);
                }
            }
            return tempDatas.length > 0;
        };
        //获取哪几条是新公告
        AccountModel.prototype.isNewNotice = function (nId) {
            var newNotice = game.GameUtil.getLocal("NOW_NOTICE" /* NOW_NOTICE */);
            if (newNotice) {
                var ids = newNotice.split("_");
                return ids.indexOf(nId) == -1;
            }
            else {
                return true;
            }
        };
        //获取当前是否是未读公告
        AccountModel.prototype.isNoRead = function (nId) {
            var NoReadNotice = game.GameUtil.getLocal("OVER_NOTICE" /* OVER_READ_NOTICE */);
            if (NoReadNotice) {
                var ids = NoReadNotice.split("_");
                return ids.indexOf(nId) == -1;
            }
            else {
                return true;
            }
        };
        //获有多少条未读
        AccountModel.prototype.getNoReadNum = function (state) {
            var self = this;
            var NoReadNotice = game.GameUtil.getLocal("OVER_NOTICE" /* OVER_READ_NOTICE */);
            var noticeDatas = self._noticeDatas || [];
            var num = 0;
            if (NoReadNotice) {
                for (var i = 0, len = noticeDatas.length; i < len; i++) {
                    var data = noticeDatas[i];
                    var ids = NoReadNotice.split("_");
                    if (ids.indexOf(String(data.Id)) == -1) {
                        if (state && state != 1 /* hall */) {
                            if (data.ShowStage != 2 /* two */ && data.ShowStage != 102 /* oneToTwo */ && state == 0 /* login */) {
                                num++;
                            }
                            if (state == 2 /* hallPop */) {
                                num++;
                            }
                        }
                        else {
                            num++;
                        }
                    }
                }
            }
            else {
                num = noticeDatas.length;
            }
            return num;
        };
        // ---------------------------------- api 断线重连 --------------------------------------
        AccountModel.prototype.askLeaveGm = function () {
            var args = {};
            game.Net.sendMsg(5008 /* c2s_leave_game */, args);
        };
        AccountModel.prototype.regLeaveHandle = function (cb, tar) {
            game.Net.regHandle(7507 /* s2c_leave_game_result */, function (msg) {
                cb.call(tar, msg);
            }, self);
        };
        AccountModel.prototype.unRegLeaveHandle = function () {
            game.Net.unregHandle(7507 /* s2c_leave_game_result */);
        };
        return AccountModel;
    }(game.DataModel));
    game.AccountModel = AccountModel;
    __reflect(AccountModel.prototype, "game.AccountModel");
})(game || (game = {}));
var game;
(function (game) {
    var ActivityModel = (function (_super) {
        __extends(ActivityModel, _super);
        function ActivityModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @param data bindGold:number,actList:{tId:number,uId:number,name:string},onlineAwd:{svrTm:number,totalTm:number,uId:number}
         */
        ActivityModel.prototype.setData = function (data) {
            this._data = data;
        };
        ActivityModel.prototype.getData = function () {
            return this._data || {};
        };
        ActivityModel.prototype.getVal = function (key) {
            return this._data[key];
        };
        ActivityModel.prototype.setVal = function (key, val) {
            var self = this;
            self._data[key] = val;
            var lProps = self._lProps;
            if (lProps) {
                var keyStr = key.toString();
                if (lProps.indexOf(keyStr) >= 0)
                    self.postEvent(keyStr, val);
            }
        };
        ActivityModel.prototype.addPropListener = function (propKey, fun, tar) {
            var self = this;
            self.addListener(propKey, fun, tar);
            var lProps = self._lProps;
            if (lProps) {
                if (lProps.indexOf(propKey) < 0)
                    lProps.push(propKey);
            }
            else {
                self._lProps = [propKey];
            }
        };
        ActivityModel.prototype.rmvPropListener = function (propKey, tar) {
            var self = this;
            self.rmvListener(propKey, tar);
            var lProps = self._lProps;
            if (lProps) {
                var idx = lProps.indexOf(propKey);
                if (idx > 0 && !self.hasListener(propKey)) {
                    lProps.splice(idx, 1);
                }
            }
        };
        return ActivityModel;
    }(game.Notification));
    game.ActivityModel = ActivityModel;
    __reflect(ActivityModel.prototype, "game.ActivityModel");
})(game || (game = {}));
var game;
(function (game) {
    var GameModel = (function (_super) {
        __extends(GameModel, _super);
        function GameModel() {
            var _this = _super.call(this) || this;
            _this._curGMD = null;
            var self = _this;
            self._dataList = {};
            self._moList = {};
            self._gmdList = {};
            self._fileUpList = {};
            self.confNm = "conf";
            self._upList = {};
            self._upMoList = {};
            if (CONF.curVers) {
                game.notifiCenter.addListener("update_game_progress" /* update_game_progress */, self.onUpdateProgess, self);
                game.notifiCenter.addListener("update_game_finish" /* update_game_finish */, self.onUpdateFin, self);
                game.notifiCenter.addListener("update_main_finish" /* update_main_finish */, self.onUpdateMoFin, self);
            }
            game.notifiCenter.addListener("enter_fin" /* enter_game_fin */, self.onEnterGame, self, true);
            return _this;
        }
        GameModel.prototype.onLoadConf = function (data) {
            var self = this;
            self.confLoaded = true;
            self._gmdConf = data.gmd;
            this.handlerData();
        };
        GameModel.prototype.getGmdConf = function (gid) {
            return this._gmdConf[gid];
        };
        GameModel.prototype.getCurMoInfo = function (nm) {
            return this._moList[nm];
        };
        GameModel.prototype.hasRechangeMo = function () {
            var self = this;
            var rechargeMo = self.getCurMoInfo("recharge" /* recharge */);
            return !!rechargeMo;
        };
        //---------------------------------------------------- update -------------------------
        GameModel.prototype.isNeedUpdate = function (newVer, curVer) {
            if (!newVer)
                return false;
            var newVers = newVer.split(".");
            var oldVers = curVer.split(".");
            if (newVers.length >= 3 && oldVers.length >= 3) {
                for (var i = 0; i < 3; ++i) {
                    newVers[i] = parseInt(newVers[i]);
                    oldVers[i] = parseInt(oldVers[i]);
                }
                if (newVers[0] > oldVers[0])
                    return true;
                if (newVers[0] == oldVers[0]) {
                    if (newVers[1] > oldVers[1])
                        return true;
                    if (newVers[1] == oldVers[1]) {
                        if (newVers[2] > oldVers[2])
                            return true;
                    }
                }
                return false;
            }
            return true;
        };
        GameModel.prototype.startUpdateGmd = function (gid) {
            var self = this;
            var gameData = self._dataList[gid];
            if (gameData) {
                var updateData_1 = gameData.update;
                if ((updateData_1.state == 1 /* NEED_UPDATE */ || updateData_1.state == 3 /* FAIL */)) {
                    updateData_1.progress = 0;
                    updateData_1.state = 2 /* UPDATING */;
                    var fileNm = gameData.conf.file;
                    var updateNm_1 = game.GameUtil.getHome(gameData.conf.file);
                    self._upList[updateNm_1] = updateData_1;
                    var gmdInfo_1 = self.getGmdInfo(gid);
                    if (gmdInfo_1.ver || true) {
                        if (true) {
                            gmdInfo_1.ver = true;
                            RES.getVerCtrl().addHome(fileNm, game.GameUtil.getHome(fileNm));
                            updateData_1.newVer = "1.1.2";
                            gmdInfo_1.zipMD5 = { "doudizhu_1.1.0": "11111", "doudizhu_1.1.1": "2222", "doudizhu_1.1.2": "3333" };
                        }
                        URLUtil.nativeHandler("startUpdateGame", { nm: updateNm_1, ver: updateData_1.newVer, zip: gmdInfo_1.zipMD5 });
                    }
                    else {
                        game.ResManager.loadVer(gameData.conf.file, function (succ, jsVer, gVer, zip) {
                            if (succ) {
                                gmdInfo_1.ver = true;
                                gmdInfo_1.jsVer = jsVer;
                                gmdInfo_1.gVer = gVer;
                                gmdInfo_1.zipMD5 = zip;
                                URLUtil.nativeHandler("startUpdateGame", { nm: updateNm_1, ver: updateData_1.newVer, zip: gmdInfo_1.zipMD5 });
                            }
                            else {
                                self.onUpdateFin(updateNm_1, { fin: 6 /* VER_FILE_ERR */ });
                            }
                        }, self);
                    }
                }
            }
        };
        GameModel.prototype.stopUpdateGmd = function (gid) {
            var self = this;
            var dataList = self._dataList;
            if (dataList) {
                var gameData = dataList[gid];
                if (gameData) {
                    var updateData = gameData.update;
                    if (updateData && updateData.state == 2 /* UPDATING */) {
                        updateData.state = 1 /* NEED_UPDATE */;
                        var updateNm = game.GameUtil.getHome(gameData.conf.file);
                        delete self._upList[updateNm];
                        URLUtil.nativeHandler("stopUpdateGame", updateNm);
                    }
                }
            }
        };
        GameModel.prototype.onUpdateProgess = function (nm, per) {
            var self = this;
            var updateData = self._upList[nm];
            if (updateData) {
                updateData.progress = per;
                self.postEvent("up_gmd_pro" /* update_gmd_progress */, { gameId: updateData.gameId, file: updateData.file }, per);
            }
        };
        //fin:0表示更新完成  1表示更新失败
        GameModel.prototype.onUpdateFin = function (nm, args) {
            var self = this;
            var updateData = self._upList[nm];
            if (updateData) {
                delete self._upList[nm];
                if (args.fin == 0 /* OK */) {
                    updateData.state = 0 /* NONE */;
                    updateData.curVer = updateData.newVer;
                }
                else {
                    updateData.state = 3 /* FAIL */;
                }
                //console.log( "onUpdateFin code=" + code );
                self.postEvent("up_gmd_fin" /* update_gmd_fin */, { gameId: updateData.gameId, file: updateData.file }, args);
            }
        };
        GameModel.prototype.onEnterGame = function () {
            var self = this;
            self._inGame = true;
            var moList = self._moList;
            for (var key in moList) {
                var moInfo = moList[key];
                if (!!moInfo.mo) {
                    moInfo.mo.start();
                }
            }
        };
        //-----------------------------------------------------------------------------
        GameModel.prototype.setData = function (data) {
            this._data = data;
            this.handlerData();
        };
        GameModel.prototype.getData = function () {
            this.handlerData();
            return this._data;
        };
        /**
         * 是否在子游戏中显示七日奖励 游戏个数小于8个不显示
         */
        GameModel.prototype.isShowSD = function () {
            var isLookSDay = game.dataMgr.generalMo.isFunOpen(5 /* sevenDay */); //是否开放七日奖励
            return isLookSDay && this._data.length > 7;
        };
        /**
         *
         * @param gameId
         */
        GameModel.prototype.isOpenRmCard = function () {
            var isOpen = false;
            for (var i = 0, len = this._data.length; i < len; ++i) {
                var data = this._data[i];
                if (data.gameid == 211 /* roomgm */) {
                    isOpen = true;
                    return isOpen;
                }
            }
            return isOpen;
        };
        GameModel.prototype.getGameData = function (gameId) {
            return this._dataList[gameId];
        };
        GameModel.prototype.getUpdateData = function (file, gameId) {
            var updateData = this._fileUpList[file];
            if (!updateData) {
                updateData = this._fileUpList[file] = { file: file, gameId: gameId };
            }
            return updateData;
        };
        GameModel.prototype.handlerData = function () {
            var self = this;
            var data = self._data;
            var gmdConf = self._gmdConf;
            if (data && gmdConf) {
                var oldDataList = self._dataList;
                var newDataList = self._dataList = {};
                var oldVers = CONF.curVers;
                var skinId = game.GameUtil.getAllSkinId();
                for (var i = data.length - 1; i >= 0; --i) {
                    var gameData = data[i];
                    var conf = gmdConf[gameData.gameid];
                    if (!conf || !conf.file) {
                        data.splice(i, 1);
                        continue;
                    }
                    var gameList = CONF.preview.gameList;
                    if (gameList) {
                        var games = gameList.split(",");
                        var idx = games.indexOf(String(gameData.gameid));
                        if (idx == -1) {
                            data.splice(i, 1);
                            continue;
                        }
                        else {
                            gameData.sort = idx;
                        }
                    }
                    newDataList[gameData.gameid] = gameData;
                    gameData.conf = conf;
                    var updateData = gameData.update = this.getUpdateData(conf.file, gameData.gameid);
                    updateData.state = 0 /* NONE */;
                    if (oldVers) {
                        var oldData = oldDataList[gameData.gameid];
                        var oldUpateData = oldData ? oldData.update : null;
                        var file = game.GameUtil.getHome(conf.file);
                        updateData.newVer = gameData.h5GameVer[skinId];
                        updateData.curVer = (oldUpateData && oldUpateData.curVer) ? oldUpateData.curVer : (oldVers[file] || "0.0.0");
                        if (self.isNeedUpdate(updateData.newVer, updateData.curVer)) {
                            updateData.state = 1 /* NEED_UPDATE */;
                        }
                    }
                }
            }
        };
        GameModel.prototype.goBack = function () {
            var curGMD = this._curGMD;
            if (curGMD) {
                if (curGMD.started && curGMD.gm.onBackClk) {
                    curGMD.gm.onBackClk();
                }
                return true;
            }
            return false;
        };
        GameModel.prototype.getCurGMD = function () {
            return this._curGMD;
        };
        GameModel.prototype.getGmdInfo = function (gameId) {
            var self = this;
            var gmdInfo = self._gmdList[gameId];
            if (!gmdInfo) {
                var gmdConf = self._gmdConf[gameId];
                gmdInfo = self._gmdList[gameId] = { id: gameId, conf: gmdConf, inited: false };
                var gmdNm = "GMD_" /* GMD_HEAD */ + gmdConf.file;
                gmdInfo.gm = URLUtil.getGlobal(gmdNm);
            }
            return gmdInfo;
        };
        GameModel.prototype.startGMD = function (gameId, data) {
            var self = this;
            if (self._curGMD) {
                //"还有模块没结束"
                self.postEvent("fin" /* start_fin */, 813 /* loadingGmdErr */, self._curGMD.conf.nm);
                return;
            }
            var gmdConf = self._gmdConf[gameId];
            if (!gmdConf) {
                self.postEvent("fin" /* start_fin */, 814 /* loadingConfErr */);
                return;
            }
            var updateData = self._dataList[gameId].update;
            if (updateData.state != 0 /* NONE */) {
                self.postEvent("fin" /* start_fin */, 903 /* gameNeedUp */);
                return;
            }
            var gmdInfo = self.getGmdInfo(gameId);
            gmdInfo.data = data;
            var fileNm = gmdConf.file;
            gmdInfo.started = false;
            self._curGMD = gmdInfo;
            if (gmdInfo.inited) {
                self.loadFin();
                return;
            }
            if (gmdInfo.ver) {
                self.loadGMD(gmdInfo);
            }
            else {
                if (true) {
                    RES.getVerCtrl().addHome(fileNm, game.GameUtil.getHome(fileNm));
                    gmdInfo.ver = true;
                    self.loadGMD(gmdInfo);
                }
                else {
                    game.ResManager.loadVer(fileNm, function (succ, jsVer, gVer, zip) {
                        if (succ) {
                            gmdInfo.ver = true;
                            gmdInfo.jsVer = jsVer;
                            gmdInfo.gVer = gVer;
                            gmdInfo.zipMD5 = zip;
                            self.loadGMD(gmdInfo);
                        }
                        else {
                            self.onLoadErr(gmdInfo, 808 /* loadingVerErr */);
                        }
                    }, self);
                }
            }
        };
        //
        GameModel.prototype.closeGMD = function () {
            var curGMD = this._curGMD;
            if (curGMD) {
                curGMD.started = false;
                var gameId = curGMD.id;
                TRain.core.rmvDelayDoByFlag(gameId);
                TRain.actionMgr.rmvActsByTag(gameId);
                TRain.UITheme.setCurGp(null);
                var accMo = game.dataMgr.accMo;
                accMo.gameId = 0;
                accMo.lastId = gameId;
                this._curGMD = null;
                if (curGMD.gm)
                    curGMD.gm.close();
            }
        };
        GameModel.prototype.onGameShow = function () {
            var self = this;
            if (!self._curGMD.firstShow) {
                self._curGMD.firstShow = true;
                self.postEvent("st_per" /* start_load_per */, 100);
            }
        };
        GameModel.prototype.onLoadErr = function (gmdInfo, err) {
            var self = this;
            if (gmdInfo == self._curGMD) {
                self._curGMD = null;
                self.postEvent("fin" /* start_fin */, err);
            }
        };
        //-------------------------------------------------- load ------------------------------------------------
        GameModel.prototype.loadGMD = function (gmdInfo) {
            var self = this;
            gmdInfo.loading = 0;
            gmdInfo.errCode = 0;
            self.loadJs(gmdInfo);
            //self.postEvent(GameMo_EVT.start_load_per, 50);
            var fileNm = gmdInfo.conf.file;
            if (!gmdInfo.res) {
                gmdInfo.loading++;
                game.ResManager.loadRes(fileNm, function (succ) {
                    gmdInfo.loading--;
                    if (succ) {
                        gmdInfo.res = true;
                    }
                    else {
                        gmdInfo.errCode = 809 /* loadingResErr */;
                    }
                    self.tryLoadFin(gmdInfo);
                }, self);
            }
            if (!gmdInfo.theme) {
                gmdInfo.loading++;
                game.ResManager.loadTheme(fileNm, function (succ) {
                    gmdInfo.loading--;
                    if (succ) {
                        gmdInfo.theme = true;
                    }
                    else {
                        gmdInfo.errCode = 810 /* loadingThemeErr */;
                    }
                    self.tryLoadFin(gmdInfo);
                }, self, fileNm);
            }
            self.tryLoadFin(gmdInfo);
        };
        GameModel.prototype.loadJs = function (gmdInfo) {
            var self = this;
            if (gmdInfo.gm)
                return;
            var gmdConf = gmdInfo.conf;
            var fileNm = gmdConf.file;
            var homeUrl = RES.getVerCtrl().getHome(fileNm);
            var srcPath = homeUrl + fileNm;
            if (gmdInfo.jsVer) {
                srcPath += "_" + gmdInfo.jsVer;
            }
            srcPath += ".js";
            gmdInfo.loading++;
            URLUtil.loadScript(srcPath, function (src) {
                if (srcPath != src)
                    return;
                var gmdNm = "GMD_" /* GMD_HEAD */ + gmdConf.file;
                var gm = URLUtil.getGlobal(gmdNm);
                gmdInfo.loading--;
                if (!!gm) {
                    gmdInfo.gm = gm;
                }
                else {
                    gmdInfo.errCode = 811 /* loadingObjErr */;
                }
                self.tryLoadFin(gmdInfo);
            });
        };
        GameModel.prototype.tryLoadFin = function (gmdInfo) {
            var self = this;
            if (gmdInfo.loading == 0) {
                if (gmdInfo.errCode) {
                    self.onLoadErr(gmdInfo, gmdInfo.errCode);
                }
                else {
                    if (!gmdInfo.gp) {
                        game.ResManager.loadGroup(gmdInfo.conf.file, function () {
                            gmdInfo.gp = true;
                            self.loadFin();
                        }, self);
                    }
                    else {
                        self.loadFin();
                    }
                }
            }
        };
        GameModel.prototype.loadFin = function () {
            var self = this;
            var curGMD = self._curGMD;
            if (curGMD && curGMD.gp) {
                var gmdConf = curGMD.conf;
                game.dataMgr.accMo.gameId = gmdConf.id;
                if (!curGMD.inited) {
                    curGMD.inited = true;
                    curGMD.gm.init();
                }
                TRain.UITheme.setCurGp(gmdConf.file);
                curGMD.gm.start(curGMD.data);
                curGMD.started = true;
                self.postEvent("fin" /* start_fin */);
            }
        };
        //--------------------------------------- module --------------------------------------------
        GameModel.prototype.isMoLoaded = function (nm) {
            var moInfo = this._moList[nm];
            return moInfo && moInfo.fined;
        };
        // public getMoState( nm:string ){
        //     let moInfo = this._moList[nm];
        //     if( moInfo ){
        //         return moInfo.state || GMD_UPDATE_STATE.NONE;
        //     }
        //     return GMD_UPDATE_STATE.NONE;
        // }
        GameModel.prototype.skipMoUpdate = function (nm) {
            var moInfo = this._moList[nm];
            if (moInfo && moInfo.state == 3 /* FAIL */) {
                moInfo.state = 0 /* NONE */;
            }
        };
        GameModel.prototype.initMo = function (nm, data) {
            var self = this;
            var moList = self._moList;
            if (!moList[nm]) {
                var moInfo = moList[nm] = { nm: nm, onlyRes: !data.jsVer, res: data.res, theme: data.theme, gp: data.gp };
                if (data.gVer) {
                    self.initMoVer(moInfo, data.gVer, data.zip, data.jsVer);
                }
            }
        };
        GameModel.prototype.initMoVer = function (moInfo, gVer, zip, jsVer) {
            var self = this;
            moInfo.ver = true;
            moInfo.zipMD5 = zip;
            moInfo.jsVer = jsVer;
            moInfo.newVer = gVer;
            if (CONF.curVers) {
                var updateNm = game.GameUtil.getHome(moInfo.nm);
                moInfo.curVer = CONF.curVers[updateNm];
                if (moInfo.curVer && self.isNeedUpdate(moInfo.newVer, moInfo.curVer)) {
                    moInfo.state = 1 /* NEED_UPDATE */;
                }
            }
        };
        GameModel.prototype.loadModule = function (nm, onlyRes) {
            var self = this;
            var moInfo = self._moList[nm];
            if (moInfo) {
                if (moInfo.fined || moInfo.loading)
                    return;
            }
            else {
                moInfo = self._moList[nm] = { nm: nm, onlyRes: onlyRes };
            }
            moInfo.errArgs = null;
            moInfo.loading = 0;
            if (!moInfo.ver) {
                if (true) {
                    RES.getVerCtrl().addHome(nm, game.GameUtil.getHome(nm));
                    moInfo.ver = true;
                    self.loadMo(moInfo);
                }
                else {
                    moInfo.loading++;
                    game.ResManager.loadVer(nm, function (succ, jsver, gver, zip) {
                        moInfo.loading--;
                        if (succ) {
                            self.initMoVer(moInfo, gver, zip, jsver);
                            self.loadMo(moInfo);
                        }
                        else {
                            self.tryLoadMoFin(moInfo, { fin: 6 /* VER_FILE_ERR */ });
                        }
                    }, game.GameUtil);
                }
            }
            else {
                self.loadMo(moInfo);
            }
        };
        GameModel.prototype.loadMo = function (moInfo) {
            var self = this;
            if (moInfo.state == 1 /* NEED_UPDATE */ || moInfo.state == 3 /* FAIL */) {
                var updateNm = game.GameUtil.getHome(moInfo.nm);
                self._upMoList[updateNm] = moInfo;
                moInfo.loading++;
                URLUtil.nativeHandler("startUpdateMain", { nm: updateNm, ver: moInfo.newVer, zip: moInfo.zipMD5 });
                return;
            }
            var fileNm = moInfo.nm;
            if (!moInfo.onlyRes && !moInfo.mo) {
                var gmdNm_1 = "MO_" /* MO_HEAD */ + moInfo.nm;
                moInfo.mo = game[gmdNm_1];
                if (!moInfo.mo) {
                    var homeUrl = RES.getVerCtrl().getHome(fileNm);
                    var srcPath_1 = homeUrl + fileNm;
                    if (moInfo.jsVer)
                        srcPath_1 += "_" + moInfo.jsVer;
                    srcPath_1 += ".js";
                    moInfo.loading++;
                    URLUtil.loadScript(srcPath_1, function (src) {
                        if (srcPath_1 != src)
                            return;
                        moInfo.loading--;
                        moInfo.mo = game[gmdNm_1];
                        var errArgs;
                        if (!moInfo.mo) {
                            errArgs = { fin: 7 /* JS_FILE_ERR */ };
                        }
                        self.tryLoadMoFin(moInfo, errArgs);
                    });
                }
            }
            if (!moInfo.res) {
                moInfo.loading++;
                game.ResManager.loadRes(fileNm, function (succ) {
                    moInfo.loading--;
                    var errArgs;
                    if (succ) {
                        moInfo.res = true;
                    }
                    else {
                        errArgs = { fin: 8 /* RES_FILE_ERR */ };
                    }
                    self.tryLoadMoFin(moInfo, errArgs);
                }, self);
            }
            if (!moInfo.theme) {
                moInfo.loading++;
                game.ResManager.loadTheme(fileNm, function (succ) {
                    moInfo.loading--;
                    var errArgs;
                    if (succ) {
                        moInfo.theme = true;
                    }
                    else {
                        errArgs = { fin: 9 /* THEME_FILE_ERR */ };
                    }
                    self.tryLoadMoFin(moInfo, errArgs);
                }, self);
            }
            self.tryLoadMoFin(moInfo);
        };
        //fin:0表示更新完成  1表示更新失败
        GameModel.prototype.onUpdateMoFin = function (nm, args) {
            var self = this;
            var moInfo = self._upMoList[nm];
            if (moInfo) {
                delete self._upMoList[nm];
                moInfo.loading--;
                if (args.fin == 0 /* OK */) {
                    moInfo.state = 0 /* NONE */;
                    moInfo.curVer = moInfo.newVer;
                    self.loadMo(moInfo);
                }
                else {
                    moInfo.state = 3 /* FAIL */;
                    self.tryLoadMoFin(moInfo, args);
                }
            }
        };
        GameModel.prototype.tryLoadMoFin = function (moInfo, args) {
            var self = this;
            if (args)
                moInfo.errArgs = args;
            if (moInfo.loading == 0) {
                if (moInfo.errArgs) {
                    self.postEvent("moload_fin" /* moload_fin */, moInfo.nm, moInfo.errArgs);
                }
                else {
                    if (moInfo.gp) {
                        moInfo.fined = true;
                        game.BusyLayer.getInst().hideBusy();
                        if (moInfo.onlyRes) {
                            self.postEvent("moload_fin" /* moload_fin */, moInfo.nm, { fin: 0 /* OK */ });
                        }
                        else if (!moInfo.started && self._inGame) {
                            moInfo.started = true;
                            moInfo.mo.start();
                        }
                    }
                    else {
                        moInfo.loading++;
                        game.ResManager.loadGroup(moInfo.nm, function () {
                            moInfo.loading--;
                            moInfo.gp = true;
                            self.tryLoadMoFin(moInfo);
                        }, self);
                    }
                }
            }
        };
        return GameModel;
    }(game.DataModel));
    game.GameModel = GameModel;
    __reflect(GameModel.prototype, "game.GameModel");
})(game || (game = {}));
var game;
(function (game) {
    var GameStateModel = (function (_super) {
        __extends(GameStateModel, _super);
        function GameStateModel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._roomCfgs = [];
            _this._goodRoadCfgs = [];
            return _this;
        }
        GameStateModel.prototype.init = function () {
            var self = this;
            var accMo = game.dataMgr.accMo;
            game.Net.regHandle(31001 /* gs2c_player_connect_result */, function (data) {
                if (data.result == 1 /* e_rmt_success */) {
                    self._inConn = true;
                    var gameId = accMo.gameId;
                    if (gameId) {
                        if (gameId == 14 /* hlzz */ || gameId == 31 /* gan28 */) {
                            self.postEvent("gs_conn" /* GS_CONN */);
                        }
                        else {
                            self.askHistory(gameId);
                        }
                    }
                }
            }, self);
            game.Net.regHandle(31002 /* gs2c_player_disconnect_result */, function (data) {
                if (data.result == 1 /* e_rmt_success */)
                    self._inConn = false;
            }, self);
            game.Net.regHandle(7685 /* s2c_req_room_config_result */, function (data) {
                self._roomCfgs[data.game_id] = data;
                self.postEvent("cfg_update" /* CFG_UPDATE */);
            }, self);
            game.Net.regHandle(7687 /* s2c_check_game_state_result */, function (data) {
                self.postEvent("check_state" /* CHECK_STATE */, data);
            }, self);
            game.Net.regHandle(31607 /* s2c_haolu_result */, function (data) {
                game.dataMgr.generalMo.setRouteRoad();
                self._goodRoadCfgs = data.info;
                for (var idx in data.info) {
                    var index = data.info[idx];
                    if (!index.flag) {
                        game.dataMgr.generalMo.setRoadData(index.roomid, index.handicapid, index.flag, index.result_2);
                    }
                    else {
                        game.dataMgr.generalMo.setRoadData(index.roomid, index.handicapid, index.flag, index.result_3);
                    }
                }
                self.postEvent("road_all" /* ROAD_ALL */);
            }, self);
            game.Net.regHandle(31608 /* s2c_haolu_append */, function (data) {
                var info_append = data.info_append;
                for (var idx in self._goodRoadCfgs) {
                    var index = self._goodRoadCfgs[idx];
                    if (index.gameid == info_append.gameid && index.roomid == info_append.roomid) {
                        for (var _i = 0, _a = info_append.hand; _i < _a.length; _i++) {
                            var tmp = _a[_i];
                            if (index.handicapid == tmp.handicapid) {
                                index.haolu_type = tmp.type;
                                game.dataMgr.generalMo.add(index.roomid, index.handicapid, tmp.result);
                            }
                        }
                    }
                }
                self.postEvent("road_append" /* ROAD_APPEND */, data.info_append);
            }, self);
        };
        GameStateModel.prototype.askHaoLu = function () {
            var args = {};
            game.Net.sendMsg(30006 /* c2gs_haolu */, args);
        };
        GameStateModel.prototype.askChangeState = function (state) {
            var args = {};
            args.state = state;
            game.Net.sendMsg(30007 /* c2gs_change_state */, args);
        };
        GameStateModel.prototype.askHistory = function (gameId, idx, count) {
            var args = {};
            args.gameid = gameId;
            if (gameId == 14 /* hlzz */ || gameId == 31 /* gan28 */) {
                args.idx_st = idx;
                args.count = count;
            }
            game.Net.sendMsg(30003 /* c2gs_game_history */, args);
        };
        GameStateModel.prototype.startConn = function () {
            var accMo = game.dataMgr.accMo;
            // if( accMo.gameId ){
            var args = {};
            args.playerid = accMo.getData().aid;
            // args.playerid = 1978057 ;
            args.gameid = accMo.gameId;
            args.agentid = parseInt(CONF.agentId);
            game.Net.sendMsg(30001 /* c2gs_player_connect */, args);
            // }
        };
        GameStateModel.prototype.askRoomCfg = function (gameId) {
            var args = {};
            args.game_id = gameId;
            game.Net.sendMsg(5175 /* c2s_req_room_config */, args);
        };
        GameStateModel.prototype.checkGameState = function (gameId) {
            game.BusyLayer.getInst().showBusy();
            var args = {};
            args.game_id = this.getCheckStateId(gameId);
            game.Net.sendMsg(5176 /* c2s_check_game_state */, args);
        };
        GameStateModel.prototype.getCheckStateId = function (gameId) {
            var gameConf = game.dataMgr.gameMo.getGmdConf(gameId);
            if (gameConf && gameConf.gameId) {
                return gameConf.gameId;
            }
            else {
                return gameId;
            }
        };
        GameStateModel.prototype.getRoomCfg = function (gameId) {
            return this._roomCfgs[gameId] || {};
        };
        GameStateModel.prototype.rmvRoomCfg = function () {
            var curMo = game.dataMgr.gameMo.getCurGMD();
            if (curMo) {
                this._roomCfgs[curMo.id] = {};
            }
        };
        GameStateModel.prototype.getGoodRoadCfgs = function () {
            return this._goodRoadCfgs;
        };
        GameStateModel.prototype.rmvGoodRoadCfgs = function () {
            var curMo = game.dataMgr.gameMo.getCurGMD();
            if (curMo) {
                this._goodRoadCfgs = [];
            }
        };
        GameStateModel.prototype.endConn = function () {
            if (this._inConn) {
                var args = {};
                args.playerid = game.dataMgr.accMo.getData().aid;
                game.Net.sendMsg(30002 /* c2gs_player_disconnect */, args);
            }
        };
        GameStateModel.prototype.restCoon = function () {
            this._inConn = false;
        };
        return GameStateModel;
    }(game.DataModel));
    game.GameStateModel = GameStateModel;
    __reflect(GameStateModel.prototype, "game.GameStateModel");
})(game || (game = {}));
var game;
(function (game) {
    var GeneralModel = (function (_super) {
        __extends(GeneralModel, _super);
        function GeneralModel() {
            var _this = _super.call(this) || this;
            _this.bindBenData = {};
            _this._selfGold = -1;
            _this._cunGold = -1;
            _this._routeRoadConfs = []; //好路牌路数据
            var self = _this;
            game.notifiCenter.addListener("enter_fin" /* enter_game_fin */, function () {
                self.initRegHandle();
                self.askPerformanceConfig();
                // if (dataMgr.accMo.getData().sevenday_done) self.sendGetQuestlist();
                //不打开七日
                self.sendGetQuestlist(false);
            }, self, true);
            self.confNm = "conf";
            self._openShop = false;
            var customKeys = game.GameUtil.getLocal("CUSTOM_CHIPS" /* CUSTOM_CHIPS */);
            self._customChips = customKeys ? JSON.parse(customKeys) : [];
            var goodRdKey = game.GameUtil.getLocal("GOOD_ROAD" /* GOOD_ROAD */);
            self._goodRdIdx = goodRdKey ? goodRdKey.split(",") : goodRdKey;
            self._routeRoadConfs = [];
            self._autoTranfer = game.GameUtil.getLocalBool("AUTO_TRANFER" /* AUTO_TRANFER */, false);
            self._walletList = [];
            self._curAskListTm = 0;
            return _this;
        }
        GeneralModel.prototype.onLoadConf = function (data) {
            var self = this;
            self._questConf = data.Quest;
            self._FAQConf = data.Extend;
            self._SafeBoxConf = data.SafeBoxRule;
            self._openConfs = data.open;
            self.partConf = data.particle;
            self._vipConf = data.VIPProfit;
            self._helpConf = data.helpShow;
            self._helpConf1 = data.helpShow1;
            self._hallFunConfs = data.hallFunPop;
            self._tipsConfs = data.TipsType;
            self._onlineTmConfs = data.OnLineTimes;
            self._dynamicBtnConf = data.dynamicBtn;
            var hallRepairConfs = [];
            for (var key in data.hallRepair) {
                var tmpRepair = data.hallRepair[key];
                if (!tmpRepair.isIOS || tmpRepair.isIOS == game.GameUtil.os) {
                    hallRepairConfs.push(tmpRepair);
                }
            }
            self._hallRepairConfs = hallRepairConfs;
            var tipConf = self._tipConf = [];
            for (var _i = 0, _a = data.tipControl; _i < _a.length; _i++) {
                var tmpTip = _a[_i];
                if (!tmpTip.os || tmpTip.os == game.GameUtil.os) {
                    tipConf.push(tmpTip);
                }
            }
            self._tipConf = tipConf;
            self._hlhGmsConfs = data.hlhGms;
        };
        Object.defineProperty(GeneralModel.prototype, "tipConf", {
            get: function () {
                return this._tipConf;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeneralModel.prototype, "curDay", {
            get: function () {
                return this._curDay;
            },
            set: function (value) {
                this._curDay = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeneralModel.prototype, "openShop", {
            set: function (value) {
                this._openShop = value;
            },
            enumerable: true,
            configurable: true
        });
        GeneralModel.prototype.getLimitList = function () {
            return this._questList;
        };
        Object.defineProperty(GeneralModel.prototype, "isOpenLimitRw", {
            get: function () {
                return this._isOpenLimitRw;
            },
            set: function (value) {
                this._isOpenLimitRw = value;
            },
            enumerable: true,
            configurable: true
        });
        GeneralModel.prototype.isFunOpen = function (tp) {
            var self = this;
            var openConf = self._openConfs[tp];
            var curPlatIsOpen = openConf[CONF.platNm];
            var isRechange = game.dataMgr.gameMo.hasRechangeMo();
            if (!game.dataMgr.accMo.isApi || (typeof curPlatIsOpen == "undefined")) {
                curPlatIsOpen = 1;
            }
            var isOpen = openConf.isOpen;
            if (tp == 7 /* shop */) {
                var gameMo = game.dataMgr.gameMo;
                var rechargeMo = game.dataMgr.gameMo.getCurMoInfo("recharge" /* recharge */);
                if (rechargeMo) {
                    if (!rechargeMo.state) {
                        return self._openShop && !!isOpen && !!curPlatIsOpen;
                    }
                    else {
                        if (rechargeMo.state == 1 /* NEED_UPDATE */ || rechargeMo.state == 2 /* UPDATING */ || rechargeMo.state == 3 /* FAIL */) {
                            rechargeMo.loadNum = 0;
                            rechargeMo.isBtn = true;
                            gameMo.loadModule(rechargeMo.nm);
                            game.BusyLayer.getInst().showBusy();
                            return false;
                        }
                        else {
                            return self._openShop && !!isOpen && !!curPlatIsOpen;
                        }
                    }
                }
                else {
                    return false;
                }
            }
            else {
                return !!isOpen && !!curPlatIsOpen;
            }
        };
        GeneralModel.prototype.getFunPopInfos = function () {
            return this._hallFunConfs;
        };
        GeneralModel.prototype.getRepairConfs = function () {
            return this._hallRepairConfs;
        };
        GeneralModel.prototype.getTipConf = function (id) {
            return this._tipsConfs[id];
        };
        GeneralModel.prototype.getDynamicConf = function (id) {
            return this._dynamicBtnConf[id];
        };
        GeneralModel.prototype.getHlhGmsConf = function () {
            return this._hlhGmsConfs;
        };
        // public get isInGame(): boolean {
        //     return this._isInGame;
        // }
        // public set isInGame(value: boolean) {
        //     this._isInGame = value;
        // }
        GeneralModel.prototype.getSuggestList = function () {
            return this._adviceList || [];
        };
        // public setIsNotNewTask(is_new: boolean): void {
        //     let self = this;
        //     //self._isHaveData = true;
        //     if (is_new) GameUtil.setLocal("isNotNewTask", is_new);
        // }
        // public getIsHaveData() {
        //     return this._isHaveData;
        // }
        //七日奖励配置
        //七日奖励可得到的总奖励
        GeneralModel.prototype.getAllGold = function () {
            var sum = 0;
            var self = this;
            for (var i in self._questConf) {
                var id = self._questConf[i].id;
                if (id >= 3001 && id <= 3014)
                    sum += self._questConf[i].awardItemCount;
            }
            return sum / 2;
        };
        GeneralModel.prototype.getQuestByID = function (id) {
            return this._questConf[id];
        };
        GeneralModel.prototype.getQuest = function () {
            return this._questConf;
        };
        GeneralModel.prototype.setPerform = function (data) {
            this._gainConf = data;
        };
        GeneralModel.prototype.getPerform = function () {
            return this._gainConf;
        };
        GeneralModel.prototype.getDeatilId = function () {
            return this._detailId;
        };
        /**
         *
         * @param gameId 游戏id 如果传的游戏id在配置表中找不到 则返回 0
         * 返回值是一个系数的number，为0的时候就要在选场界面 显示"本场次不计入VIP与代理中心业绩"
         */
        GeneralModel.prototype.getPerRate = function (gameId) {
            var self = this;
            if (!self._xiShuConf)
                return 0;
            var xiShuData;
            for (var i = 0; i < self._xiShuConf.length; i++) {
                var temp = self._xiShuConf[i];
                if (temp.gameid == gameId) {
                    xiShuData = temp;
                }
            }
            if (!xiShuData) {
                return 0;
            }
            else {
                return xiShuData.performancerate;
            }
        };
        GeneralModel.prototype.getExtend = function () {
            return this._FAQConf;
        };
        GeneralModel.prototype.getSafeBoxRule = function () {
            return this._SafeBoxConf;
        };
        GeneralModel.prototype.getVipProfit = function () {
            return this._vipConf;
        };
        GeneralModel.prototype.getHelpView = function () {
            return this._helpConf;
        };
        GeneralModel.prototype.getHelpView1 = function () {
            return this._helpConf1;
        };
        GeneralModel.prototype.getOnlineTmConf = function () {
            return this._onlineTmConfs;
        };
        GeneralModel.prototype.setGain = function (gain) {
            var self = this;
            self._gain = gain;
        };
        GeneralModel.prototype.getGain = function () {
            return this._gain;
        };
        GeneralModel.prototype.setPwd = function (pwd) {
            this._safeBoxPwd = pwd;
        };
        GeneralModel.prototype.getPwd = function () {
            return this._safeBoxPwd;
        };
        GeneralModel.prototype.setTempPwd = function (pwd) {
            this._tempSafeBoxPwd = pwd;
        };
        GeneralModel.prototype.getTempPwd = function () {
            return this._tempSafeBoxPwd;
        };
        GeneralModel.prototype.setSelfGold = function (gold) {
            this._selfGold = gold;
        };
        GeneralModel.prototype.getSelfGold = function () {
            return this._selfGold;
        };
        GeneralModel.prototype.setHasCunGold = function (gold) {
            this._cunGold = gold;
        };
        GeneralModel.prototype.getHasCunGold = function () {
            return this._cunGold;
        };
        GeneralModel.prototype.setIsFinish = function (finish) {
            this._isFinish = finish;
        };
        GeneralModel.prototype.getIsFinish = function () {
            return this._isFinish;
        };
        GeneralModel.prototype.setIsFind = function (find) {
            this._isFind = find;
        };
        GeneralModel.prototype.getIsFind = function () {
            return this._isFind;
        };
        GeneralModel.prototype.setCreateTeamName = function (name) {
            this._teamName = name;
        };
        GeneralModel.prototype.getCreateTeamName = function () {
            return this._teamName;
        };
        GeneralModel.prototype.setChangeTeamName = function (name) {
            this._changeName = name;
        };
        GeneralModel.prototype.getChangeTeamName = function () {
            return this._changeName;
        };
        GeneralModel.prototype.setPerformanceInfo = function (data) {
            var self = this;
            self._performsInfo = data;
        };
        GeneralModel.prototype.getPerformanceInfo = function () {
            return this._performsInfo;
        };
        GeneralModel.prototype.setPerformanceList = function (data) {
            var self = this;
            self._performsList = data;
        };
        GeneralModel.prototype.getPerformanceList = function () {
            return this._performsList;
        };
        GeneralModel.prototype.setPerformanceChild = function (data) {
            var self = this;
            self._performsChild = data;
        };
        GeneralModel.prototype.getPerformanceChild = function () {
            return this._performsChild;
        };
        GeneralModel.prototype.setPerformanceTeamlist = function (data) {
            var self = this;
            self._performsTeamlist = data;
        };
        GeneralModel.prototype.getPerformanceTeamlist = function () {
            return this._performsTeamlist;
        };
        GeneralModel.prototype.setPerformTeamInfo = function (data) {
            var self = this;
            self._performsTeamInfo = data;
        };
        GeneralModel.prototype.getPerformanceTeamInfo = function () {
            return this._performsTeamInfo;
        };
        GeneralModel.prototype.setPerformXishu = function (data) {
            this._xiShuConf = data;
        };
        GeneralModel.prototype.getPerformXishu = function () {
            return this._xiShuConf;
        };
        GeneralModel.prototype.setTeamId = function (teamId) {
            this._teamID = teamId;
        };
        GeneralModel.prototype.getTeamId = function () {
            return this._teamID;
        };
        GeneralModel.prototype.setCodeTag = function (tag) {
            this._tag = tag;
        };
        GeneralModel.prototype.getCodeTag = function () {
            return this._tag;
        };
        GeneralModel.prototype.setShareUrl = function (url) {
            this._shareUrl = url;
        };
        GeneralModel.prototype.getShareUrl = function () {
            return this._shareUrl;
        };
        GeneralModel.prototype.setLogTimes = function (lastTime) {
            this._lastTime = lastTime;
        };
        GeneralModel.prototype.getLogTimes = function () {
            return this._lastTime;
        };
        GeneralModel.prototype.setLogInfo = function (info) {
            this._logInfo = info;
        };
        GeneralModel.prototype.getLogInfo = function () {
            return this._logInfo;
        };
        GeneralModel.prototype.setCurGmGold = function (info) {
            var self = this;
            var walletList = self._walletList;
            if (walletList.length == 0) {
                walletList.push(info);
            }
            else {
                for (var i = 0, len = walletList.length; i < len; ++i) {
                    var walletInfo = walletList[i];
                    if (walletInfo.game_id == info.game_id) {
                        walletInfo.gold = info.gold;
                        return;
                    }
                }
                walletList.push(info);
            }
        };
        GeneralModel.prototype.getCurGmGold = function (gameId) {
            var self = this;
            var walletList = self._walletList;
            var centerGold = 0;
            for (var i = 0, len = walletList.length; i < len; ++i) {
                var walletInfo = walletList[i];
                if (walletInfo.game_id == gameId) {
                    centerGold = walletInfo.gold;
                }
            }
            return centerGold;
        };
        GeneralModel.prototype.getAskWalletTm = function () {
            return this._curAskListTm;
        };
        GeneralModel.prototype.initRegHandle = function () {
            var self = this;
            game.Net.regHandle(7539 /* s2c_benefits_result */, self.benefits, self);
            game.Net.regHandle(7561 /* s2c_get_questlist_result */, self.getQuestlist, self);
            game.Net.regHandle(7563 /* s2c_change_quest */, self.changeQuest, self);
            game.Net.regHandle(7599 /* s2c_notify_share */, self.notifyShare, self);
            game.Net.regHandle(7600 /* s2c_receive_share_reward_result */, self.shareReward, self);
            game.Net.regHandle(7609 /* s2c_notify_task_reflush */, self.taskReflush, self);
            game.Net.regHandle(7562 /* s2c_receive_questreward_result */, self.getQuestReward, self);
            game.Net.regHandle(7601 /* s2c_req_faq_result */, self.faqResult, self);
            game.Net.regHandle(7602 /* s2c_req_faq_detail_result */, self.faqDetailResult, self);
            game.Net.regHandle(7606 /* s2c_suggestion_result */, self.adviceReqResult, self);
            game.Net.regHandle(7607 /* s2c_req_suggest_result */, self.adviceListReqResult, self);
            // Net.regHandle(NET_CONF.S2C_ROUTE_TP.s2c_req_vip_info_result, self.askVipInfoResult, self);
            game.Net.regHandle(7634 /* s2c_performance_check_gain_result */, self.checkGainResult, self);
            game.Net.regHandle(7632 /* s2c_performance_gain_result */, self.getGainResult, self);
            game.Net.regHandle(7639 /* s2c_performance_info_result */, self.performanceInfoResult, self);
            game.Net.regHandle(7631 /* s2c_performance_list_result */, self.performanceListResult, self);
            game.Net.regHandle(7633 /* s2c_performance_child_result */, self.performanceChildResult, self);
            game.Net.regHandle(7636 /* s2c_performance_team_list_result */, self.performanceTeamlistResult, self);
            game.Net.regHandle(7635 /* s2c_performance_team_create_result */, self.performanceTeamcreateResult, self);
            game.Net.regHandle(7638 /* s2c_performance_team_update_result */, self.performanceTeamUpdateResult, self);
            game.Net.regHandle(7637 /* s2c_performance_team_info_result */, self.performanceTeamInfoResult, self);
            game.Net.regHandle(7686 /* s2c_performance_configs_result */, self.performanceConfigsResult, self);
            game.Net.regHandle(7684 /* s2c_promote_url_result */, self.updateExtendUrl, self);
            // Net.regHandle(NET_CONF.S2C_ROUTE_TP.s2c_change_photo_frame_result, self.changePhotoFrameResult, self);
            game.Net.regHandle(7531 /* s2c_set_box_password_result */, self.OpenSafeBoxResult, self);
            game.Net.regHandle(7574 /* s2c_check_password_result */, self.EnterSafeBoxResult, self);
            game.Net.regHandle(7572 /* s2c_reset_box_password_result */, self.ResetPasswordResult, self);
            game.Net.regHandle(7573 /* s2c_req_safebox_log_result */, self.SafeboxLogResult, self);
            game.Net.regHandle(7548 /* s2c_get_safe_box_security_code_result */, self.SafeboxSecurityCodeResult, self);
            game.Net.regHandle(7533 /* s2c_draw_gold_result */, self.DrawGoldResult, self);
            game.Net.regHandle(7532 /* s2c_deposit_gold_result */, self.DepositGoldResult, self);
            game.Net.regHandle(7693 /* s2c_gold_record */, self.askRecordListResult, self);
            game.Net.regHandle(7694 /* s2c_single_add_gold_result */, self.singleGoldResult, self);
            game.Net.regHandle(7695 /* s2c_single_check_balance_result */, self.singlecheckResult, self);
            game.Net.regHandle(19998 /* s2c_detailId_result */, self.detailIdResult, self);
            game.Net.regHandle(7696 /* s2c_rebate_list_result */, self.rebateListResult, self);
            game.Net.regHandle(7697 /* s2c_rebate_log_result */, self.rebateLogResult, self);
            game.Net.regHandle(7699 /* s2c_rebate_gain_result */, self.rebateAwdResult, self);
            game.Net.regHandle(7698 /* s2c_rebate_detail_result */, self.rebateDetailResult, self);
            game.Net.regHandle(7701 /* s2c_haolu_filte_get_result */, self.HaoLuFilteGetResult, self);
            game.Net.regHandle(7702 /* s2c_haolu_filte_set_result */, self.HaoLuFilteSetResult, self);
            game.Net.regHandle(7703 /* s2c_wallet_list_result */, self.walletListResult, self);
            game.Net.regHandle(7704 /* s2c_deposit_wallet_result */, self.depsitWalletResult, self);
            game.Net.regHandle(7705 /* s2c_withdraw_wallet_result */, self.drawWalletResult, self);
            game.Net.regHandle(7706 /* s2c_single_to_other_result */, self.singleOtherResult, self);
            game.Net.regHandle(7711 /* s2c_reflush_wallet_result */, self.reflushWalletResult, self);
        };
        // ------------------------------客户端接收消息--------------------------------------
        GeneralModel.prototype.performanceConfigsResult = function (data) {
            var self = this;
            self.setPerformXishu(data.rates);
            self.setPerform(data.rebates);
            self.postEvent("PerformConfig" /* PerformConfig */);
        };
        //团队具体信息，成员列表
        GeneralModel.prototype.performanceTeamInfoResult = function (data) {
            var self = this;
            self.setPerformTeamInfo(data.team);
            self.postEvent("PerformTeaminfo" /* PerformTeaminfo */);
        };
        //返回段连接数据
        GeneralModel.prototype.updateExtendUrl = function (data) {
            var self = this;
            self.setShareUrl(data.url);
            if (data.url) {
                self.postEvent("updateUrl" /* updateUrl */, 2);
            }
            else {
                self.postEvent("updateUrl" /* updateUrl */, 1);
            }
        };
        //更新团队信息返回
        GeneralModel.prototype.performanceTeamUpdateResult = function (data) {
            var self = this;
            self.setTeamId(data.team_id);
            self.setCodeTag(data.code_tag);
            if (data.result == 1) {
                self.postEvent("PerformTeamupdate" /* PerformTeamupdate */, data.optype, data);
            }
            else {
                game.MsgBox.showTipBox(false, 741 /* sameName */, "mainLang" /* mainLang */);
            }
        };
        //申请创建团队返回
        GeneralModel.prototype.performanceTeamcreateResult = function (data) {
            var self = this;
            if (data.result == 1) {
                self.postEvent("PerformTeamcreate" /* PerformTeamcreate */);
            }
            else {
                game.MsgBox.showTipBox(false, 741 /* sameName */, "mainLang" /* mainLang */);
            }
        };
        //申请团队列表返回
        GeneralModel.prototype.performanceTeamlistResult = function (data) {
            var self = this;
            self.setPerformanceTeamlist(data.teams);
            self.postEvent("PerformTeamlist" /* PerformTeamlist */);
        };
        //申请下级查询返回
        GeneralModel.prototype.performanceChildResult = function (data) {
            var self = this;
            self.setPerformanceChild(data.info);
            self.postEvent("PerformChild" /* PerformChild */);
        };
        //代理管理返回
        GeneralModel.prototype.performanceListResult = function (data) {
            var self = this;
            self.setPerformanceList(data.info);
            self.postEvent("PerformList" /* PerformList */);
            // if (self._isFirstPList) self.postEvent(General_EVT_POP.backInfo);
        };
        //申请业绩查询返回
        GeneralModel.prototype.performanceInfoResult = function (data) {
            var self = this;
            self.setPerformanceInfo(data);
            self.postEvent("Perform" /* Perform */);
        };
        //申请领取佣金返回
        GeneralModel.prototype.getGainResult = function (data) {
            var self = this;
            if (data.result == 1) {
                self.setGain(0);
                self.postEvent("GetGain" /* GetGain */);
                var gold = game.dataMgr.accMo.getData().gold + data.gain;
                game.dataMgr.accMo.setVal("gold", gold);
                // game.TipsMgr.showPrompt(StringUtil.printf(TRain.langMgr.getTxt("mainLang", langConsts.mainLang.getDLGold),
                //     game.DataFormat.convertGold(data.gain)
                // ));
                var txt = StringUtil.printf(TRain.langMgr.getTxt("mainLang", 788 /* getDLGold */), game.DataFormat.convertGold(data.gain));
                game.MsgBox.showTipBox(false, 788 /* getDLGold */, "mainLang" /* mainLang */, txt);
            }
        };
        //代理佣金数量
        GeneralModel.prototype.checkGainResult = function (data) {
            var self = this;
            self.setGain(data.gain);
            self.postEvent("Gain_result" /* Gain_result */);
        };
        //玩家领取救济金的结果
        GeneralModel.prototype.benefits = function (data) {
            //救济金是固定的 confConsts.ConstTp.almsGoldCount 
            var result = data.result;
            if (result == 1 /* e_rmt_success */) {
                // 领取成功
                var gold = game.dataMgr.accMo.getData().gold + this.bindBenData.benefitsGold;
                game.dataMgr.accMo.setVal("gold", gold);
                game.dataMgr.accMo.updateGetCount();
            }
            else {
                // 领取失败
                // game.TipsMgr.showPrompt(TRain.langMgr.getTxt("errCode", result));
            }
            // game.TipsMgr.showPrompt(TRain.langMgr.getTxt("errCode", result));
            game.MsgBox.showTipBox(true, result);
        };
        //返回任务列表
        GeneralModel.prototype.getQuestlist = function (data) {
            //data.is_new    这个是限时悬赏使用,任务是否已重置
            var self = this;
            if (Object.keys(data).length == 0)
                return;
            if (!self._questList) {
                self._questList = [];
            }
            else {
                self._questList.length = 0;
            }
            for (var _i = 0, _a = data.questlist; _i < _a.length; _i++) {
                var temp = _a[_i];
                var val = {};
                val.questid = temp.questid;
                val.count = temp.count;
                val.received = temp.received;
                var qcfg = self.getQuestByID(temp.questid);
                val.cfg = qcfg;
                if (isNaN(self._curDay) || self._curDay < qcfg.group) {
                    self._curDay = qcfg.group;
                }
                self._questList.push(val);
            }
            //self.setIsNotNewTask(data.is_new);
            // self.postEvent(General_EVT.Quest_List_Result + "");
            //let isNotNewTask = GameUtil.getLocalBool("isNotNewTask");
            var sevendayDone = game.dataMgr.accMo.getVal("sevenday_done");
            // let oneTask = self._questList[(self._curDay * 2 - 1)];
            // let twoTask = self._questList[(self._curDay * 2 - 2)];
            var l = [];
            for (var _b = 0, _c = self._questList; _b < _c.length; _b++) {
                var temp = _c[_b];
                if (temp.cfg.group == self._curDay) {
                    l.push(temp);
                }
            }
            var oneTask = l[0];
            var twoTask = l[1];
            //完成未领取            
            if (!sevendayDone && oneTask && twoTask && !oneTask.received && !twoTask.received && oneTask.count >= oneTask.cfg.completeCount && twoTask.count >= twoTask.cfg.completeCount) {
                self.isDone = true; //显示
            }
            else {
                self.isDone = false; //不显示
            }
            // self.postEvent(General_EVT.IsDone, self.isDone);
            //完成已领取
            if (!sevendayDone && oneTask && twoTask && oneTask.received && twoTask.received && oneTask.count >= oneTask.cfg.completeCount && twoTask.count >= twoTask.cfg.completeCount) {
                self.isget = true; //显示
            }
            else {
                self.isget = false; //不显示
            }
            self.postEvent("IsDone" /* IsDone */, self.isDone, self.isget);
            //是否是可弹出七日奖励
            // let isPopSevenDay = self._isPopSevenDay;
            if (!sevendayDone && self.isOpen) {
                // if (isPopSevenDay) {
                self.postEvent("backInfo" /* backInfo */);
                // } else {
                //     self.postEvent(General_EVT.Quest_List_Result);//打开七日
                // }
            }
            //if (sevendayDone && data.is_new && self.isOpen) {
            self.isOpenLimitRw = sevendayDone && data.is_new && self.isOpen;
            // self.postEvent(General_EVT.OpenTaskToday); //新一期第一次进入游戏
            //}
            if (!sevendayDone) {
                self.postEvent("quest_list" /* Quest_List_Result */ + "");
            }
        };
        //通知成就分享
        GeneralModel.prototype.notifyShare = function (data) {
            if (data && data.game_id == game.dataMgr.accMo.gameId)
                this.postEvent("achieve_share" /* Notify_Achieve_Share */ + "", data);
        };
        //领取成就分享奖励结果
        GeneralModel.prototype.shareReward = function (data) {
            var result = data.result;
            if (result == 1 /* e_rmt_success */) {
                game.MsgBox.showTipBox(false, 778 /* headHasGet */, "mainLang" /* mainLang */);
                var reward = data.reward;
                if (!isNaN(reward) && reward > 0) {
                    var acco = game.dataMgr.accMo;
                    acco.setVal("gold", acco.getData().gold + reward);
                }
                game.dataMgr.accMo.askLogin();
            }
            else {
                // game.TipsMgr.showPrompt(TRain.langMgr.getTxt("errCode", result));
                game.MsgBox.showTipBox(true, result);
            }
        };
        //通知玩家任务刷新
        GeneralModel.prototype.taskReflush = function (data) {
            this.sendGetQuestlist(false);
        };
        //领取奖励（七日奖励）
        GeneralModel.prototype.getQuestReward = function (data) {
            var self = this;
            var accMo = game.dataMgr.accMo;
            if (data.result == 1 /* e_rmt_success */) {
                //当前是七日奖励还是限时悬赏
                if (game.dataMgr.accMo.getVal("sevenday_done")) {
                    for (var i = 0, len = self._questList.length; i < len; i++) {
                        var questItem = self._questList[i];
                        if (questItem.questid == data.questid) {
                            questItem.received = true;
                            accMo.addVal("gold", questItem.cfg.awardItemCount);
                        }
                    }
                    self.postEvent("UpdateTaskList" /* UpdateTaskList */);
                }
                else {
                    var seven = self._questConf[data.questid];
                    var grp = seven.group;
                    var award = game.DataFormat.convertGold(seven.awardItemCount);
                    game.dataMgr.accMo.setVal("gold", game.dataMgr.accMo.getData().gold + seven.awardItemCount);
                    var t = StringUtil.printf(TRain.langMgr.getTxt("mainLang", 776 /* sevenGetGold */), award);
                    // game.TipsMgr.showPrompt(t);
                    game.MsgBox.showTipBox(false, 776 /* sevenGetGold */, "mainLang" /* mainLang */, t);
                    for (var i = 0; i < self._questList.length; i++) {
                        if (self._questList[i].cfg.group == grp) {
                            self._questList[i].received = true;
                        }
                    }
                    var isOver = self.checkAllOver();
                    if (isOver && self.curDay == 7) {
                        var isLookSDay = game.dataMgr.generalMo.isFunOpen(5 /* sevenDay */); //是否开放七日奖励
                        if (isLookSDay) {
                            accMo.setVal("sevenday_done", true);
                            game.gameScene.showHallUI(4 /* sevenReward */);
                        }
                        // self.sendGetQuestlist(false);
                    }
                    self.postEvent("GetQuestReward" /* GetQuestReward */ + "");
                }
            }
            else {
            }
        };
        GeneralModel.prototype.checkAllOver = function () {
            var self = this;
            var questList = self.getLimitList();
            for (var i = 0; i < questList.length; i++) {
                var questItem = questList[i];
                if (questItem.received) {
                    continue;
                }
                else {
                    return false;
                }
            }
            return true;
        };
        //通知任务信息变更（七日奖励）//任务进度增加的时候会发
        GeneralModel.prototype.changeQuest = function (data) {
            var self = this;
            var vo = data.qinfo;
            if (self._questList) {
                var oldCount = 0;
                for (var _i = 0, _a = self._questList; _i < _a.length; _i++) {
                    var temp = _a[_i];
                    if (temp.questid == vo.questid) {
                        oldCount = temp.count;
                        temp.count = vo.count;
                        // temp.received = vo.received;
                        break;
                    }
                }
                self.postEvent("UpdateTaskList" /* UpdateTaskList */);
                self.postEvent("UpdateTaskList2" /* UpdateTaskList2 */, vo, oldCount);
                var sevendayDone = game.dataMgr.accMo.getVal("sevenday_done");
                // let oneTask = self._questList[(self._curDay * 2 - 1)];
                // let twoTask = self._questList[(self._curDay * 2 - 2)];
                var l = [];
                for (var _b = 0, _c = self._questList; _b < _c.length; _b++) {
                    var temp = _c[_b];
                    if (temp.cfg.group == self._curDay) {
                        l.push(temp);
                    }
                }
                var oneTask = l[0];
                var twoTask = l[1];
                if (!sevendayDone && oneTask && twoTask && !oneTask.received && !twoTask.received && oneTask.count >= oneTask.cfg.completeCount && twoTask.count >= twoTask.cfg.completeCount) {
                    self.isDone = true; //显示
                    self.postEvent("IsDone" /* IsDone */, self.isDone, false);
                }
                if (!sevendayDone && oneTask && twoTask && oneTask.received && twoTask.received && oneTask.count >= oneTask.cfg.completeCount && twoTask.count >= twoTask.cfg.completeCount) {
                    self.isDone = true; //显示
                    self.postEvent("IsDone" /* IsDone */, self.isDone, true);
                } // else {
                //     self.isDone = false;//不显示
                // }
                // if (!sevendayDone && oneTask && twoTask && self._questConf[vo.questid].group == self._curDay && oneTask.count >= oneTask.cfg.completeCount && twoTask.count >= twoTask.cfg.completeCount) {
                //     self.isDone = true;//显示
                //     self.postEvent(General_EVT.IsDone, self.isDone);
                // }
                // else {
                //     self.isDone = false;//不显示
                // }
            }
        };
        //申请开启并且设置保险箱密码返回
        GeneralModel.prototype.OpenSafeBoxResult = function (data) {
            this.postEvent("set_box_password" /* setBoxPassword */, data.result);
        };
        //申请进入保险箱返回
        GeneralModel.prototype.EnterSafeBoxResult = function (data) {
            if (data.result == 1) {
                this.postEvent("enterBox" /* enterBox */);
            }
            else {
                game.MsgBox.showTipBox(false, 906 /* boxWrongNum */, "mainLang" /* mainLang */);
            }
        };
        //找回密码/重置密码返回
        GeneralModel.prototype.ResetPasswordResult = function (data) {
            var self = this;
            if (data.result == 1) {
                self.setIsFind(false);
                self.postEvent("resetPass" /* resetPass */);
            }
            else if (data.result == 38) {
                game.MsgBox.showTipBox(true, 38 /* e_rmt_code_error */);
            }
        };
        //保险箱明细日志返回
        GeneralModel.prototype.SafeboxLogResult = function (data) {
            var self = this;
            self.setLogTimes(data.lastTime);
            self.setLogInfo(data.logList);
            self.postEvent("log" /* log */);
        };
        //返回获取验证码结果
        GeneralModel.prototype.SafeboxSecurityCodeResult = function (data) {
            if (data.result == 1) {
                game.MsgBox.showTipBox(false, 33 /* Login_AskCodeSuccess */, "mainLang" /* mainLang */);
            }
            else if (data.result == 38) {
                game.MsgBox.showTipBox(true, 38 /* e_rmt_code_error */);
            }
            else {
                game.MsgBox.showTipBox(false, 879 /* boxYanHasSend */, "mainLang" /* mainLang */);
            }
        };
        //取钱返回
        GeneralModel.prototype.DrawGoldResult = function (data) {
            var self = this;
            if (data.result == 1) {
                self.setIsFinish(false);
                self.postEvent("qu" /* qu */);
            }
            else {
                game.MsgBox.showTipBox(false, 881 /* resultWrong1 */, "mainLang" /* mainLang */);
            }
        };
        //存钱返回
        GeneralModel.prototype.DepositGoldResult = function (data) {
            var self = this;
            if (data.result == 1) {
                self.setIsFinish(false);
                self.postEvent("cun" /* cun */);
            }
            else {
                game.MsgBox.showTipBox(false, 881 /* resultWrong1 */, "mainLang" /* mainLang */);
            }
        };
        // ------------------------------客户端发消息--------------------------------------
        //申请保险箱日志
        GeneralModel.prototype.askSafeBoxLog = function (lastTime) {
            var args = {};
            args.lastTime = lastTime;
            game.Net.sendMsg(5067 /* c2s_req_safebox_log */, args);
        };
        //申请取钱
        GeneralModel.prototype.askGetMoney = function (gold, pwd) {
            var args = {};
            args.gold = gold;
            args.pwd = pwd;
            game.Net.sendMsg(5031 /* c2s_draw_gold */, args);
        };
        //申请存钱
        GeneralModel.prototype.askCunMoney = function (gold, pwd) {
            var args = {};
            args.gold = gold;
            args.pwd = pwd;
            game.Net.sendMsg(5030 /* c2s_deposit_gold */, args);
        };
        //申请找回密码
        GeneralModel.prototype.askFindSafeBoxCode = function (pwd1, pwd2, safeCode) {
            var args = {};
            args.pwd1 = pwd1;
            args.pwd2 = pwd2;
            args.safeCode = safeCode;
            game.Net.sendMsg(5066 /* c2s_reset_box_password */, args);
        };
        //申请开启并且设置保险箱密码
        GeneralModel.prototype.askOpenSafeBox = function (pwd1, pwd2) {
            var args = {};
            args.pwd1 = pwd1;
            args.pwd2 = pwd2;
            game.Net.sendMsg(5029 /* c2s_set_box_password */, args);
        };
        //申请进入保险箱
        GeneralModel.prototype.askEnterSafeBox = function (pwd) {
            var args = {};
            args.pwd = pwd;
            game.Net.sendMsg(5068 /* c2s_check_box_password */, args);
        };
        //申请获取验证码
        GeneralModel.prototype.askSafeBoxCode = function () {
            var args = {};
            game.Net.sendMsg(5044 /* c2s_get_safe_box_security_code */, args);
        };
        //请求玩家系数配置表
        GeneralModel.prototype.askPerformanceConfig = function () {
            var args = {};
            game.Net.sendMsg(5133 /* c2s_performance_configs */, args);
        };
        //申请请求团队详情（成员列表） performance_team_info
        GeneralModel.prototype.sendSearchTeam = function (team_id) {
            var args = {};
            args.team_id = team_id;
            game.Net.sendMsg(5126 /* c2s_performance_team_info */, args);
        };
        //申请修改团队信息
        GeneralModel.prototype.sendChangeTeamName = function (optype, team_id, limit, nick_name) {
            var args = {};
            args.optype = optype;
            args.team_id = team_id;
            args.limit = limit;
            args.nick_name = nick_name;
            game.Net.sendMsg(5127 /* c2s_performance_team_update */, args);
        };
        //申请创建团队
        GeneralModel.prototype.sendCreateTeam = function (count, nick_name) {
            var args = {};
            args.count = count;
            args.nick_name = nick_name;
            game.Net.sendMsg(5124 /* c2s_performance_team_create */, args);
        };
        //申请团队列表
        GeneralModel.prototype.sendPerformTeamList = function () {
            var args = {};
            game.Net.sendMsg(5125 /* c2s_performance_team_list */, args);
        };
        //申请下级查询
        GeneralModel.prototype.sendPerformanceChild = function (player_id) {
            var args = {};
            args.player_id = player_id;
            game.Net.sendMsg(5122 /* c2s_performance_child */, args);
        };
        //代理列表申请
        GeneralModel.prototype.sendPerformList = function (isFirst) {
            // this._isFirstPList = isFirst || false;
            var args = {};
            game.Net.sendMsg(5120 /* c2s_performance_list */, args);
        };
        //申请业绩查询
        GeneralModel.prototype.sendPerformanceInfo = function () {
            var args = {};
            game.Net.sendMsg(5128 /* c2s_performance_info */, args);
        };
        //申请短链接，分享用
        GeneralModel.prototype.askPromoteUrl = function (channel_id, params) {
            var args = {};
            args.params = params;
            args.channel_id = channel_id;
            game.Net.sendMsg(5174 /* c2s_promote_url */, args);
        };
        //玩家申请自己的佣金数量
        GeneralModel.prototype.sendGetGain = function () {
            var args = {};
            game.Net.sendMsg(5123 /* c2s_performance_check_gain */, args);
        };
        GeneralModel.prototype.sendAskForGain = function () {
            var args = {};
            game.Net.sendMsg(5121 /* c2s_performance_gain */, args);
        };
        //玩家领取救济金
        GeneralModel.prototype.sendBenefits = function () {
            var args = {};
            game.Net.sendMsg(5037 /* c2s_beneifts */, args);
        };
        //请求任务列表
        GeneralModel.prototype.sendGetQuestlist = function (isOpen) {
            if (isOpen === void 0) { isOpen = true; }
            var self = this;
            self.isOpen = isOpen;
            // self._isPopSevenDay = isPopSevenDay;
            var args = {};
            game.Net.sendMsg(5058 /* c2s_get_questlist */, args);
        };
        //领取成就分享奖励
        GeneralModel.prototype.sendshareReward = function () {
            var args = {};
            game.Net.sendMsg(5091 /* c2s_receive_share_reward */, args);
        };
        //微信分享任务
        GeneralModel.prototype.sendWXshareTask = function () {
            var args = {};
            game.Net.sendMsg(5100 /* c2s_wechat_share_task */, args);
        };
        //领取奖励（七日奖励）
        GeneralModel.prototype.sendGetQuestReward = function (questid) {
            var args = { questid: questid };
            game.Net.sendMsg(5059 /* c2s_receive_questreward */, args);
        };
        // ------------------------------------缓存自定义筹码和取----------------------------------
        /**
         *
         * @param id 游戏id
         * 返回的是当前游戏id的自定义筹码
         */
        GeneralModel.prototype.getCustomChips = function (id, roomId) {
            var customChip = this._customChips[id];
            if (!customChip) {
                return [];
            }
            var chips = customChip[roomId];
            if (!chips) {
                return [];
            }
            return chips;
        };
        /**
         *
         * @param id
         * @param customList
         * @param WeightList
         *
         * 返回值 数组的第0位 缓存筹码列表是否存在于customList
         * 数组的第1位 默认筹码列表 （WeightList） 是否存在于customList
         */
        // public getCustomMacth(id: confConsts.GameTp, customList: number[], WeightList: number[]) {
        //     let matchArr = [false, false];
        //     let customChip = this._customChips[id];
        //     if (!customChip) {
        //         customChip = { chips: [] };
        //     }
        //     let count = 0;
        //     let count1 = 0;
        //     for (let i = 0; i < WeightList.length; i++) {
        //         let temp = WeightList[i];
        //         let tempCus = (customChip.chips.length > 0) ? customChip.chips[i] : null;
        //         for (let j = 0; j < customList.length; j++) {
        //             let temp1 = customList[j];
        //             if (temp == temp1) {
        //                 count1 += 1;
        //             }
        //             if (tempCus) {
        //                 if (tempCus == temp1) {
        //                     count += 1;
        //                 }
        //             }
        //         }
        //     }
        //     matchArr[0] = (count == 5 && customChip.chips.length > 0);
        //     matchArr[1] = (count1 == 5);
        //     return matchArr;
        // }
        GeneralModel.prototype.setCustomChips = function (id, roomId, chips) {
            var self = this;
            var customChips = self._customChips;
            var customChip = customChips[id];
            if (!customChip) {
                customChip = {};
            }
            customChip[roomId] = chips;
            customChips[id] = customChip;
            var customKeys = JSON.stringify(customChips);
            game.GameUtil.setLocal("CUSTOM_CHIPS" /* CUSTOM_CHIPS */, customKeys);
        };
        //-----------------------------------好路推荐-------------------------------------------
        GeneralModel.prototype.askHaoLuFilteSet = function (filte) {
            var args = {};
            args.filte = filte;
            game.Net.sendMsg(5193 /* c2s_haolu_filte_set */, args);
        };
        GeneralModel.prototype.askHaoLuFilteGet = function () {
            var args = {};
            game.Net.sendMsg(5192 /* c2s_haolu_filte_get */, args);
        };
        GeneralModel.prototype.HaoLuFilteSetResult = function (data) {
            var self = this;
            self.postEvent("FilteSet" /* FilteSet */, data.filte);
        };
        GeneralModel.prototype.HaoLuFilteGetResult = function (data) {
            var self = this;
            self.postEvent("FilteGet" /* FilteGet */, data.filte);
        };
        GeneralModel.prototype.Zupanlu = function (history) {
            //牌路记录  1赢 2输 3和
            var ret = { r: 0 /* none */, pt: 0, up: false, down: false };
            if (history == 1) {
                ret.r = 1 /* win */;
            }
            else if (history == 2) {
                ret.r = 2 /* lose */;
            }
            else if (history == 3) {
                ret.r = 3 /* peace */;
            }
            return ret;
        };
        GeneralModel.prototype.add = function (roomid, handicapid, data) {
            var self = this;
            for (var idx in self._routeRoadConfs) {
                var index = self._routeRoadConfs[idx];
                if (index.roomid == roomid && index.handicapid == handicapid) {
                    index.route.data2Zhupanlu = self.Zupanlu;
                    index.route.addHistory(data);
                }
            }
        };
        GeneralModel.prototype.setRoadData = function (roomid, handicapid, flag, roadData) {
            var self = this;
            var routeRoad = new game.RouteModel;
            var temp = [];
            if (!flag) {
                for (var idx in roadData) {
                    var road = roadData[idx];
                    var tmp = (road == true ? 1 : 2);
                    temp.push(tmp);
                }
                routeRoad.data2Zhupanlu = self.Zupanlu;
                routeRoad.addHistory(temp);
            }
            else {
                for (var idx in roadData) {
                    var road = roadData[idx];
                    var i = 0;
                    while (i <= 15) {
                        var r3 = (road >> 2 * i) & 3;
                        if (r3 == 0) {
                            break;
                        }
                        temp.push(r3);
                        i++;
                    }
                }
                routeRoad.data2Zhupanlu = self.Zupanlu;
                routeRoad.addHistory(temp);
            }
            var data = {
                roomid: roomid,
                handicapid: handicapid,
                route: routeRoad,
            };
            self._routeRoadConfs.push(data);
        };
        GeneralModel.prototype.getRouteRoad = function () {
            var self = this;
            return self._routeRoadConfs;
        };
        GeneralModel.prototype.setRouteRoad = function () {
            var self = this;
            self._routeRoadConfs = [];
        };
        GeneralModel.prototype.getGoodRd = function () {
            var self = this;
            var tempArr = self._goodRdIdx;
            var goodRdArr = [];
            if (tempArr) {
                if (tempArr[0] == "") {
                    return goodRdArr;
                }
                for (var i = 0; i < tempArr.length; i++) {
                    var idx = Number(tempArr[i]);
                    goodRdArr.push(idx);
                }
            }
            else {
                goodRdArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
            }
            return goodRdArr;
        };
        GeneralModel.prototype.setGoodRd = function (data) {
            var self = this;
            if (!self._goodRdIdx) {
                self._goodRdIdx = [];
            }
            self._goodRdIdx = data;
            var goodRdKeys = self._goodRdIdx.join(",");
            game.GameUtil.setLocal("GOOD_ROAD" /* GOOD_ROAD */, goodRdKeys);
        };
        // ------------------------------------自动转账 ------------------------------------------------
        GeneralModel.prototype.getAutoTranFer = function () {
            return this._autoTranfer;
        };
        GeneralModel.prototype.setAutoTranFer = function (value) {
            this._autoTranfer = value;
            game.GameUtil.setLocal("AUTO_TRANFER" /* AUTO_TRANFER */, value);
        };
        //----------------------------------游戏记录--------------------------------------------
        GeneralModel.prototype.askRecordList = function (gameId) {
            var args = {};
            args.game_id = gameId;
            game.Net.sendMsg(5182 /* c2s_gold_record */, args);
        };
        GeneralModel.prototype.askRecordListResult = function (data) {
            var self = this;
            self.postEvent("GetGameRecordList" /* GetGameRecordList */, data);
        };
        // --------------------------------伪单一钱包---------------------------------------------------
        GeneralModel.prototype.askAddSingleGold = function (gold) {
            var args = {};
            args.gold = gold;
            game.Net.sendMsg(5184 /* c2s_single_add_gold */, args);
            game.BusyLayer.getInst().showBusy();
        };
        GeneralModel.prototype.checkSingleBalance = function () {
            var args = {};
            game.Net.sendMsg(5185 /* c2s_single_check_balance */, args);
        };
        GeneralModel.prototype.singleGoldResult = function (data) {
            var self = this;
            game.BusyLayer.getInst().hideBusy();
            self.postEvent("ADD_SINGLE_GOLD_RESULT" /* ADD_SINGLE_GOLD_RESULT */, data.result, data.gold);
        };
        GeneralModel.prototype.singlecheckResult = function (data) {
            var self = this;
            if (data.result == 1 /* e_rmt_success */) {
                self.postEvent("CHECK_BALANCE_RESULT" /* CHECK_BALANCE_RESULT */, data.gold);
            }
            else {
                game.MsgBox.showTipBox(true, data.result);
            }
        };
        // ----------------------------------------------------------------------------------------------------
        GeneralModel.prototype.detailIdResult = function (data) {
            var self = this;
            self._detailId = data.detailid;
            self.postEvent("Detail_Id_Back" /* Detail_Id_Back */, true);
        };
        // ---------------------------------限时悬赏-----------------------------------------------
        //--显示一次今日刷新的任务
        // public showTaskOfToday(): void {
        //     let self = this;
        //     // if (self._questList && self._questList.length > 0 && !!isNotNewTask && self.getIsHaveData() && !!dataMgr.accMo.getData().sevenday_done) {
        //     //GameUtil.setLocal("isNotNewTask", false);
        //     //弹出限时广告界面
        //     self.postEvent(General_EVT.OpenTaskToday);
        //     self.postEvent(General_EVT.UpdateTaskList);
        //     // }
        // }
        //==============================================================================================
        GeneralModel.prototype.getTaskByDay = function (day) {
            var self = this;
            if (!self._questList) {
                return undefined;
            }
            var list = [];
            if (isNaN(day)) {
                day = self._curDay;
            }
            for (var _i = 0, _a = self._questList; _i < _a.length; _i++) {
                var temp = _a[_i];
                if (temp.cfg.group == day) {
                    list.push(temp);
                }
            }
            return list;
        };
        GeneralModel.prototype.setTaskByDay = function (index, day) {
            var self = this;
            if (!self._questList) {
                return undefined;
            }
            if (isNaN(day)) {
                day = self._curDay;
            }
            var count = 0;
            for (var i = 0; i < self._questList.length; i++) {
                if (self._questList[i].cfg.group == day) {
                    if (count == index) {
                        self._questList[i].count++;
                    }
                    count++;
                }
            }
        };
        GeneralModel.prototype.getRestReward = function () {
            var self = this;
            var list = self.getQuest();
            var sum = 0;
            for (var i in list) {
                if (list[i].id >= 3001 && list[i].id <= 3014) {
                    if (list[i].group > self._curDay) {
                        sum += list[i].awardItemCount;
                    }
                }
            }
            return sum / 2;
        };
        //---------------------客服-------------------------------
        GeneralModel.prototype.sendAdviceReq = function (text) {
            var args = {};
            args.text = text;
            game.Net.sendMsg(5097 /* c2s_suggestion */, args);
        };
        GeneralModel.prototype.adviceReqResult = function (data) {
            var self = this;
            if (data.result != 1 /* e_rmt_success */) {
                game.MsgBox.showTipBox(true, data.result);
            }
        };
        GeneralModel.prototype.adviceListReq = function () {
            var args = {};
            game.Net.sendMsg(5098 /* c2s_req_suggest */, args);
        };
        GeneralModel.prototype.adviceListReqResult = function (data) {
            var self = this;
            self._adviceList = data.list;
            self.postEvent("GetadviceListResult" /* GetadviceListResult */, data.list || []);
            self.postEvent("GetadviceListResult" /* GetadviceListResult */, data.list || []);
        };
        GeneralModel.prototype.askFaq = function () {
            var args = {};
            game.Net.sendMsg(5092 /* c2s_req_faq */, args);
        };
        GeneralModel.prototype.faqResult = function (data) {
            this.postEvent("GetFaqResult" /* GetFaqResult */, data.faq_list || []);
            // public faqResult(data: NET_CONF.s2c_req_faq_result) {
            //     this.postEvent(General_EVT.GetFaqResult, data.faq_list || []);
        };
        GeneralModel.prototype.askFaqDetail = function (index) {
            var args = {};
            args.index = index;
            game.Net.sendMsg(5093 /* c2s_req_faq_detail */, args);
        };
        GeneralModel.prototype.faqDetailResult = function (data) {
            this.postEvent("GetFaqDetailResult" /* GetFaqDetailResult */, data.faq);
            // public faqDetailResult(data: NET_CONF.s2c_req_faq_detail_result) {
            //     this.postEvent(General_EVT.GetFaqDetailResult, data.faq);
        };
        //===============================================================================
        //===============================================================================
        //打开捕鱼类xx类游戏
        GeneralModel.prototype.showGameClass = function (tag) {
            var self = this;
            self.postEvent("ShowGameClass" /* ShowGameClass */, tag);
        };
        //----------------------------------返水相关--------------------------------------------
        GeneralModel.prototype.askRebateList = function () {
            var args = {};
            game.Net.sendMsg(5186 /* c2s_rebate_list */, args);
        };
        GeneralModel.prototype.rebateListResult = function (data) {
            var self = this;
            self.postEvent("GetRebateList" /* GetRebateList */, 0, data);
        };
        GeneralModel.prototype.askRebateLog = function () {
            var args = {};
            game.Net.sendMsg(5187 /* c2s_rebate_log */, args);
        };
        GeneralModel.prototype.rebateLogResult = function (data) {
            var self = this;
            self.postEvent("GetRebateList" /* GetRebateList */, 1, data);
        };
        GeneralModel.prototype.askRebateAwd = function () {
            var args = {};
            game.Net.sendMsg(5189 /* c2s_rebate_gain */, args);
        };
        GeneralModel.prototype.rebateAwdResult = function (data) {
            var self = this;
            if (true)
                console.log("rebateAwdResult data = ", data);
            if (data.result == 1 /* e_rmt_success */ && data.gain > 0) {
                self.postEvent("GetRebateAward" /* GetRebateAward */, data.gain);
            }
        };
        GeneralModel.prototype.askRebateDetail = function (ts) {
            var args = {};
            args.ts = ts;
            game.Net.sendMsg(5188 /* c2s_rebate_detail */, args);
        };
        GeneralModel.prototype.rebateDetailResult = function (data) {
            if (data.info) {
                this.postEvent("GetRebateDetail" /* GetRebateDetail */, data.info);
            }
        };
        // -------------------------------------- 我的钱包 客户端请求 --------------------------------------
        GeneralModel.prototype.askWalletList = function (isopen) {
            var args = {};
            game.Net.sendMsg(5194 /* c2s_wallet_list */, args);
            if (!isopen)
                this._curAskListTm = TimeUtil.getSvrMS();
        };
        GeneralModel.prototype.askReflushWallet = function (gameId) {
            var args = {};
            args.game_id = gameId;
            game.Net.sendMsg(5203 /* c2s_reflush_wallet */, args);
        };
        GeneralModel.prototype.askDepsitWallet = function (walletInfo) {
            var args = {};
            args.info = walletInfo;
            game.Net.sendMsg(5195 /* c2s_deposit_wallet */, args);
            game.BusyLayer.getInst().showBusy();
        };
        GeneralModel.prototype.askDrawWallet = function (walletInfo) {
            var args = {};
            args.info = walletInfo;
            game.Net.sendMsg(5196 /* c2s_withdraw_wallet */, args);
            game.BusyLayer.getInst().showBusy();
        };
        GeneralModel.prototype.askSingleToOther = function (walletInfo) {
            var args = {};
            args.info = walletInfo;
            game.Net.sendMsg(5197 /* c2s_single_to_other */, args);
        };
        GeneralModel.prototype.withdrawAllWallet = function () {
            var args = {};
            game.Net.sendMsg(5198 /* c2s_withdraw_all_wallet */, args);
        };
        GeneralModel.prototype.enterGame = function (gameid) {
            var args = {};
            args.gameid = gameid;
            game.Net.sendMsg(5004 /* c2s_enter_game */, args);
            game.BusyLayer.getInst().showBusy();
        };
        // -------------------------------------- 我的钱包 服务器返回 --------------------------------------
        //获取钱包列表/刷新钱包余额
        GeneralModel.prototype.walletListResult = function (data) {
            var self = this;
            if (self._walletList.length == 0) {
                self._walletList = data.infos || [];
            }
            else {
                if (data.infos) {
                    for (var j = 0, len = data.infos.length; j < len; ++j) {
                        var info = data.infos[j];
                        var hasList = false;
                        for (var i = 0; i < self._walletList.length; ++i) {
                            var walletInfo = self._walletList[i];
                            if (walletInfo.game_id == info.game_id) {
                                walletInfo.gold = info.gold;
                                hasList = true;
                            }
                        }
                        if (!hasList) {
                            self._walletList.push(info);
                        }
                    }
                }
            }
            if (data.infos) {
                self.postEvent("Game_wellet_refrsh" /* Game_wallet_refrsh */);
            }
        };
        //玩家余额存入钱包
        GeneralModel.prototype.depsitWalletResult = function (data) {
            var self = this;
            game.BusyLayer.getInst().hideBusy();
            if (data.result == 1 /* e_rmt_success */) {
                game.dataMgr.accMo.setVal("gold", data.gold);
                self.setCurGmGold(data.info);
                self.postEvent("Depsit_wallet" /* Depsit_wallet */, data.info);
            }
            else {
                if (data.result == 2 /* e_rmt_fail */) {
                    game.MsgBox.showTxt("mainLang" /* mainLang */, (1123 /* myWalletErr0 */ + data.err_code));
                }
            }
        };
        //从钱包中取款到玩家余额
        GeneralModel.prototype.drawWalletResult = function (data) {
            var self = this;
            game.BusyLayer.getInst().hideBusy();
            if (data.result == 1 /* e_rmt_success */) {
                game.dataMgr.accMo.setVal("gold", data.gold);
                self.setCurGmGold(data.info);
                self.postEvent("WithDraw_wallet" /* WithDraw_wallet */, data.info);
            }
            else {
                if (data.result == 2 /* e_rmt_fail */) {
                    game.MsgBox.showTxt("mainLang" /* mainLang */, (1123 /* myWalletErr0 */ + data.err_code));
                }
            }
        };
        //从单钱包转账到其他钱包
        GeneralModel.prototype.singleOtherResult = function (data) {
            var self = this;
            if (data.result == 1 /* e_rmt_success */) {
                self.postEvent("WithDraw_wallet" /* WithDraw_wallet */);
            }
            else {
                game.MsgBox.showTipBox(true, data.result);
            }
        };
        //刷新单个钱包
        GeneralModel.prototype.reflushWalletResult = function (data) {
            var self = this;
            if (data.result == 1 /* e_rmt_success */) {
                self.setCurGmGold(data.info);
                self.postEvent("Reflush_wallet" /* Reflush_wallet */, data.info, false);
            }
            else {
                game.MsgBox.showTipBox(true, data.result);
            }
        };
        return GeneralModel;
    }(game.DataModel));
    game.GeneralModel = GeneralModel;
    __reflect(GeneralModel.prototype, "game.GeneralModel");
})(game || (game = {}));
var game;
(function (game) {
    var GuildModel = (function (_super) {
        __extends(GuildModel, _super);
        function GuildModel() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.initRegHandle();
            self._guildData = {};
            self._askRecords = [];
            self._msgRecords = [];
            self._expendDatas = [];
            self._pointsRecords = [];
            self._roomLists = [];
            self._recordDatas = [];
            self._isChairMan = false;
            self.confNm = "conf";
            return _this;
        }
        GuildModel.prototype.onLoadConf = function (data) {
            var self = this;
            self._friendRuleConfs = data.friendRule;
            self._roomCards = data.roomCard;
        };
        Object.defineProperty(GuildModel.prototype, "guildAsks", {
            get: function () {
                return this._guildAsks;
            },
            set: function (value) {
                this._guildAsks = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GuildModel.prototype, "detailData", {
            get: function () {
                return this._detailData;
            },
            set: function (value) {
                this._detailData = value;
            },
            enumerable: true,
            configurable: true
        });
        GuildModel.prototype.getFriendRuleConfs = function () {
            return this._friendRuleConfs;
        };
        GuildModel.prototype.getRoomCardConf = function (id) {
            return this._roomCards[id];
        };
        GuildModel.prototype.initRegHandle = function () {
            var self = this;
            game.Net.regHandle(7689 /* s2c_join_guild */, self.joinFriendResult, self);
            game.Net.regHandle(50201 /* s2c_guild_data */, self.guildDataResult, self);
            game.Net.regHandle(50202 /* s2c_guild_roomcard_cnt */, self.guildPointsResult, self);
            game.Net.regHandle(50204 /* s2c_guild_member_data */, self.guildMembersResult, self);
            game.Net.regHandle(50205 /* s2c_guild_member_prop */, self.guildMebPropResult, self);
            game.Net.regHandle(50206 /* s2c_guild_ask_data */, self.guildAskDataResult, self);
            game.Net.regHandle(50207 /* s2c_guild_msg_data */, self.guildMsgDataResult, self);
            game.Net.regHandle(50208 /* s2c_guild_points_msg_data */, self.guildPointResult, self);
            game.Net.regHandle(7690 /* s2c_guild_id */, self.exitGuild, self);
            game.Net.regHandle(50203 /* s2s_guild_name */, self.modNameResult, self);
            game.Net.regHandle(50209 /* s2c_guild_mul_points */, self.mulPointResult, self);
            game.Net.regHandle(50210 /* s2c_guild_game_create */, self.createGameResult, self);
            game.Net.regHandle(50211 /* s2c_guild_game_enter_exit */, self.guildEnterGameResult, self);
            game.Net.regHandle(50212 /* s2c_guild_game_delete */, self.delGameResult, self);
            game.Net.regHandle(50213 /* s2c_guild_notice */, self.guildNoticeResult, self);
            game.Net.regHandle(7692 /* s2c_guild_refused */, self.guildRefusedResult, self);
            game.Net.regHandle(50214 /* s2c_chairman_spec_data */, self.chairmanSpecResult, self);
            game.Net.regHandle(50215 /* s2c_member_spec_data */, self.memberSpecResult, self);
            game.Net.regHandle(50216 /* s2c_guild_expends_data */, self.expendsResult, self);
            game.Net.regHandle(50217 /* s2c_master_operation_err */, self.opsErrResult, self);
            game.Net.regHandle(31600 /* s2c_replay_history_result */, self.askRePlayHisResult, self);
            game.Net.regHandle(31601 /* s2c_replay_detail_shqm */, self.replayDetailResult, self);
            game.Net.regHandle(31602 /* s2c_replay_detail_srnn */, self.replayDetSrnnResult, self);
            game.Net.regHandle(31603 /* s2c_replay_detail_land */, self.replayDetLandResult, self);
            game.Net.regHandle(31604 /* s2c_replay_detail_ermj */, self.replayDetErmjResult, self);
            game.Net.regHandle(31605 /* s2c_replay_detail_qznn_new */, self.replayDetQNewResult, self);
            game.Net.regHandle(31606 /* s2c_replay_detail_srmj */, self.replayDetSrmjResult, self);
            self.initGuildHandle();
        };
        GuildModel.prototype.initGuildHandle = function () {
            var self = this;
            game.Net.regHandle(7504 /* s2c_enter_game_result */, self.enterGameResult, self);
        };
        GuildModel.prototype.isChairman = function () {
            return this._isChairMan;
        };
        /**
         *
         * @param type 房卡还是上分数据
         */
        GuildModel.prototype.getDataByType = function (type, monthId, curDay) {
            var self = this;
            if (type == 0) {
                var exdDayData = self.getExdDayData(monthId, curDay);
                return exdDayData[0];
            }
            else {
                var pointsData = self.getPointDayData(monthId, curDay);
                return pointsData[0];
            }
        };
        GuildModel.prototype.getExdDayData = function (monthId, dayId) {
            var self = this;
            var tmpData = [];
            var roomCard = 0;
            var expendDatas = self._expendDatas;
            for (var i = 0; i < expendDatas.length; i++) {
                var expendData = expendDatas[i];
                var time = expendData.time * 1000;
                var expendDate = new Date(time);
                var dateMonth = expendDate.getMonth() + 1;
                var expendDay = expendDate.getDate();
                if (monthId == dateMonth && expendDay == dayId) {
                    tmpData.push(expendData);
                    roomCard += (expendData.roomcard_cnt || 0);
                }
            }
            return [tmpData, roomCard];
        };
        /**
         *
         */
        /**
         *
         * @param monthId 月份id
         */
        GuildModel.prototype.getExdMonthData = function (monthId) {
            var self = this;
            var tmpData = [];
            var roomCard = 0;
            var expendDatas = self._expendDatas;
            for (var i = 0; i < expendDatas.length; i++) {
                var expendData = expendDatas[i];
                var time = expendData.time * 1000;
                var expendDate = new Date(time);
                var expendMonth = expendDate.getMonth() + 1;
                if (expendMonth == monthId) {
                    tmpData.push(expendData);
                    roomCard += (expendData.roomcard_cnt || 0);
                }
            }
            return [tmpData, roomCard];
        };
        /**
         *
         * @param dayId 月份id
         */
        GuildModel.prototype.getPointDayData = function (monthId, dayId) {
            var self = this;
            var tmpData = [];
            var upTotalPoint = 0;
            var downTotalPoint = 0;
            var pointsRecords = self._pointsRecords;
            for (var i = 0; i < pointsRecords.length; i++) {
                var pointsRecord = pointsRecords[i];
                var time = pointsRecord.time * 1000;
                var expendDate = new Date(time);
                var expendDay = expendDate.getDate();
                var dateMonth = expendDate.getMonth() + 1;
                if (monthId == dateMonth && expendDay == dayId) {
                    tmpData.push(pointsRecord);
                    var points = pointsRecord.points;
                    if (points > 0) {
                        upTotalPoint += points;
                    }
                    else {
                        downTotalPoint += points;
                    }
                }
            }
            return [tmpData, upTotalPoint, downTotalPoint];
        };
        /**
         *
         * @param monthId 月份id
         */
        GuildModel.prototype.getPointMonthData = function (monthId) {
            var self = this;
            var tmpData = [];
            var upTotalPoint = 0;
            var downTotalPoint = 0;
            var pointsRecords = self._pointsRecords;
            for (var i = 0; i < pointsRecords.length; i++) {
                var pointsRecord = pointsRecords[i];
                var time = pointsRecord.time * 1000;
                var expendDate = new Date(time);
                var expendMonth = expendDate.getMonth() + 1;
                if (expendMonth == monthId) {
                    tmpData.push(pointsRecord);
                    var points = pointsRecord.points;
                    if (points > 0) {
                        upTotalPoint += points;
                    }
                    else {
                        downTotalPoint += points;
                    }
                }
            }
            return [tmpData, upTotalPoint, downTotalPoint];
        };
        /**
         *
         * @param playId 玩家id
         */
        GuildModel.prototype.getRoomNoByPlayId = function (playId) {
            var self = this;
            var list = self._roomLists;
            for (var i = 0; i < list.length; i++) {
                var curRoom = list[i];
                var plays = curRoom.players;
                var room_no = String(curRoom.room_no);
                for (var j = 0, len = plays.length; j < len; j++) {
                    var player = plays[j];
                    if (playId == player) {
                        var guild_id = game.dataMgr.accMo.getData().guild_id;
                        var roomNum = room_no.split("-" + guild_id)[1];
                        return roomNum;
                    }
                }
            }
            return "";
        };
        GuildModel.prototype.getTotalPointById = function (playId) {
            var self = this;
            var pointRecords = self._pointsRecords;
            var upPointNum = 0;
            var downPointNum = 0;
            for (var i = 0, len = pointRecords.length; i < len; i++) {
                var pointRecord = pointRecords[i];
                if (pointRecord.player.player_id == playId) {
                    if (pointRecord.points > 0) {
                        upPointNum += pointRecord.points;
                    }
                    else {
                        downPointNum += pointRecord.points;
                    }
                }
            }
            return [upPointNum, downPointNum];
        };
        GuildModel.prototype.getPointRdById = function (playId) {
            var self = this;
            var pointRecords = self._pointsRecords;
            var records = [];
            for (var i = 0, len = pointRecords.length; i < len; i++) {
                var pointRecord = pointRecords[i];
                if (pointRecord.player.player_id == playId) {
                    records.push(pointRecord);
                }
            }
            return records;
        };
        GuildModel.prototype.getAllMemberPoint = function () {
            var self = this;
            var totalPoint = 0;
            var guildMembers = self._guildData.member;
            for (var i = 0, len = guildMembers.length; i < len; i++) {
                var guildMember = guildMembers[i];
                totalPoint += guildMember.points;
            }
            return totalPoint;
        };
        GuildModel.prototype.getGuildData = function () {
            return this._guildData;
        };
        GuildModel.prototype.getAskRecordData = function () {
            return this._askRecords;
        };
        GuildModel.prototype.getRoomLists = function () {
            return this._roomLists;
        };
        GuildModel.prototype.getGuildMsgData = function () {
            return this._msgRecords;
        };
        GuildModel.prototype.getRecordDatas = function () {
            return this._recordDatas;
        };
        GuildModel.prototype.getPointsData = function () {
            return this._pointsRecords;
        };
        //加入亲友圈
        GuildModel.prototype.joinFriendCircle = function (id) {
            var args = {};
            args.guild_id = this._joinGuildId = id;
            game.Net.sendMsg(5179 /* c2s_join_guild */, args);
            game.BusyLayer.getInst().showBusy();
        };
        //会长操作
        /**
         *
         * @param playId 玩家id
         * @param ops   //会长操作
                        enum e_master_ops_type {
                            e_mot_agree = 1,
                            e_mot_refuse = 2,
                            e_mot_points = 3,
                            e_mot_kick = 4,
                            e_mot_dismiss = 5
                        }
         * @param param 上分, 下分数量
         */
        GuildModel.prototype.masterOperation = function (playId, ops, param) {
            var args = {};
            args.player_id = playId;
            args.ops = ops;
            args.param = param;
            game.Net.sendMsg(50001 /* c2s_master_operation */, args);
        };
        //成员退出
        GuildModel.prototype.askLeaveGuild = function () {
            var args = {};
            args.ops = 1 /* e_mot_quit */;
            game.Net.sendMsg(50002 /* c2s_member_operation */, args);
        };
        //修改公会名
        GuildModel.prototype.modName = function (name) {
            var args = {};
            args.new_name = name;
            game.Net.sendMsg(50005 /* c2c_guild_name */, args);
        };
        //加入亲友圈游戏
        GuildModel.prototype.joinGuildGm = function (room_no) {
            var args = {};
            args.roomcard_number = room_no;
            game.Net.sendMsg(50003 /* c2s_join_guild_game */, args);
            game.BusyLayer.getInst().showBusy();
        };
        //发布公告
        GuildModel.prototype.sendNotice = function (new_notice) {
            var args = {};
            args.new_notice = new_notice;
            game.Net.sendMsg(50004 /* c2s_guild_notice */, args);
        };
        //清除公会气泡
        GuildModel.prototype.clearGuildIcon = function () {
            game.dataMgr.accMo.setVal("guild_icon", false);
            var args = {};
            game.Net.sendMsg(5190 /* c2s_clear_guild_icon */, args);
        };
        //------------------------------------ 服务器返回  ------------------------------------
        //加入亲友圈返回
        GuildModel.prototype.joinFriendResult = function (msg) {
            var self = this;
            game.BusyLayer.getInst().hideBusy();
            if (msg.result == 1 /* e_rmt_success */) {
                self.postEvent("join_friend_circle" /* JOIN_FRIEND_CIRCLE */);
                //添加记录
                var newAskStatus = {};
                newAskStatus.time = msg.param;
                newAskStatus.guild_id = self._joinGuildId;
                newAskStatus.ask_status = 0;
                self._guildAsks.push(newAskStatus);
                game.MsgBox.showTipBox(false, 1025 /* waitReview */, "mainLang" /* mainLang */);
            }
            else {
                game.MsgBox.showTipBox(true, msg.result);
            }
        };
        //公告返回
        GuildModel.prototype.guildNoticeResult = function (msg) {
            var self = this;
            self._guildData.guild_notice = msg.new_notice;
            game.GameUtil.setLocal("FRIEND_NOTICE_READ" /* FRIEND_NOTICE_READ */, false);
            self.postEvent("up_notice" /* UP_NOTICE */, msg.new_notice);
        };
        //会长拒绝加入公会返回
        GuildModel.prototype.guildRefusedResult = function (msg) {
            var self = this;
            var guildAsks = self._guildAsks;
            for (var i = 0, len = guildAsks.length; i < len; i++) {
                var guildAsk = guildAsks[i];
                if (guildAsk.guild_id == msg.guild_id) {
                    guildAsk.ask_status = 1;
                }
            }
            self.postEvent("chairman_refused" /* CHAIRMAN_REFUSED */);
            game.dataMgr.accMo.setVal("guild_icon", true);
        };
        //公会数据返回
        GuildModel.prototype.guildDataResult = function (msg) {
            var self = this;
            self._guildData = msg;
            self._roomLists = msg.games || [];
            //将玩家身上的guild_id属性设置一下
            var accData = game.dataMgr.accMo.getData();
            if (accData) {
                if (!accData.guild_id) {
                    game.dataMgr.accMo.setVal("guild_icon", true);
                }
                accData.guild_id = msg.guild_id;
            }
            self._guildAsks = [];
        };
        GuildModel.prototype.chairmanSpecResult = function (msg) {
            var self = this;
            self._askRecords = msg.ask || [];
            self._msgRecords = msg.guild_msg || [];
            self._pointsRecords = msg.points_msg || [];
            self._expendDatas = msg.expends || [];
            self._isChairMan = true;
        };
        GuildModel.prototype.memberSpecResult = function (msg) {
            var self = this;
            self._pointsRecords = msg.points_msg || [];
        };
        GuildModel.prototype.expendsResult = function (msg) {
            var self = this;
            if (msg.expends_msg) {
                self._expendDatas = self._expendDatas.concat(msg.expends_msg);
            }
            self.postEvent("extends_add" /* EXTENDS_ADD */);
        };
        //公会房卡数返回
        GuildModel.prototype.guildPointsResult = function (msg) {
            var self = this;
            self._guildData.roomcard_cnt = msg.roomcard_cnt;
            self.postEvent("member_change" /* MEMBER_CHANGE */);
        };
        //公会成员数据返回
        GuildModel.prototype.guildMembersResult = function (msg) {
            var self = this;
            var curMember = msg.member;
            var guildMembers = self._guildData.member;
            for (var i = 0, len = guildMembers.length; i < len; i++) {
                var tmpMember = guildMembers[i];
                if (tmpMember.player.player_id == curMember.player.player_id) {
                    guildMembers[i] = curMember;
                    self.postEvent("member_change" /* MEMBER_CHANGE */);
                    return;
                }
            }
            self._guildData.member.push(curMember);
            self.postEvent("member_change" /* MEMBER_CHANGE */);
        };
        /**
         *  成员属性变化
         * @param msg
         * enum e_member_prop {
                e_mp_online = 1;						//在线状态
                e_mp_gaming_id = 2;						//游戏id
            }
         */
        GuildModel.prototype.guildMebPropResult = function (msg) {
            var self = this;
            var player_id = msg.player_id;
            var guildMembers = self._guildData.member;
            if (guildMembers) {
                for (var i = 0, len = guildMembers.length; i < len; i++) {
                    var tmpMember = guildMembers[i];
                    if (tmpMember.player.player_id == player_id) {
                        if (msg.prop == 2 /* e_mp_gaming_id */) {
                            tmpMember.gaming_id = msg.value;
                        }
                        else {
                            tmpMember.online = msg.value == 1;
                        }
                    }
                }
                self.postEvent("member_change" /* MEMBER_CHANGE */);
            }
        };
        //公会申请批准数据(新加)
        GuildModel.prototype.guildAskDataResult = function (msg) {
            var self = this;
            if (msg.ask) {
                self._askRecords = self._askRecords.concat(msg.ask);
            }
            self.postEvent("ask_record" /* ASK_RECORD */);
        };
        GuildModel.prototype.opsErrResult = function (msg) {
            var self = this;
            var askRecords = self._askRecords;
            if (msg.result == 150 /* e_rmt_guild_ask_invalid */) {
                for (var i = 0; i < askRecords.length; i++) {
                    var askRecord = askRecords[i];
                    if (askRecord.player.player_id == msg.param) {
                        self._askRecords.splice(i, 1);
                        i--;
                    }
                }
                self.postEvent("msg_back" /* MSG_BACK */);
            }
            game.MsgBox.showTipBox(true, msg.result);
        };
        //公会消息数据(新加)
        GuildModel.prototype.guildMsgDataResult = function (msg) {
            var self = this;
            var guild_msg = msg.guild_msg;
            self._msgRecords = self._msgRecords.concat(guild_msg);
            //删除申请消息
            var askRecords = self._askRecords;
            var guild_Data = self._guildData;
            var i = 0;
            if (guild_msg.msg == 1 /* e_gmt_agree */ || guild_msg.msg == 3 /* e_gmt_refuse */ || guild_msg.msg == 2 /* e_gmt_has_guild */) {
                for (; i < askRecords.length; i++) {
                    var askRecord = askRecords[i];
                    if (askRecord.player.player_id == guild_msg.player.player_id) {
                        self._askRecords.splice(i, 1);
                        i--;
                    }
                }
            }
            else if (guild_msg.msg == 4 /* e_gmt_quit */) {
                i = 0;
                for (; i < guild_Data.member.length; i++) {
                    var member = guild_Data.member[i];
                    if (member.player.player_id == guild_msg.player.player_id) {
                        self._guildData.member.splice(i, 1);
                        i--;
                    }
                }
            }
            if (guild_msg.msg != 4 /* e_gmt_quit */) {
                self.postEvent("msg_back" /* MSG_BACK */);
                if (guild_msg.msg == 2 /* e_gmt_has_guild */) {
                    game.MsgBox.showTxt("mainLang" /* mainLang */, 984 /* friendOverJoin */);
                }
            }
            else {
                self.postEvent("member_change" /* MEMBER_CHANGE */);
            }
        };
        //公会上下分消息数据(新加)
        GuildModel.prototype.guildPointResult = function (msg) {
            var self = this;
            self._pointsRecords = self._pointsRecords.concat(msg.points_msg);
            self.postEvent("point_back" /* POINT_RECORD_BACK */);
        };
        //退出公会
        GuildModel.prototype.exitGuild = function (msg) {
            var self = this;
            if (msg.id == 0) {
                self._isChairMan = false;
                self._askRecords = [];
                game.dataMgr.accMo.setVal("guild_id", 0);
                self.postEvent("exit_guild" /* EXIT_GUILD */);
            }
        };
        //修改公会名
        GuildModel.prototype.modNameResult = function (msg) {
            var self = this;
            var guildData = self._guildData;
            if (msg.result == 1 /* e_rmt_success */) {
                guildData.guild_name = msg.new_name;
                if (!guildData.changed_name) {
                    self._guildData.changed_name = true;
                }
                else {
                    var curGold = game.dataMgr.accMo.getData().gold;
                    game.dataMgr.accMo.setVal("gold", (curGold - 500 /* modifyNicknameCost */));
                }
                self.postEvent("mod_guild_name" /* MOD_GUILD_NAME */);
            }
            else {
                game.MsgBox.showTipBox(true, msg.result);
            }
        };
        //所有玩家的积分情况
        GuildModel.prototype.mulPointResult = function (msg) {
            var self = this;
            var mul_points = msg.multi_points;
            if (mul_points) {
                var guildMembers = self._guildData.member;
                for (var i = 0, len = guildMembers.length; i < len; i++) {
                    var tmpMember = guildMembers[i];
                    if (self._isChairMan && mul_points.length == 1) {
                        var mul_point = mul_points[0];
                        if (tmpMember.player.player_id == mul_point.player_id) {
                            if (tmpMember.points < mul_point.points) {
                                game.MsgBox.showTxt("mainLang" /* mainLang */, 967 /* upPointSucc */);
                            }
                            else {
                                game.MsgBox.showTxt("mainLang" /* mainLang */, 968 /* downPointSucc */);
                            }
                        }
                    }
                    for (var j = 0, len_1 = mul_points.length; j < len_1; j++) {
                        var svrPoints = mul_points[j];
                        if (tmpMember.player.player_id == svrPoints.player_id) {
                            tmpMember.points = svrPoints.points;
                        }
                    }
                }
                self.postEvent("up_down_point" /* UP_DOWN_POINT */, mul_points);
                self.postEvent("member_change" /* MEMBER_CHANGE */);
            }
        };
        //创建游戏
        GuildModel.prototype.createGameResult = function (msg) {
            var self = this;
            var list = {};
            list.room_no = msg.room_no;
            list.game_id = msg.game_id;
            list.players = [];
            list.room_type = msg.room_type;
            list.sel_config = msg.sel_config;
            list.players.push(msg.player_id);
            self._roomLists.push(list);
            self.postEvent("room_list_update" /* ROOM_LIST_UPDATE */);
        };
        //进入退出游戏
        GuildModel.prototype.guildEnterGameResult = function (msg) {
            var self = this;
            var list = self._roomLists;
            var msgPlayerId = msg.player_id;
            for (var i = 0; i < list.length; i++) {
                var curRoom = list[i];
                if (curRoom.room_no == msg.room_no) {
                    var playerIds = curRoom.players;
                    if (msg.enter) {
                        playerIds.push(msgPlayerId);
                    }
                    else {
                        var idx = playerIds.indexOf(msgPlayerId);
                        playerIds.splice(idx, 1);
                    }
                }
            }
            self.postEvent("room_list_update" /* ROOM_LIST_UPDATE */);
        };
        //销毁游戏
        GuildModel.prototype.delGameResult = function (msg) {
            var self = this;
            var list = self._roomLists;
            for (var i = 0; i < list.length; i++) {
                var curRoom = list[i];
                if (curRoom.room_no == msg.room_no) {
                    list.splice(i, 1);
                    i--;
                }
            }
            self.postEvent("room_list_update" /* ROOM_LIST_UPDATE */);
        };
        //---------------------------------- 房卡类型游戏消息 ----------------------------------------
        /**
         *
         * @param id 游戏id
         */
        GuildModel.prototype.createRoom = function (cfg) {
            var args = {};
            args.gameid = cfg.game_id;
            args.sel_config = cfg;
            game.Net.sendMsg(5004 /* c2s_enter_game */, args);
            game.BusyLayer.getInst().showBusy();
        };
        GuildModel.prototype.leaveRoom = function () {
            var args = {};
            game.Net.sendMsg(5008 /* c2s_leave_game */, args);
        };
        /**
         *
         * @param roomCardId 加入房卡游戏的房间id
         */
        GuildModel.prototype.joinRoom = function (roomCardId) {
            var args = {};
            args.roomcard_num = roomCardId;
            game.Net.sendMsg(5004 /* c2s_enter_game */, args);
            game.BusyLayer.getInst().showBusy();
        };
        //请求回放记录
        GuildModel.prototype.askRoomReplayHistory = function (userId, guild_id) {
            var args = {};
            args.player_id = userId;
            args.guild_id = guild_id;
            game.Net.sendMsg(30004 /* c2gs_replay_history */, args);
            game.BusyLayer.getInst().showBusy();
        };
        GuildModel.prototype.askReplayDetail = function (gameId, logId) {
            var args = {};
            args.game_id = gameId;
            args.log_id = logId;
            game.Net.sendMsg(30005 /* c2gs_replay_detail */, args);
        };
        //回放记录返回
        GuildModel.prototype.askRePlayHisResult = function (msg) {
            var self = this;
            game.BusyLayer.getInst().hideBusy();
            self._recordDatas = msg.records;
            self.postEvent("replay_history" /* replay_history */);
        };
        //上海敲麻请求细节返回
        GuildModel.prototype.replayDetailResult = function (msg) {
            var self = this;
            self.postEvent("replay_detail" /* replay_detail */, msg);
        };
        //四人牛牛请求细节返回
        GuildModel.prototype.replayDetSrnnResult = function (msg) {
            var self = this;
            self.postEvent("replay_detail" /* replay_detail */, msg);
        };
        //斗地主请求细节返回
        GuildModel.prototype.replayDetLandResult = function (msg) {
            var self = this;
            self.postEvent("replay_detail" /* replay_detail */, msg);
        };
        //二人麻将请求细节返回
        GuildModel.prototype.replayDetErmjResult = function (msg) {
            var self = this;
            self.postEvent("replay_detail" /* replay_detail */, msg);
        };
        //抢庄牛牛请求细节返回
        GuildModel.prototype.replayDetQNewResult = function (msg) {
            var self = this;
            self.postEvent("replay_detail" /* replay_detail */, msg);
        };
        //抢庄牛牛请求细节返回
        GuildModel.prototype.replayDetSrmjResult = function (msg) {
            var self = this;
            self.postEvent("replay_detail" /* replay_detail */, msg);
        };
        // ------------------------------------ 房卡类型游戏消息返回 ----------------------------------------------
        GuildModel.prototype.enterGameResult = function (msg) {
            var self = this;
            var gameId = msg.game_id;
            var gameMo = game.dataMgr.gameMo;
            var curGameData = gameMo.getGameData(gameId);
            var result = msg.result;
            game.BusyLayer.getInst().hideBusy();
            if (result == 142 /* e_rmt_roomcard_wait_guild */) {
                return;
            }
            if (curGameData && curGameData.conf.class2.indexOf(7 /* create_room */) != -1) {
                var updateData = curGameData.update;
                if (result == 1 /* e_rmt_success */) {
                    if (updateData.state == 0 /* NONE */) {
                        self.postEvent("room_card" /* ROOM_CARD */, gameId);
                        // gameScene.startGame(gameId);
                    }
                    else if (updateData.state == 2 /* UPDATING */) {
                    }
                    else {
                        //下载失败等于重新下载
                        gameMo.startUpdateGmd(gameId);
                        game.gameScene.openPopup(new game.UpdataGame(gameId), null, true);
                    }
                }
                else {
                    if (result == 124 /* e_rmt_server_down */) {
                        game.MsgBox.showSafeGuard(msg.server_down_start, msg.server_down_end);
                    }
                    else if (result == 146 /* e_rmt_roomcard_not_enough */) {
                        game.MsgBox.showGoldBox("mainLang" /* mainLang */, 975 /* roomCardNotEnough */, self);
                    }
                    else {
                        game.MsgBox.showTipBox(true, result);
                    }
                }
            }
            else {
                if (result == 1 /* e_rmt_success */) {
                    if (CONF.isNative) {
                        var soundMo = game.dataMgr.soundMo;
                        var curState = soundMo.getState();
                        self._oldMusicState = curState;
                        if (curState) {
                            soundMo.setState(!curState);
                        }
                    }
                    var curOrientation = curGameData.conf.orientation;
                    URLUtil.openURL(msg.game_url, { webview: "wk", orientation: curOrientation || "sensor", showbar: false, usesdk: false, showfloatbar: true, eventfunc: "game.dataMgr.guildMo.openUrlCB(event);", enableobserver: false, enablewkpost: true });
                }
                else {
                    if (result == 124 /* e_rmt_server_down */) {
                        game.MsgBox.showSafeGuard(msg.server_down_start, msg.server_down_end);
                    }
                    else if (result == 146 /* e_rmt_roomcard_not_enough */) {
                        game.MsgBox.showGoldBox("mainLang" /* mainLang */, 975 /* roomCardNotEnough */, self);
                    }
                    else if (result == 145 /* e_rmt_roomcard_kicked_player */) {
                        game.MsgBox.showPrintfTxt("mainLang" /* mainLang */, 985 /* friendPickPlay */, 16777215 /* white */, msg.result_param);
                    }
                    else {
                        game.MsgBox.showTipBox(true, result);
                    }
                }
            }
        };
        GuildModel.prototype.openUrlCB = function (event) {
            var self = this;
            var soundMo = game.dataMgr.soundMo;
            if (event.eventType == "10") {
                URLUtil.nativeHandler("closeWebView");
                if (self._oldMusicState) {
                    soundMo.setState(self._oldMusicState);
                }
            }
            else if (event.eventType == "1") {
                //如果是包含在别人网页上面，则不能退出
                var hasTheExit = event.eventParam.indexOf("http://chundenongzi.com/exitting.html");
                var closeWebFlag = hasTheExit == 0;
                if (closeWebFlag) {
                    URLUtil.nativeHandler("closeWebView");
                    if (self._oldMusicState) {
                        soundMo.setState(self._oldMusicState);
                    }
                }
            }
        };
        return GuildModel;
    }(game.DataModel));
    game.GuildModel = GuildModel;
    __reflect(GuildModel.prototype, "game.GuildModel");
})(game || (game = {}));
var game;
(function (game) {
    var MailModel = (function (_super) {
        __extends(MailModel, _super);
        function MailModel() {
            var _this = _super.call(this) || this;
            _this.initRegHandle();
            return _this;
        }
        MailModel.prototype.initRegHandle = function () {
            var self = this;
            game.Net.regHandle(7586 /* s2c_ask_message_result */, self.askMsgResult, self);
            game.Net.regHandle(7587 /* s2c_delete_message_result */, self.deleteMsgResult, self);
            game.Net.regHandle(7588 /* s2c_read_message_result */, self.readMsgResult, self);
        };
        Object.defineProperty(MailModel.prototype, "list", {
            get: function () {
                return this._mailList || [];
            },
            enumerable: true,
            configurable: true
        });
        MailModel.prototype.rmvList = function (list) {
            var mailList = this._mailList;
            for (var i = 0; i < list.length; i++) {
                var id = list[i];
                for (var j = 0; j < mailList.length; j++) {
                    if (id == mailList[j].id)
                        mailList.splice(j, 1);
                }
            }
        };
        //标记邮件已读
        MailModel.prototype.setReadMail = function (id) {
            var self = this;
            var mailList = self._mailList;
            for (var i = 0; i < mailList.length; i++) {
                var mailInfo = mailList[i];
                if (id == mailInfo.id)
                    mailInfo.read = 1;
            }
        };
        // ------------------------------客户端接收消息--------------------------------------
        //获取邮件列表返回
        MailModel.prototype.askMsgResult = function (data) {
            var self = this;
            var list = self._mailList;
            var dataList = data.msg_list;
            if (data.result) {
                if (list) {
                    for (var i = 0; i < dataList.length; i++) {
                        for (var j = 0; j < list.length; j++) {
                            var data_2 = dataList[i];
                            if (data_2) {
                                if (list[j].id == data_2.id) {
                                    dataList.splice(i);
                                }
                            }
                        }
                    }
                    self._mailList = list.concat(dataList);
                }
                else {
                    self._mailList = data.msg_list;
                }
                self.postEvent("mail_list" /* list */);
                self.postEvent("mailupdate" /* update */);
            }
        };
        //删除邮件返回
        MailModel.prototype.deleteMsgResult = function (data) {
            var self = this;
            if (data.result) {
                //邮件删除成功
                var tip = TRain.langMgr.getTxt("mainLang" /* mainLang */, 690 /* deleteMailSuccess */); //邮件删除成功
                // TipsMgr.showPrompt(tip);
                game.MsgBox.showTipBox(false, 690 /* deleteMailSuccess */, "mainLang" /* mainLang */, tip);
                self.rmvList(self._rmvList);
                self.postEvent("mail_delete" /* delete */);
            }
        };
        //读取邮件返回
        MailModel.prototype.readMsgResult = function (data) {
            var self = this;
            if (data.result == 1 /* e_rmt_success */) {
                self.setReadMail(data.id);
                //获取这封邮件里的钱
                var mailList = self._mailList;
                for (var i = 0; i < mailList.length; i++) {
                    var mailInfo = mailList[i];
                    if (data.id == mailInfo.id) {
                        var items = mailInfo.items;
                        if (items) {
                            var count = 0;
                            for (var i_1 = 0, len = items.length; i_1 < len; i_1++) {
                                var item = items[i_1];
                                count += item.count;
                            }
                            game.dataMgr.accMo.addVal("gold", count);
                        }
                    }
                }
                self.postEvent("read_mail" /* read */);
                self.postEvent("mailupdate" /* update */);
            }
        };
        // ------------------------------客户端发消息--------------------------------------
        //发送获取邮件列表的消息
        MailModel.prototype.askMessage = function () {
            var args = {};
            game.Net.sendMsg(5080 /* c2s_ask_message */, args);
        };
        //删除邮件的消息
        MailModel.prototype.deleteMessage = function (list) {
            var args = {};
            args.delete_list = list;
            this._rmvList = list;
            game.Net.sendMsg(5081 /* c2s_delete_message */, args);
        };
        //读取邮件
        MailModel.prototype.readMessage = function (id) {
            var args = {};
            args.id = id;
            game.Net.sendMsg(5082 /* c2s_read_message */, args);
        };
        return MailModel;
    }(game.DataModel));
    game.MailModel = MailModel;
    __reflect(MailModel.prototype, "game.MailModel");
})(game || (game = {}));
// module game {
//     // export const enum NotifyMo_EVT{
//     //     got_notify = "new"
//     // }
//     export class NotifyModel extends Notification{
//         private _notifys:NET_CONF.s2c_w2c_notify[]; //广播
//         constructor(){
//             super();
//             let self = this;
//             self._notifys = [];
//             //notifiCenter.addListener( AccountMo_EVT.w2c_notify,self.onNotify, self );
//         }
//         private onNotify( data:NET_CONF.s2c_w2c_notify ){
//             let self = this;
//             self._notifys.push( data );
//             self.postEvent( NotifyMo_EVT.got_notify );
//         }
//         public popNotify():NET_CONF.s2c_w2c_notify{
//             return this._notifys.shift();
//         }
//     }
// } 
var game;
(function (game) {
    var RollGoldModel = (function () {
        function RollGoldModel() {
            var self = this;
            self._time = 50;
            self._gapNum = 5;
        }
        RollGoldModel.prototype.init = function (betAreaNum, isBit, isNeedYuan) {
            var self = this;
            self._betAreaNum = betAreaNum;
            self._goldList = [];
            for (var i = 0; i < betAreaNum; i++) {
                self._goldList.push(0);
            }
            self._goldList2 = [];
            for (var i = 0; i < betAreaNum; i++) {
                self._goldList2.push(0);
            }
            self._isBit = isBit;
            self._isNeedYuan = isNeedYuan;
        };
        RollGoldModel.prototype.initGold = function (gold) {
            var self = this;
            self._goldList = gold.concat();
            self._goldList2 = gold.concat();
        };
        RollGoldModel.prototype.reset = function () {
            var self = this;
            self._goldList = [];
            for (var i = 0; i < self._betAreaNum; i++) {
                self._goldList.push(0);
            }
            self._goldList2 = [];
            for (var i = 0; i < self._betAreaNum; i++) {
                self._goldList2.push(0);
            }
        };
        /**
         * @param index 0~x
         * @param gold 没有/100  就是差值
         */
        RollGoldModel.prototype.setCurGold = function (index, gold, target, thisObj, flag) {
            var self = this;
            if (gold <= 0) {
                return;
            }
            // if (self._goldList[index] < self._goldList2[index]) {
            //     self._goldList[index] = self._goldList2[index];
            //     self.setData(self._goldList[index], index);
            // }
            self._goldList2[index] = self._goldList[index] + gold; //实际增加一次的最终值
            var goldNum = Math.floor(gold / self._gapNum);
            var _loop_1 = function (i) {
                self._goldList[index] += goldNum;
                var value = 0;
                if (i == self._gapNum - 1) {
                    if (self._goldList[index] != self._goldList2[index]) {
                        value = self._goldList2[index];
                    }
                    else {
                        value = self._goldList[index];
                    }
                }
                else {
                    value = self._goldList[index];
                }
                var num = TRain.core.addDelayDo(function () {
                    target.text = self.setData(value, index);
                    TRain.core.rmvDelayDoByID(num);
                }, thisObj, self._time * i, flag);
            };
            for (var i = 0; i < self._gapNum; i++) {
                _loop_1(i);
            }
        };
        RollGoldModel.prototype.setData = function (gold, index) {
            var self = this;
            var name = !self._isBit ? TRain.langMgr.getTxt("mainLang" /* mainLang */ + "", 201 /* RMBText */) : "y" /* y */;
            if (!self._isNeedYuan)
                name = "";
            return Math.floor(game.DataFormat.convertGold(gold)).toString() + name;
        };
        return RollGoldModel;
    }());
    game.RollGoldModel = RollGoldModel;
    __reflect(RollGoldModel.prototype, "game.RollGoldModel");
    game.rollGoldMgr = new RollGoldModel;
})(game || (game = {}));
var game;
(function (game) {
    var RouteLineModel = (function (_super) {
        __extends(RouteLineModel, _super);
        /**
         *
         * @param tpCnt 类型数量
         * @param maxRow 最大局数
         * @param maxNotHit 最大未命中数
         */
        function RouteLineModel(tpCnt, maxRow, maxHit) {
            var _this = _super.call(this) || this;
            var self = _this;
            self._historys = [];
            self.tps = [];
            self.hits = [];
            self._tpCnt = tpCnt || 8;
            self._maxRow = maxRow || 100;
            self._maxNHit = maxHit || 50;
            return _this;
        }
        Object.defineProperty(RouteLineModel.prototype, "historys", {
            get: function () {
                return this._historys;
            },
            //设置 将会重置数据
            set: function (datas) {
                var self = this;
                self._historys = datas;
                self.tps.length = 0;
                var hits = self.hits;
                for (var i = 0, len = hits.length; i < len; ++i) {
                    CacheUtil.freeArr(hits[i]);
                }
                hits.length = 0;
                for (var i = 0, len = datas.length; i < len; ++i) {
                    var tp = self.history2Tp(datas[i]);
                    self._addHistory(tp);
                }
                self.delayPostEvent("d_change" /* DATA_CHANGE */, 0);
            },
            enumerable: true,
            configurable: true
        });
        RouteLineModel.prototype.addHistory = function (data) {
            var self = this;
            var historys = self._historys;
            historys.push(data);
            if (historys.length > self._maxRow) {
                self._shiftHistory();
            }
            var tp = self.history2Tp(data);
            self._addHistory(tp);
            self.delayPostEvent("d_change" /* DATA_CHANGE */, 0);
        };
        RouteLineModel.prototype._addHistory = function (tp) {
            var self = this;
            var newRowDatas = CacheUtil.getArr();
            var hits = self.hits;
            newRowDatas[tp] = 0;
            var tpCnt = self._tpCnt;
            var row = hits.length;
            if (row > 0) {
                var maxNotHit = self._maxNHit;
                var lastRowDatas = hits[row - 1];
                for (var i = 0; i < tpCnt; ++i) {
                    if (i != tp) {
                        var lastHitCnt = lastRowDatas[i];
                        newRowDatas[i] = lastHitCnt < maxNotHit ? lastHitCnt + 1 : maxNotHit;
                    }
                }
            }
            else {
                for (var i = 0; i < tpCnt; ++i) {
                    if (i != tp)
                        newRowDatas[i] = 1;
                }
            }
            hits.push(newRowDatas);
            self.tps.push(tp);
        };
        RouteLineModel.prototype._shiftHistory = function () {
            var self = this;
            self._historys.shift();
            self.tps.shift();
            var tmpTps = CacheUtil.getArr();
            var i = 0, len = 0, j = 0;
            var tpCnt = self._tpCnt;
            for (; i < tpCnt; ++i) {
                tmpTps.push(i);
            }
            var hits = self.hits;
            CacheUtil.freeArr(hits.shift());
            for (i = 0, len = hits.length; i < len; ++i) {
                var rowDatas = hits[i];
                for (j = tmpTps.length - 1; j >= 0; --j) {
                    var tp = tmpTps[j];
                    var hitTp = rowDatas[tp];
                    if (hitTp <= 1) {
                        tmpTps.splice(j, 1);
                    }
                    else {
                        if (hitTp == self._maxNHit) {
                            tmpTps.splice(j, 1);
                        }
                        rowDatas[tp] = hitTp - 1;
                    }
                }
                if (tmpTps.length <= 0)
                    break;
            }
            CacheUtil.freeArr(tmpTps);
        };
        return RouteLineModel;
    }(game.Notification));
    game.RouteLineModel = RouteLineModel;
    __reflect(RouteLineModel.prototype, "game.RouteLineModel");
})(game || (game = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var Main = (function (_super) {
    __extends(Main, _super);
    function Main() {
        var _this = _super.call(this) || this;
        var self = _this;
        egret.TextField.default_fontFamily = "SimHei";
        var os = egret.Capabilities.os;
        var currOS;
        switch (os) {
            case "iOS":
                currOS = 1 /* iOS */;
                break;
            case "Android":
                currOS = 2 /* Android */;
                break;
            case "Windows Phone":
                currOS = 3 /* WinPhone */;
                break;
            case "Windows PC":
                currOS = 4 /* WinPC */;
                break;
            case "Mac OS":
                currOS = 5 /* MacOS */;
                break;
            default:
                break;
        }
        game.GameUtil.os = currOS;
        //设置加载进度界面
        // let loadingUI = self.loadingView = new LoadingUI();
        // self.addChild(loadingUI);
        //初始化Resource资源加载库
        var webVerCtrl = new TRain.WebVerController();
        webVerCtrl.addHome("nover");
        RES.regVerCtrl(webVerCtrl);
        if (true) {
            self.loadRes();
            RES.getUrlResAsync("theme.json", "json" /* JSON */, self.onThemeFin, self);
        }
        else {
            self.loadVer();
        }
        return _this;
    }
    Main.prototype.$onAddToStage = function (stage, nestLevel) {
        _super.prototype.$onAddToStage.call(this, stage, nestLevel);
        if (!this._init) {
            this._init = true;
            TRain.core.init(stage);
        }
    };
    Main.prototype.loadVer = function () {
        var self = this;
        var cb = function (event) {
            if (event.type == egret.Event.COMPLETE) {
                try {
                    var request_2 = (event.target);
                    var data = JSON.parse(request_2.response);
                    var gver = data.gVer;
                    if (gver)
                        delete data.gVer;
                    var zip = data.zip;
                    if (zip)
                        delete data.zip;
                    RES.getVerCtrl().addWebVer(data);
                    CONF.moList["resource" /* resNm */] = { gVer: gver, zip: zip, res: true, theme: true };
                    self.loadRes();
                    RES.getUrlResAsync("theme.json", "json" /* JSON */, self.onThemeFin, self);
                }
                catch (e) {
                    alert("游戏加载失败（解析webver.ver文件失败）, 游戏无法继续，请联系客服解决问题？");
                }
            }
            else {
                alert("游戏加载失败（下载webver.ver失败）, 请先确保网络正常, 再点击'确定'重试！");
                TRain.core.addDelayDo(self.loadVer, self, 500);
            }
        };
        var request = new egret.HttpRequest();
        request.addEventListener(egret.Event.COMPLETE, cb, self);
        request.addEventListener(egret.IOErrorEvent.IO_ERROR, cb, self);
        request.responseType = egret.HttpResponseType.TEXT;
        request.open(CONF.resHome + "webver.ver?v=" + Date.now());
        request.send();
    };
    Main.prototype.loadRes = function () {
        var self = this;
        RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, self.onResComp, self);
        RES.loadConfig("res.json", "");
    };
    /**
     * 配置文件加载完成,开始预加载皮肤主题资源和preload资源组。
     * Loading of configuration file is complete, start to pre-load the theme configuration file and the preload resource group
     */
    Main.prototype.onResComp = function (event) {
        var self = this;
        RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, self.onResComp, self);
        if (!event.isErr) {
            egret.updateAllScreens();
            RES.setMaxLoading(5);
            self.loadPre();
        }
        else {
            alert("游戏加载失败（下载res.json失败）, 请先确保网络正常, 再点击'确定'重试！");
            TRain.core.addDelayDo(self.loadRes, self, 500);
            ;
        }
    };
    Main.prototype.loadPre = function () {
        var self = this;
        RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, self.onGroupFin, self);
        RES.loadGroup("preload");
    };
    Main.prototype.onThemeFin = function (data, url) {
        var self = this;
        if (!data) {
            alert("游戏加载失败（下载theme.json失败）, 请先确保网络正常, 再点击'确定'重试！");
            TRain.core.addDelayDo(RES.getUrlResAsync, RES, 500, 0, false, "theme.json", "json" /* JSON */, self.onThemeFin, self);
            return;
        }
        TRain.UITheme.addSkinConf(data);
        RES.destroyUrl(url, "json" /* JSON */);
        self._themeFin = true;
        self.createScene();
    };
    /**
     * preload资源组加载完成
     * preload resource group is loaded
     */
    Main.prototype.onGroupFin = function (event) {
        var self = this;
        if (event.groupName == "preload") {
            if (!event.isErr) {
                self._preFin = true;
                RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, self.onGroupFin, self);
                self.createScene();
            }
            else {
                alert("游戏加载失败（下载资源组preload失败）, 请先确保网络正常, 再点击'确定'重试！");
                TRain.core.addDelayDo(RES.loadGroup, RES, 500, 0, false, "preload");
            }
        }
    };
    /**
     * 资源组加载出错
     * Resource group loading failed
     */
    // private onResourceLoadError(event:RES.ResourceEvent):void {
    //     console.warn("Group:" + event.groupName + " has failed to load");
    //     //忽略加载失败的项目
    //     //ignore loading failed projects
    //     this.onResourceLoadComplete(event);
    // }
    /**
     * preload资源组加载进度
     * loading process of preload resource
     */
    // private onResourceProgress(event:RES.ResourceEvent):void {
    //     if (event.groupName == "preload") {
    //         this.loadingView.setProgress(event.itemsLoaded, event.itemsTotal);
    //     }
    // }
    Main.prototype.createScene = function () {
        var self = this;
        if (self._themeFin && self._preFin) {
            AppDelegate.run(self);
        }
    };
    Main.prototype.onGameShow = function () {
        //let self = this;
        // let loadingUI = self.loadingView;
        // if( loadingUI )
        // {
        //     self.removeChild( loadingUI );
        //     self.loadingView = null;
        // }
        // delete self._preFin;
        // delete self._themeFin;
    };
    return Main;
}(egret.DisplayObjectContainer));
__reflect(Main.prototype, "Main", ["IMainDelegate"]);
var game;
(function (game) {
    var RouteSsqModel = (function (_super) {
        __extends(RouteSsqModel, _super);
        function RouteSsqModel(maxHisCnt, overRmvcnt) {
            var _this = _super.call(this) || this;
            _this._arrs = [];
            var self = _this;
            self._lastIdxs = [];
            self._historys = [];
            self._historys1 = [];
            var tmps = self._tmps = [];
            var routes = self._routes = [];
            for (var i = 0; i < 3 /* xiaolu */; ++i) {
                routes.push([]);
                tmps.push([]);
            }
            self._tps = [];
            self._hits = [];
            self._tpCnt = 12;
            self._maxRow = 50;
            self._maxNHit = 50;
            self.maxHisCnt = maxHisCnt || 100 /* maxHisCnt */;
            self.overRmvcnt = overRmvcnt || 4 /* zplMaxCnt */;
            return _this;
        }
        Object.defineProperty(RouteSsqModel.prototype, "historys", {
            get: function () {
                return this._historys;
            },
            //设置 将会重置数据
            set: function (data) {
                var self = this;
                self._historys = data;
                self._historys1 = data.slice(0);
                var tmps = self._tmps;
                self.freeArrs(tmps[0 /* zhupanlu */]);
                self.freeArrs(tmps[1 /* dalu */]);
                self.freeArrs(tmps[2 /* dayanzailu */]);
                var routes = self._routes;
                routes[0 /* zhupanlu */].length = 0;
                routes[1 /* dalu */].length = 0;
                routes[2 /* dayanzailu */].length = 0;
                self._tps.length = 0;
                var hits = self._hits;
                hits.length = 0;
                self._handHistory(0, true);
                for (var i = 0, len = data.length; i < len; ++i) {
                    var tp = self.history2Tp(data[i]);
                    self._addHistory(tp);
                }
                self.postEvent("d_change" /* DATA_CHANGE */);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouteSsqModel.prototype, "tps", {
            get: function () {
                return this._tps;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouteSsqModel.prototype, "hits", {
            get: function () {
                return this._hits;
            },
            enumerable: true,
            configurable: true
        });
        RouteSsqModel.prototype._addHistory = function (tp) {
            var self = this;
            var newRowDatas = [];
            var hits = self._hits;
            newRowDatas[tp] = tp + 1;
            var tpCnt = self._tpCnt;
            var row = hits.length;
            var tpLen = self._tps.length;
            if (row > 0) {
                var maxNotHit = self._maxNHit;
                var lastRowDatas = hits[row - 1];
                var lastTp = self._tps[tpLen - 1];
                for (var i = 0; i < tpCnt; ++i) {
                    if (i != tp) {
                        if (lastTp != i) {
                            var lastHitCnt = lastRowDatas[i];
                            newRowDatas[i] = lastHitCnt < maxNotHit ? lastHitCnt + 1 : maxNotHit;
                        }
                        else {
                            newRowDatas[i] = 1;
                        }
                    }
                }
            }
            else {
                for (var i = 0; i < tpCnt; ++i) {
                    if (i != tp)
                        newRowDatas[i] = 1;
                }
            }
            hits.push(newRowDatas);
            self._tps.push(tp);
        };
        RouteSsqModel.prototype._shiftHistory = function () {
            var self = this;
            self._historys1.shift();
            self._tps.shift();
            self.hits.shift();
        };
        RouteSsqModel.prototype.freeArrs = function (list) {
            var self = this;
            for (var col = 0, colCnt = list.length; col < colCnt; ++col) {
                var arr = list[col];
                if (arr) {
                    arr.length = 0;
                    if (self._arrs.length < 100) {
                        self._arrs.push(arr);
                    }
                }
            }
            list.length = 0;
        };
        RouteSsqModel.prototype._handHistory = function (stIdx, resetSub) {
            var self = this;
            var historys = self._historys;
            var zpls = self._routes[0 /* zhupanlu */];
            var dalu = self._routes[1 /* dalu */];
            var dayanzailu = self._routes[2 /* dayanzailu */];
            var doFun = self.data2Zhupanlu;
            var doFunDl = self.data2Dl;
            var doFunDyzl = self.data2Dyzl;
            var zplTmp = self._tmps[0 /* zhupanlu */];
            var dlTmp = self._tmps[1 /* dalu */];
            var dyzlTmp = self._tmps[2 /* dayanzailu */];
            for (var cnt = historys.length; stIdx < cnt; stIdx++) {
                var val = historys[stIdx];
                var zplResult = doFun(val);
                var zplIdx = self.two2one(zplTmp.length, zplResult.r, 4 /* zplMaxCnt */);
                zpls[zplIdx] = zplResult;
                zplTmp.push(zpls);
                var dlResult = doFunDl(val);
                var dlIdx = self.two2one(dlTmp.length, dlResult.r, 2 /* dlMaxCnt */);
                dalu[dlIdx] = dlResult;
                dlTmp.push(dalu);
                var dyzlResult = doFunDyzl(val);
                var dyzlIdx = self.two2one(dyzlTmp.length, dyzlResult.r, 2 /* dlMaxCnt */);
                dayanzailu[dyzlIdx] = dyzlResult;
                dyzlTmp.push(dayanzailu);
            }
            self._lastIdxs[0 /* zhupanlu */] = zpls.length - 1;
            self._lastIdxs[1 /* dalu */] = dalu.length - 1;
            self._lastIdxs[2 /* dayanzailu */] = dayanzailu.length - 1;
        };
        //珠盘路 数据
        //tp为number  时 从1开始
        RouteSsqModel.prototype.getRouteData = function (tp) {
            return this._routes[tp];
        };
        //獲取牌路最後添加的索引
        RouteSsqModel.prototype.getRouteLastIdx = function (tp) {
            return this._lastIdxs[tp];
        };
        RouteSsqModel.prototype.two2one = function (lastNum, r, maxCnt) {
            return (r - 1) + lastNum * maxCnt;
        };
        RouteSsqModel.prototype.addHistory = function (data) {
            var self = this;
            var historys = self._historys;
            var historys1 = self._historys1;
            var addCnt = 1;
            if (data instanceof Array) {
                addCnt = data.length;
                for (var i = 0; i < addCnt; ++i) {
                    historys.push(data[i]);
                }
            }
            else {
                historys.push(data);
            }
            if (historys1.length > self._maxRow) {
                self._shiftHistory();
            }
            var tp = self.history2Tp(data[0]);
            self._addHistory(tp);
            if (historys.length > self.maxHisCnt) {
                self.shiftHistory(self.overRmvcnt);
                self._handHistory(historys.length - addCnt, true);
                self.postEvent("d_change" /* DATA_CHANGE */);
            }
            else {
                self._handHistory(historys.length - addCnt);
                self.postEvent("d_update" /* DATA_UPDATE */);
            }
        };
        RouteSsqModel.prototype.shiftHistory = function (cnt) {
            var self = this;
            var historys = self._historys;
            var zplList = self._tmps[0 /* zhupanlu */];
            var dlList = self._tmps[1 /* dalu */];
            var dyzlList = self._tmps[2 /* dayanzailu */];
            historys.splice(0, 1 /* overRmvcnt */);
            zplList.splice(0, 1 /* overRmvcnt */);
            dlList.splice(0, 1 /* overRmvcnt */);
            dyzlList.splice(0, 1 /* overRmvcnt */);
            while (cnt >= 4 /* zplMaxCnt */ && zplList.length > 0) {
                var colDatas = zplList[0];
                var colDatasDl = dlList[0];
                var colDatasDyzl = dyzlList[0];
                var len = colDatas.length;
                if (len > cnt) {
                    colDatas.splice(0, cnt);
                    colDatasDl.splice(0, 2 /* dlMaxCnt */);
                    colDatasDyzl.splice(0, 2 /* dlMaxCnt */);
                    cnt = 0;
                }
                else {
                    CacheUtil.freeArr(zplList.shift());
                    CacheUtil.freeArr(dlList.shift());
                    CacheUtil.freeArr(dyzlList.shift());
                    cnt -= len;
                }
            }
        };
        return RouteSsqModel;
    }(game.Notification));
    game.RouteSsqModel = RouteSsqModel;
    __reflect(RouteSsqModel.prototype, "game.RouteSsqModel");
})(game || (game = {}));
var game;
(function (game) {
    var RouteTpModel = (function (_super) {
        __extends(RouteTpModel, _super);
        //取 类型结果 从0开始取
        function RouteTpModel(tpCnt, winTp, loseTp) {
            var _this = _super.call(this, null, null, winTp, loseTp) || this;
            var self = _this;
            var zpls = self._zpls = [];
            self._tpCnt = tpCnt;
            if (tpCnt > 5 /* max */) {
                var tmps = self._tmps;
                var routes = self._routes;
                for (var i = 5 /* max */; i < tpCnt; ++i) {
                    routes.push([]);
                    tmps.push([]);
                }
            }
            for (var i = 0; i < tpCnt; ++i) {
                zpls.push([]);
            }
            return _this;
        }
        Object.defineProperty(RouteTpModel.prototype, "historys", {
            get: function () {
                return this._historys;
            },
            //设置 将会重置数据
            set: function (data) {
                var self = this;
                self._historys = data;
                var tmps = self._tmps;
                var routes = self._routes;
                for (var i = 0, len = self._tpCnt; i <= len; ++i) {
                    self.freeArrs(tmps[i]);
                    routes[i].length = 0;
                }
                self._handHistory(0, true);
                self.delayPostEvent("d_change" /* DATA_CHANGE */, 0);
            },
            enumerable: true,
            configurable: true
        });
        RouteTpModel.prototype.getForecast = function () {
            return null;
        };
        //----------------------------------------------------------------------
        RouteTpModel.prototype._handHistory = function (stIdx, resetSub) {
            var self = this;
            var historys = self._historys;
            var routes = self._routes;
            var zpls = self._zpls;
            var tmps = self._tmps;
            var lastIdxs = self._lastIdxs;
            var doFun = self.data2Zhupanlu;
            var tpCnt = self._tpCnt;
            var historyLen = historys.length;
            for (var tp = 0; tp < tpCnt; ++tp) {
                var zplTmp = zpls[tp];
                var zplStIdx = zplTmp.length;
                for (var i = stIdx; i < historyLen; i++) {
                    zplTmp.push(doFun(historys[i], tp));
                }
                var daluTmp = tmps[tp];
                var oldCol = daluTmp.length;
                var oldRow = 0;
                if (oldCol > 0) {
                    oldCol--;
                    oldRow = daluTmp[oldCol].length;
                }
                self.zpl2Dalu(zplTmp, zplStIdx, daluTmp);
                var ret = routes[tp];
                if (resetSub) {
                    oldCol = 0;
                    oldRow = 0;
                    ret.length = 0;
                }
                lastIdxs[tp] = self.two2one(daluTmp, ret, oldCol, oldRow);
            }
        };
        RouteTpModel.prototype.shiftHistory = function (cnt) {
            var self = this;
            var historys = self._historys;
            historys.splice(0, cnt);
            var zpls = self._zpls;
            var tmps = self._tmps;
            for (var i = 0, len = self._tpCnt; i < len; ++i) {
                zpls[i].splice(0, cnt);
                var list = tmps[i];
                var tmpCnt = cnt;
                if (list.length > 0) {
                    while (tmpCnt > 0) {
                        var colDatas = list[0];
                        var len_2 = colDatas.length;
                        if (len_2 > tmpCnt) {
                            colDatas.splice(0, tmpCnt);
                            tmpCnt = 0;
                        }
                        else {
                            CacheUtil.freeArr(list.shift());
                            tmpCnt -= len_2;
                        }
                    }
                }
            }
        };
        RouteTpModel.prototype.getGdwayNm = function (tp) {
            var self = this;
            if (!self.data2GdWay) {
                return "";
            }
            return self.data2GdWay(self.calGdWayType(tp));
        };
        /**
  *
  * @param routeList
  *
  * 0无、1长红、2长黑、3大路单跳、4拍拍黐、5一厅两房、6一房两厅、7逢红黐、8逢黑黐、9隔黐红、10隔黐黑
  */
        RouteTpModel.prototype.calGdWayType = function (tp) {
            var self = this;
            var routeList = self._routes[tp];
            var len = routeList.length;
            if (len == 0) {
                return 0 /* none */;
            }
            var newArr = [];
            for (var i = 0; i < len; ++i) {
                var curRoute = routeList[i];
                var curCol = Math.floor(i / 6 /* maxRow */);
                var curLine = i % 6 /* maxRow */;
                var upData = routeList[i - 1];
                if (curRoute) {
                    var curColData = newArr[curCol];
                    if (!curColData) {
                        if (curLine == 0) {
                            curColData = { r: curRoute.r, num: 1 };
                            newArr[curCol] = curColData;
                        }
                        continue;
                    }
                    if (curColData.r == curRoute.r && upData) {
                        curColData.num++;
                        newArr[curCol] = curColData;
                    }
                }
            }
            newArr = newArr.reverse().splice(0, 7);
            var newLen = newArr.length;
            //倒数7位
            var lastData = newArr[0];
            var lastData1 = newArr[1];
            var lastData2 = newArr[2];
            var lastData3 = newArr[3];
            var lastData4 = newArr[4];
            var lastData5 = newArr[5];
            var lastData6 = newArr[6];
            if (lastData.num >= 4) {
                return lastData.r == self.winType ? 1 /* first */ : 2 /* second */;
            }
            if (newLen >= 4 && lastData.num == 1 && lastData1.num == 1 && lastData2.num == 1 && lastData3.num == 1) {
                return 3 /* three */;
            }
            if (newLen >= 3 && lastData.num >= 2 && lastData1.num >= 2 && lastData2.num >= 2) {
                return 4 /* four */;
            }
            if (newLen >= 4) {
                if ((lastData.r == self.loseType && lastData.num == 2)
                    && (lastData1.r == self.winType && lastData1.num == 1)
                    && (lastData2.r == self.loseType && lastData2.num == 2)
                    && (lastData3.r == self.winType && lastData3.num == 1)) {
                    return 5 /* five */;
                }
                if ((lastData.r == self.winType && lastData.num == 2)
                    && (lastData1.r == self.loseType && lastData1.num == 1)
                    && (lastData2.r == self.winType && lastData2.num == 2)
                    && (lastData3.r == self.loseType && lastData3.num == 1)) {
                    return 6 /* six */;
                }
                if ((lastData.r == self.loseType && lastData.num == 1)
                    && (lastData1.r == self.winType && lastData1.num == 2)
                    && (lastData2.r == self.loseType && lastData2.num == 1)
                    && (lastData3.r == self.winType && lastData3.num >= 4)) {
                    return 7 /* seven */;
                }
                if ((lastData.r == self.winType && lastData.num == 2)
                    && (lastData1.r == self.loseType && lastData1.num >= 4)
                    && (lastData2.r == self.winType && lastData2.num == 1)
                    && (lastData3.r == self.loseType && lastData3.num == 2)) {
                    return 8 /* eight */;
                }
            }
            if (newLen >= 7) {
                if ((lastData.r == self.winType && lastData.num >= 2)
                    && (lastData1.r == self.loseType && lastData1.num >= 1)
                    && (lastData2.r == self.winType && lastData2.num == 1)
                    && (lastData3.r == self.loseType && lastData3.num >= 1)
                    && (lastData4.r == self.winType && lastData4.num >= 2)
                    && (lastData5.r == self.loseType && lastData5.num >= 1)
                    && (lastData6.r == self.winType && lastData6.num == 1)) {
                    return 9 /* nine */;
                }
                if ((lastData.r == self.loseType && lastData.num >= 2)
                    && (lastData1.r == self.winType && lastData1.num >= 1)
                    && (lastData2.r == self.loseType && lastData2.num == 1)
                    && (lastData3.r == self.winType && lastData3.num >= 1)
                    && (lastData4.r == self.loseType && lastData4.num >= 2)
                    && (lastData5.r == self.winType && lastData5.num >= 1)
                    && (lastData6.r == self.loseType && lastData6.num == 1)) {
                    return 10 /* ten */;
                }
            }
            return 0 /* none */;
        };
        return RouteTpModel;
    }(game.RouteModel));
    game.RouteTpModel = RouteTpModel;
    __reflect(RouteTpModel.prototype, "game.RouteTpModel");
})(game || (game = {}));
var game;
(function (game) {
    var SoundModel = (function () {
        function SoundModel() {
            var self = this;
            self.bgm = "7";
            self._loadBgm = 0;
        }
        SoundModel.prototype.setState = function (val) {
            var soundMgr = TRain.soundMgr;
            game.GameUtil.setLocal("SFX_STATUS" /* SFX_STATUS */, val);
            soundMgr.sfxState = val;
            game.GameUtil.setLocal("MUSIC_STATUS" /* MUSIC_STATUS */, val);
            soundMgr.musicState = val;
        };
        SoundModel.prototype.getState = function () {
            var soundMgr = TRain.soundMgr;
            return soundMgr.musicState || soundMgr.sfxState;
        };
        SoundModel.prototype.loadMusic = function () {
            var self = this;
            if (self._loadBgm == 0) {
                self._loadBgm = 1;
                var url = TRain.soundMgr.getUrl(self.bgm);
                RES.getUrlResAsync(url, "sound" /* SOUND */, function (data) {
                    if (data) {
                        self._loadBgm = 2;
                        if (self._canPlay)
                            TRain.soundMgr.playMusic(self.bgm);
                    }
                }, self);
            }
        };
        SoundModel.prototype.playMusic = function () {
            var self = this;
            if (!self._canPlay)
                self._canPlay = true;
            if (self._loadBgm == 2) {
                TRain.soundMgr.playMusic(self.bgm);
            }
        };
        return SoundModel;
    }());
    game.SoundModel = SoundModel;
    __reflect(SoundModel.prototype, "game.SoundModel");
})(game || (game = {}));
var CONF;
(function (CONF) {
    CONF.inner = 1;
    //export let svrUrl = "http://10.0.0.116:8611"; 
    CONF.svrUrl = "http://192.168.1.49:8611";
    // export let svrUrl = "https://www.zhuangroume.com:1002/"
    //export let svrUrl = "http://3.1.107.117:1002"
    // export let svrUrl = "http://10.0.0.211:8611";
    // export let svrUrl = "https://www.qilinziguan.net:1000" 
    // export let svrUrl = "https://www.tiantianypt.com"
    // export let svrUrl="http://www.lyjiashan.com:18900";
    CONF.webSvrUrl = "";
    CONF.kefuUrl = "https://www.mmhtml.com/";
    CONF.erweima = "https://www.best-xiaoxiao.xyz/";
    CONF.location = "https://www.dad-fdsf.com/channel/";
    CONF.taotaoUrl = "http://ip.taobao.com";
    // export let NoticeUrl = "https://www.dsteach.com/notice/";
    CONF.isNative = false;
    CONF.channelId = "744681_28"; // 440001    866994_3
    CONF.agentId = "316"; // 1   225
    CONF.shareId = "744681_28"; //分享id // 440001 
    CONF.deviceId = ""; //设备号
    CONF.res = {};
    CONF.gameVer = "";
    CONF.clientIp = ""; //本地ip
    CONF.bsKfUrl = "";
    CONF.bsKfUrlWeb = "";
    CONF.packAgeTp = "";
    CONF.packId = ""; //包体id
    CONF.appVer = 0;
    CONF.moList = {};
    CONF.scOffx = 0; //屏幕x缩进
    CONF.preview = {}; //预览功能用到的 sound 
    CONF.logUrl = "https://www.jy857j.com/sumer/";
    CONF.homeUrl = "";
    CONF.openWXQQUrl = "https://open.weixin.qq.com/connect/qrconnect";
    CONF.hlhUrl = "https://www.baidu.com/";
})(CONF || (CONF = {}));
;
/**
 * Created by wjdeng on 2015/9/6.
 */
var game;
(function (game) {
    var BusyLayer = (function (_super) {
        __extends(BusyLayer, _super);
        function BusyLayer() {
            var _this = _super.call(this) || this;
            var self = _this;
            self._flag = 0;
            self._tmSpeed = 0;
            self._cnt = 0;
            self._time = 0;
            var con = self._gcon = new cui.Group();
            con.hCenter = 0;
            con.vCenter = 0;
            con.perHeight = 100;
            con.perWidth = 100;
            var img = new cui.Image();
            // img.perHeight = 100;
            // img.perWidth = 100;
            img.hCenter = 0;
            img.vCenter = 0;
            img.source = "common@jzBottom";
            con.addChild(img);
            var ani = new cui.UIMovieClip();
            ani.aniName = "busy";
            ani.autoPlay = true;
            ani.hCenter = 0;
            ani.vCenter = 0;
            con.addChild(ani);
            var lab = self._lab = new cui.Label();
            lab.hCenter = 0;
            lab.vCenter = 0;
            lab.size = 30;
            lab.width = 100;
            lab.textAlign = "center";
            lab.text = "0%";
            con.addChild(lab);
            game.notifiCenter.addListener(egret.Event.RESIZE, function (w, h) {
                self.width = w;
                self.height = h;
            }, self);
            return _this;
        }
        BusyLayer.getInst = function () {
            if (!BusyLayer.inst) {
                BusyLayer.inst = new BusyLayer();
            }
            return BusyLayer.inst;
        };
        BusyLayer.prototype.$onAddToStage = function (stage, nestLevel) {
            _super.prototype.$onAddToStage.call(this, stage, nestLevel);
            var self = this;
            self.width = stage.$stageWidth;
            self.height = stage.$stageHeight;
            self.hideAni();
            if (!self._aniTag) {
                self._aniTag = TRain.core.addDelayDo(self.showAni, self, 100);
            }
        };
        BusyLayer.prototype.$onRemoveFromStage = function () {
            _super.prototype.$onRemoveFromStage.call(this);
            var self = this;
            var aniTag = self._aniTag;
            if (aniTag) {
                TRain.core.rmvDelayDoByID(aniTag);
                self._aniTag = 0;
            }
        };
        BusyLayer.prototype.$hitTest = function () {
            return this;
        };
        BusyLayer.prototype.hideAni = function () {
            var self = this;
            var gcon = self._gcon;
            if (gcon.parent) {
                self.removeChild(gcon);
            }
        };
        BusyLayer.prototype.showAni = function () {
            var self = this;
            self._aniTag = 0;
            var gcon = self._gcon;
            if (!gcon.parent) {
                self.addChild(gcon);
            }
        };
        BusyLayer.prototype.showBusy = function () {
            var self = this;
            self._cnt++;
            self.update();
            self._time = 0;
            self._tmSpeed = 2;
            if (!self._flag) {
                self._flag = TRain.core.addFrameDo(self.loadUpdate, self);
            }
        };
        BusyLayer.prototype.hideBusy = function () {
            var self = this;
            if (self._cnt > 0)
                self._cnt--;
            self.update();
            if (self._flag) {
                TRain.core.rmvFrameDoById(self._flag);
                self._flag = 0;
            }
        };
        BusyLayer.prototype.stopBusy = function () {
            var self = this;
            self._cnt = 0;
            self.update();
            if (self._flag) {
                TRain.core.rmvFrameDoById(self._flag);
                self._flag = 0;
            }
        };
        BusyLayer.prototype.setParent = function (container) {
            var self = this;
            if (self.parent) {
                self.parent.removeChild(self);
            }
            self._pcon = container;
        };
        BusyLayer.prototype.update = function () {
            var self = this;
            if (!self._pcon)
                return;
            if (self._cnt > 0) {
                if (!self.parent) {
                    self._pcon.addChild(self);
                }
            }
            else {
                if (self.parent) {
                    self._pcon.removeChild(self);
                }
            }
        };
        BusyLayer.prototype.loadUpdate = function (tm) {
            var self = this;
            self._time += (tm * self._tmSpeed);
            var per = ~~(self._time / 200);
            if (per > 25) {
                if (per >= 100) {
                    per = 100;
                    self.stopBusy();
                    game.notifiCenter.postEvent("busy_out" /* BUSY_TM_OUT */);
                }
                else {
                    if (per > 90) {
                        self._tmSpeed = 0.15;
                    }
                    else if (per > 75) {
                        self._tmSpeed = 0.25;
                    }
                    else if (per > 50) {
                        self._tmSpeed = 0.5;
                    }
                    else {
                        self._tmSpeed = 1;
                    }
                }
            }
            self._lab.text = per + "%";
        };
        return BusyLayer;
    }(cui.Group));
    game.BusyLayer = BusyLayer;
    __reflect(BusyLayer.prototype, "game.BusyLayer", ["game.ILoadShow"]);
})(game || (game = {}));
var game;
(function (game) {
    var ChipManager = (function () {
        function ChipManager() {
            this._chipArr = [];
            var self = this;
            this._areaArr = [];
            self._aniTag = TRain.actionMgr.getUnitTag();
            self._pure = false;
        }
        ChipManager.prototype.setParent = function (p) {
            this._parent = p;
            p.touchThrough = true;
            p.touchEnabled = false;
        };
        ChipManager.prototype.resetAreaArr = function () {
            var self = this;
            self.clear();
            self._areaArr = [];
            self._parent = null;
        };
        /**
         *
         * @param id 区域id
         * @param maxCnt 区域最大显示数量
         * @param x 区域的x ,转化为舞台的全局坐标
         * @param y 区域的y ,转化为舞台的全局坐标
         * @param w 区域的w
         * @param h 区域的h
         */
        ChipManager.prototype.addArea = function (id, maxCnt, x, y, w, h) {
            var self = this;
            var areaArr = self._areaArr;
            var area = areaArr[id];
            if (area && (area.x != x || area.y != y)) {
                if (area.w) {
                    x += 25 /* halfW */;
                    y += 27 /* halfH */;
                }
                area.x = x;
                area.y = y;
                var tiles = area.tiles;
                var i = 0, len = tiles.length;
                for (; i < len; i++) {
                    self.freeChip(tiles[i]);
                }
                tiles.length = 0;
                tiles = area.flyTiles;
                i = 0, len = tiles.length;
                for (; i < len; i++) {
                    var tile = tiles[i];
                    TRain.actionMgr.rmvActsByTar(tile);
                    self.freeChip(tile);
                }
                tiles.length = 0;
            }
            else {
                if (w) {
                    x += 25 /* halfW */;
                    y += 27 /* halfH */;
                    w -= 50 /* w */;
                    h -= 54 /* h */;
                }
                areaArr[id] = { id: id, maxCnt: maxCnt, x: x, y: y, w: w, h: h, tiles: [], flyTiles: [] };
            }
        };
        /**
         *
         * @param formAreaId 出发点区域id
         * @param toAreaId 到达点区域id
         * @param tm 飞行时间
         * @param data {chipId:筹码id，gold:筹码下注额,chipTp:筹码枚举，默认是通用的}
         * @param bScale 初始的大小x
         * @param sfxName 音效
         * @param delay 延迟多久播放音效
         */
        ChipManager.prototype.addChip = function (formAreaId, toAreaId, tm, data, bScale, eScale, sfxName, delay, cb, thisObj) {
            bScale = bScale || 0.5;
            eScale = eScale || 0.55;
            delay = delay || 0;
            sfxName = sfxName || "sound_jetton" /* jetton */;
            if (delay >= 0)
                TRain.soundMgr.playSFX(sfxName, delay);
            var self = this;
            var formArea = self._areaArr[formAreaId];
            var toArea = self._areaArr[toAreaId];
            var chip = self.getChip();
            chip.alpha = 1;
            chip.setData(data.chipId, data.gold, data.chipTp, data.isSelfBet);
            chip.tag = toAreaId;
            toArea.flyTiles.push(chip);
            var parent = self._parent;
            parent.addChild(chip);
            chip.x = formArea.x;
            chip.y = formArea.y;
            chip.scaleX = chip.scaleY = bScale;
            var toPointX = toArea.x + Math.floor(Math.random() * (toArea.w || 0));
            var toPointY = toArea.y + Math.floor(Math.random() * (toArea.h || 0));
            // let delaytm = Math.floor(Math.random() * 500);
            // let actionDelay: TRain.Action = new TRain.Action(delaytm);
            var toProps = { x: toPointX, y: toPointY };
            if (bScale != eScale) {
                toProps.scaleY = toProps.scaleX = eScale;
            }
            var action = new TRain.ActionPropTo(tm, 1, toProps);
            action.setEaseFun(EaseUtil.quadOut);
            var actionCall = new TRain.ActionCallDo();
            actionCall.setCall(function () {
                self.addChipToArea(chip);
                if (cb)
                    cb.apply(thisObj);
            }, self);
            var actionSeq = new TRain.ActionSequence([action, actionCall]);
            TRain.actionMgr.addAction(actionSeq, chip, false, self._aniTag);
        };
        /**
         *
         * @param pure true 纯净模式
         */
        ChipManager.prototype.setPure = function (pure) {
            var self = this;
            self._pure = pure;
            if (pure) {
                var parent_2 = self._parent;
                var areaArr = self._areaArr;
                for (var key in areaArr) {
                    var tiles = areaArr[key].tiles;
                    for (var i = 0; i < tiles.length; i++) {
                        var chip = tiles[i];
                        if (!chip.isSelfBet && chip.parent)
                            parent_2.removeChild(chip);
                    }
                }
            }
            else {
                for (var key in self._areaArr) {
                    var tiles = self._areaArr[key].tiles;
                    for (var i = 0; i < tiles.length; i++) {
                        var chip = tiles[i];
                        chip.alpha = 1;
                        if (!chip.disposed)
                            self._parent.addChild(chip);
                    }
                }
            }
        };
        ChipManager.prototype.isPure = function () {
            return this._pure;
        };
        ChipManager.prototype.addChipToArea = function (chip) {
            var self = this;
            var tag = chip.tag;
            var area = self._areaArr[tag];
            var tiles = area.tiles;
            var flyTiles = area.flyTiles;
            var idx = flyTiles.indexOf(chip);
            if (idx >= 0)
                flyTiles.splice(idx, 1);
            var len = tiles.length;
            if (area.maxCnt <= len) {
                //找出第一个不是自己的筹码
                var idx_1 = 0;
                for (var i = 0; i < len; i++) {
                    var tile = tiles[i];
                    if (!tile.isSelfBet && !tile.disposed) {
                        idx_1 = i;
                        break;
                    }
                }
                var freeTiles = tiles.splice(idx_1, 1);
                self.freeChip(freeTiles[0]);
            }
            tiles.push(chip);
            if (self._pure && !chip.isSelfBet) {
                var action = new TRain.ActionPropTo(500, 1, { alpha: 0 });
                var actionCall = new TRain.ActionCallDo();
                actionCall.setCall(function () {
                    if (chip.parent)
                        chip.parent.removeChild(chip);
                }, self);
                var actionSeq = new TRain.ActionSequence([action, actionCall]);
                TRain.actionMgr.addAction(actionSeq, chip, false, self._aniTag);
            }
        };
        /**
         *
         * @param formAreaId 出发点区域id
         * @param toAreaId 到达点区域id
         * @param flytm 飞行的总时间
         * @param isPlay 是否播放声音
         */
        ChipManager.prototype.moveAll = function (formAreaId, toAreaId, flytm, isPlay) {
            if (isPlay === void 0) { isPlay = true; }
            var self = this;
            if (!self._flyBefore)
                self._flyBefore = self._pure; //记录飞行前的模式
            self.setPure(false);
            var formArea = self._areaArr[formAreaId];
            if (formArea) {
                var formTiles = formArea.tiles;
                self.moveChip(formTiles, toAreaId, flytm, 20, "win_bet" /* win_bet */, isPlay);
                formTiles.length = 0;
            }
            return flytm + 500;
        };
        /**
         *
         * @param formAreaId 出发点区域id
         * @param toAreaIds 到达点区域ids
         * @param flytm  飞行的总时间
         * @param isPlay  是否播放声音 默认播
         */
        ChipManager.prototype.moveAllMuti = function (formAreaId, toAreaIds, flytm, isPlay) {
            if (isPlay === void 0) { isPlay = true; }
            var self = this;
            if (!self._flyBefore)
                self._flyBefore = self._pure; //记录飞行前的模式
            self.setPure(false);
            var formArea = self._areaArr[formAreaId];
            var formTotalLen = formArea.tiles.length;
            var formAllTile = formArea.tiles;
            for (var i = 0, len = toAreaIds.length; i < len; i++) {
                var toArea = toAreaIds[i];
                var toAreaId = toArea.id;
                var formLen = Math.floor(toArea.wg * formTotalLen);
                var formTiles = formAllTile.splice(0, formLen);
                self.moveChip(formTiles, toAreaId, flytm, 20, "win_bet" /* win_bet */, (isPlay && i == 0));
            }
            var endLen = formAllTile.length;
            for (var j = 0; j < endLen; j++) {
                self.freeChip(formAllTile[j]);
            }
            formAllTile.length = 0;
            return flytm + 500;
        };
        ChipManager.prototype.moveChip = function (formTiles, toAreaId, flyTm, maxCnt, sfxName, isPlay) {
            var self = this;
            maxCnt = maxCnt || 20;
            sfxName = sfxName || "win_bet" /* win_bet */;
            if (isPlay)
                TRain.soundMgr.playSFX(sfxName);
            var formAllLen = formTiles.length;
            var len = formAllLen > maxCnt ? maxCnt : formAllLen;
            var toArea = self._areaArr[toAreaId];
            var flyTiles = toArea.flyTiles;
            var toAreaX = toArea.x, toAreaY = toArea.y, toAreaW = toArea.w, toAreaH = toArea.h;
            var tmpX, tmpY;
            var delaytm = 0;
            var _loop_2 = function (i) {
                var chip = formTiles[i];
                chip.tag = toAreaId;
                flyTiles.push(chip);
                var actionSeq = new TRain.ActionSequence();
                var actionDelay = new TRain.Action(delaytm);
                actionSeq.addAction(actionDelay);
                delaytm += 16.7;
                tmpX = toAreaX;
                tmpY = toAreaY;
                if (toAreaW) {
                    tmpX += Math.floor(Math.random() * toAreaW);
                    tmpY += Math.floor(Math.random() * toAreaH);
                }
                var action = new TRain.ActionPropTo(flyTm, 1, {
                    x: tmpX,
                    y: tmpY
                });
                action.setEaseFun(EaseUtil.quartOut);
                actionSeq.addAction(action);
                var actionCall = new TRain.ActionCallDo();
                actionCall.setCall(function () {
                    self.addChipToArea(chip);
                }, self);
                actionSeq.addAction(actionCall);
                TRain.actionMgr.addAction(actionSeq, chip, false, self._aniTag);
            };
            for (var i = 0; i < len; i++) {
                _loop_2(i);
            }
            var m = len;
            for (; m < formAllLen; m++) {
                self.freeChip(formTiles[m]);
            }
            formTiles.length = 0;
        };
        ChipManager.prototype.clear = function () {
            var self = this;
            if (self._flyBefore) {
                self._flyBefore = null;
                self.setPure(true);
            }
            var parent = self._parent;
            if (parent)
                parent.removeChildren();
            TRain.actionMgr.rmvActsByTag(this._aniTag);
            //回收所有筹码
            var areaArr = self._areaArr;
            for (var key in areaArr) {
                var area = areaArr[key];
                var tiles = area.tiles;
                var i = 0, len = tiles.length;
                for (; i < len; i++) {
                    self.freeChip(tiles[i]);
                }
                tiles.length = 0;
                tiles = area.flyTiles;
                i = 0, len = tiles.length;
                for (; i < len; i++) {
                    self.freeChip(tiles[i]);
                }
                tiles.length = 0;
            }
        };
        ChipManager.prototype.getChip = function () {
            if (this._chipArr.length > 0) {
                var chip = this._chipArr.pop();
                if (chip.disposed) {
                    return new game.ChipTile();
                }
                return chip;
            }
            return new game.ChipTile();
        };
        ChipManager.prototype.freeChip = function (chip) {
            if (chip.parent) {
                chip.parent.removeChild(chip);
            }
            if (this._chipArr.length < 100) {
                //chip.clear();
                chip.isSelfBet = false;
                this._chipArr.push(chip);
            }
            else {
                chip.dispose();
            }
        };
        return ChipManager;
    }());
    game.ChipManager = ChipManager;
    __reflect(ChipManager.prototype, "game.ChipManager");
})(game || (game = {}));
var game;
(function (game) {
    var DataFormat;
    (function (DataFormat) {
        function formatGold(gold, isLang, fixed) {
            var self = this;
            var value = convertGold(gold);
            var goldStr = "";
            var wGold = value / 10000;
            if (value > 10000) {
                var bGold = wGold / 10000;
                if (bGold > 10000) {
                    goldStr = bGold.toFixed(fixed || 2) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 683 /* hundredMillionRmb */) : "by" /* by */);
                }
                else {
                    goldStr = wGold.toFixed(fixed || 2) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 682 /* tenThousandRmb */) : "wy" /* wy */);
                }
            }
            else {
                goldStr = value.toFixed(fixed || 2) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */) : "y" /* y */);
            }
            return goldStr;
        }
        DataFormat.formatGold = formatGold;
        /**
         * 获取角色头像资源
         * @param icon_custom
         */
        function getHeadIcon(icon_custom) {
            if (!icon_custom) {
                return "head@" /* head */ + "nan_1";
            }
            if (icon_custom.indexOf("http") != -1) {
                return game.resMgr.getNoHomeUrl(icon_custom);
            }
            var idx1 = icon_custom.indexOf(".");
            var idx = icon_custom.indexOf("head_");
            if (idx >= 0 && idx1 >= 0) {
                icon_custom = icon_custom.substring(5, idx1);
            }
            return "head@" /* head */ + icon_custom;
        }
        DataFormat.getHeadIcon = getHeadIcon;
        //原始格式
        function convertGold(value) {
            if (value == null || isNaN(value)) {
                return 0;
            }
            return value / 100 /* MoneyBase */;
        }
        DataFormat.convertGold = convertGold;
        //万亿格式,带小数
        function convertGoldString2(gold, isLang) {
            var value = convertGold(gold);
            if (value >= 100000000) {
                return (Math.floor(value / 1000000) / 100).toFixed(2) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 685 /* hundredMillion */) : "b" /* b */);
            }
            else if (value >= 10000) {
                return (Math.floor(value / 100) / 100).toFixed(2) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 684 /* tenThousand */) : "w" /* w */);
            }
            else if (value >= 1000) {
                return (Math.floor(value / 100) / 10).toFixed(2) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 807 /* thousand */) : "q" /* q */); //千
            }
            else {
                return value.toFixed(2);
            }
        }
        DataFormat.convertGoldString2 = convertGoldString2;
        //有小数显示小数，没小数不显示
        function convertGoldString3(gold) {
            var value = convertGold(gold);
            var intValue = Math.floor(value);
            if (intValue == value) {
                return intValue.toString();
            }
            else {
                return value.toFixed(2);
            }
        }
        DataFormat.convertGoldString3 = convertGoldString3;
        //格式化金币，不带小数点后两位
        function convertGoldString4(gold, isLang) {
            var value = convertGold(gold);
            if (value >= 100000000) {
                return (Math.floor(value / 1000000) / 100) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 685 /* hundredMillion */) : "b" /* b */);
            }
            else if (value >= 10000) {
                return (Math.floor(value / 100) / 100) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 684 /* tenThousand */) : "w" /* w */);
            }
            else if (value >= 1000) {
                return (Math.floor(value / 100) / 10) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 807 /* thousand */) : "q" /* q */); //千
            }
            else {
                return String(value);
            }
        }
        DataFormat.convertGoldString4 = convertGoldString4;
        //万亿格式,带小数
        function convertGoldString5(gold, isLang) {
            var value = convertGold(gold);
            if (value >= 100000000) {
                return (Math.floor(value / 1000000) / 100) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 683 /* hundredMillionRmb */) : "b" /* b */);
            }
            else if (value >= 10000) {
                return (Math.floor(value / 100) / 100) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 682 /* tenThousandRmb */) : "w" /* w */);
            }
            else {
                return value + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */) : "");
            }
        }
        DataFormat.convertGoldString5 = convertGoldString5;
        function convertYuanString(value, isLang) {
            return convertGold(value) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */) : "y" /* y */);
        }
        DataFormat.convertYuanString = convertYuanString;
        //万亿格式,带小数
        function convertYuanString2(gold, isLang) {
            var value = convertGold(gold);
            if (value >= 100000000) {
                return (Math.floor(value / 1000000) / 100) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 683 /* hundredMillionRmb */) : "by" /* by */);
            }
            else if (value >= 10000) {
                return (Math.floor(value / 100) / 100) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 682 /* tenThousandRmb */) : "wy" /* wy */);
            }
            else {
                return value + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */) : "y" /* y */);
            }
        }
        DataFormat.convertYuanString2 = convertYuanString2;
        //有小数显示小数，没小数不显示
        function convertYuanString3(gold, isLang) {
            var value = convertGold(gold);
            var intValue = Math.floor(value);
            if (intValue == value) {
                return intValue + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */) : "y" /* y */);
            }
            else {
                return value.toFixed(2) + (isLang ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */) : "y" /* y */);
            }
        }
        DataFormat.convertYuanString3 = convertYuanString3;
        //超过gold2的数不显示小数  未超过gold2的数有小数就显示没小数就不显示
        //gold2真是金额单位元
        function convertYuanString4(gold1, gold2, isLang) {
            var value = DataFormat.convertGold(gold1);
            var maxGold = 10000;
            if (gold2) {
                maxGold = gold2;
            }
            var intValue = Math.floor(value);
            if (value > maxGold) {
                value = intValue;
            }
            return DataFormat.convertYuanString3(value * 100 /* MoneyBase */, isLang);
        }
        DataFormat.convertYuanString4 = convertYuanString4;
        //格式化名字显示
        //maxLen 策划要求的字符数量的最大值
        //halfLen  策划要显示的半角数
        function formatName(name, maxLen, halfLen) {
            var str = CheckStringLength(name);
            var len = str[0];
            var chaLen = str[1];
            if (len > (maxLen || 10)) {
                var firstIdx = void 0;
                var tmpHalfLen = (halfLen || 6);
                var halfIdx = (tmpHalfLen / 2);
                if (chaLen >= halfIdx) {
                    firstIdx = halfIdx;
                }
                else {
                    firstIdx = tmpHalfLen - chaLen;
                }
                //获取截取前的名字
                var forName = name.substring(0, firstIdx);
                // let replaceStr = name.substring(firstIdx);
                return forName + "...";
            }
            else {
                return name;
            }
        }
        DataFormat.formatName = formatName;
        //返回半角字符长度和有几个全角
        function CheckStringLength(txt) {
            var len = 0;
            var chaLen = 0;
            for (var i = 0; i < txt.length; i++) {
                if (txt.charCodeAt(i) >= 0x4e00 && txt.charCodeAt(i) <= 0x9fa5) {
                    len += 2;
                    chaLen++;
                }
                else {
                    len += 1;
                }
            }
            return [len, chaLen];
        }
        DataFormat.CheckStringLength = CheckStringLength;
        // 格式化亲友圈公会id
        function getGuildId(id, maxLen) {
            var tmpId = id.toString();
            var endLen = (maxLen || 6) - tmpId.length;
            var str = "";
            for (var i = 0; i < endLen; i++) {
                str += "0";
            }
            return str + tmpId;
        }
        DataFormat.getGuildId = getGuildId;
    })(DataFormat = game.DataFormat || (game.DataFormat = {}));
})(game || (game = {}));
var game;
(function (game) {
    var GoldMange = (function () {
        function GoldMange() {
            this._flyState = [];
            this._endPosArr = [];
            this._firData = [];
            this._secData = [];
            this._othFirGold = [];
            this._othSecGold = [];
            this._areaNum = 0;
            this._spcNum = -1;
            this._isFly = false;
            this._starArr = [];
            var self = this;
            self._firData = [];
            self._secData = [];
            self._othFirGold = [];
            self._othSecGold = [];
            self._isFly = false;
        }
        GoldMange.prototype.setParent = function (parent) {
            var self = this;
            if (self._parent)
                self.reset();
            self._parent = parent;
            self._endPosArr = [];
            self._starArr = [];
            //parent.touchThrough = false;
            parent.touchEnabled = false;
        };
        /**
         *
         * @param num 区域数量
         * @param spcNum 特殊区域 代表只有几个地方是需要飞星星 全飞就不需要传
         */
        GoldMange.prototype.setAreaNum = function (num, spcNum) {
            var self = this;
            self._areaNum = num;
            self._spcNum = spcNum;
        };
        GoldMange.prototype.initData = function (data, myId) {
            var self = this;
            self._plyData = data;
            self._myId = myId;
            for (var i = 0; i < self._areaNum; i++) {
                self._flyState[i] = -1;
                self._othFirGold[i] = 0;
                self._othSecGold[i] = 0;
            }
            self._isFly = false;
            self._firData = [];
            self._secData = [];
            for (var i = 0; i < 6; i++) {
                var tempArr = [];
                for (var j = 0; j < self._areaNum; j++) {
                    tempArr.push(0);
                }
                self._firData.push(tempArr);
                self._secData.push(tempArr);
            }
        };
        GoldMange.prototype.setStartPoint = function (point) {
            this._startPos = point;
        };
        /**
         *
         * @param point 区域坐标数据
         * @param starArr 要飞星星的区域数组
         */
        GoldMange.prototype.addEndPoint = function (point, starArr) {
            var self = this;
            self._endPosArr = point;
            self._starArr = starArr;
        };
        GoldMange.prototype.getOtherGold = function (betDate, myBetList) {
            var sixGold = [];
            var otherGold = [];
            for (var j = 0; j < betDate.length; j++) {
                var temp = betDate[j];
                otherGold[j] = temp.bet_golds;
                sixGold[j] = 0;
                if (temp.master_bets) {
                    var tempGold = 0;
                    for (var k = 0; k < temp.master_bets.length; k++) {
                        var masterBet = temp.master_bets[k];
                        tempGold += masterBet.player_bets;
                    }
                    sixGold[j] = tempGold;
                }
            }
            for (var i = 0; i < otherGold.length; i++) {
                otherGold[i] = otherGold[i] - sixGold[i];
            }
            if (myBetList) {
                for (var i = 0; i < otherGold.length; i++) {
                    otherGold[i] = otherGold[i] - (myBetList[i] || 0);
                }
            }
            return otherGold;
        };
        GoldMange.prototype.getSixGold = function (plyData, betData) {
            var self = this;
            var sixGold = [];
            for (var i = 0; i < 6; i++) {
                var tempArr = [];
                for (var j = 0; j < self._areaNum; j++) {
                    tempArr.push(0);
                }
                sixGold.push(tempArr);
            }
            for (var i = 0; i < 6; i++) {
                var ply = plyData[i];
                if (!ply) {
                    continue;
                }
                for (var j = 0; j < betData.length; j++) {
                    var tempBet = betData[j];
                    if (tempBet.master_bets) {
                        for (var k = 0; k < tempBet.master_bets.length; k++) {
                            if (ply.player_id == tempBet.master_bets[k].player_id && tempBet.master_bets[k].player_id != self._myId) {
                                sixGold[i][j] = tempBet.master_bets[k].player_bets;
                            }
                        }
                    }
                }
            }
            return sixGold;
        };
        GoldMange.prototype.getGold = function (betData, myBetList) {
            var self = this;
            if (self._plyData) {
                var plyDate = self._plyData;
                var otherGold = self.getOtherGold(betData, myBetList);
                for (var i = 0; i < betData.length; i++) {
                    var bet = betData[i];
                    if (bet.master_bets) {
                        for (var j = 0; j < bet.master_bets.length; j++) {
                            if (self._spcNum && self._starArr) {
                                for (var k = 0; k < self._starArr.length; k++) {
                                    if (plyDate[0].player_id == bet.master_bets[j].player_id && self._flyState[i] == -1 && j == self._starArr[k]) {
                                        self._flyState[i] = 0;
                                    }
                                }
                            }
                            else {
                                if (plyDate[0].player_id == bet.master_bets[j].player_id && self._flyState[i] == -1) {
                                    self._flyState[i] = 0;
                                }
                            }
                        }
                    }
                }
                self._othFirGold = otherGold;
                var tempOther = [];
                for (var i = 0; i < self._othFirGold.length; i++) {
                    tempOther[i] = self._othFirGold[i] - self._othSecGold[i];
                    self._othSecGold[i] = self._othFirGold[i];
                }
                var tempSix = [];
                for (var i = 0; i < 6; i++) {
                    var tempArr = [];
                    for (var j = 0; j < self._areaNum; j++) {
                        tempArr.push(0);
                    }
                    tempSix.push(tempArr);
                }
                var sixs = self.getSixGold(plyDate, betData);
                self._firData = sixs;
                for (var i = 0; i < 6; i++) {
                    var _loop_3 = function (j) {
                        var temp = self._firData[i][j] - self._secData[i][j];
                        tempSix[i][j] = temp;
                        self._secData[i][j] = self._firData[i][j];
                        if (i == 0 && temp > 0 || self._flyState[j] == 0) {
                            if (self._isFly == false) {
                                self._flyState[j] = 1;
                                self._isFly = true;
                                if (self._endPosArr[j]) {
                                    var endP = { x: self._endPosArr[j].x + 14, y: self._endPosArr[j].y + 14 };
                                    self.flyStar(endP, function () {
                                        self._isFly = false;
                                        var img = new cui.Image();
                                        img.source = "common@xing" /* xing */;
                                        self._parent.addChild(img);
                                        img.x = self._endPosArr[j].x;
                                        img.y = self._endPosArr[j].y;
                                    });
                                    TRain.soundMgr.playSFX("jiesuan2" /* jiesuan2 */);
                                }
                            }
                        }
                    };
                    for (var j = 0; j < self._areaNum; j++) {
                        _loop_3(j);
                    }
                }
                var GoldArr = { other: tempOther, six: tempSix };
                return GoldArr;
            }
        };
        GoldMange.prototype.flyStar = function (toArea, fin, tar) {
            var self = this;
            var wrapper = self._particleWrapper;
            if (!wrapper) {
                wrapper = self._particleWrapper = TRain.WrapperMgr.getWrapper();
                var ani = new game.StarParticleAni(self._parent);
                wrapper.ani = ani;
            }
            wrapper.stop();
            wrapper.ani.setData(self._startPos, toArea);
            wrapper.start(fin, tar);
        };
        GoldMange.prototype.reset = function () {
            var self = this;
            self.clear();
            self._parent = null;
            self._firData.length = 0;
            self._secData.length = 0;
            self._othFirGold.length = 0;
            self._othSecGold.length = 0;
            if (self._particleWrapper) {
                TRain.WrapperMgr.freeWrapper(self._particleWrapper);
                self._particleWrapper = undefined;
            }
        };
        GoldMange.prototype.clear = function () {
            var self = this;
            var parent = self._parent;
            if (parent)
                parent.removeChildren();
            for (var i = 0; i < self._areaNum; i++) {
                self._flyState[i] = -1;
            }
        };
        return GoldMange;
    }());
    game.GoldMange = GoldMange;
    __reflect(GoldMange.prototype, "game.GoldMange");
})(game || (game = {}));
var game;
(function (game) {
    var MsgBox;
    (function (MsgBox) {
        //tag =0 表示取消  =1表示确定
        function showBoxCB(gp, key, fun, tar) {
            var txt = TRain.langMgr.getTxt(gp, key);
            game.BoxMgr.showBox(txt, fun, tar);
        }
        MsgBox.showBoxCB = showBoxCB;
        function showBoxCB2(str, fun, tar) {
            game.BoxMgr.showBox(str, fun, tar);
        }
        MsgBox.showBoxCB2 = showBoxCB2;
        function showPrintBoxCB(gpName, key, fun, tar) {
            var rest = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                rest[_i - 4] = arguments[_i];
            }
            var txt = TRain.langMgr.getTxt(gpName, key);
            rest.unshift(txt);
            txt = StringUtil.printf.apply(StringUtil, rest);
            game.BoxMgr.showBox(txt, fun, tar);
        }
        MsgBox.showPrintBoxCB = showPrintBoxCB;
        //跳转商城
        function showGoldBox(gpName, key, tar) {
            var rest = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                rest[_i - 3] = arguments[_i];
            }
            var txt = TRain.langMgr.getTxt(gpName, key);
            rest.unshift(txt);
            txt = StringUtil.printf.apply(StringUtil, rest);
            game.BoxMgr.showBox(txt, function (tag) {
                if (tag == 1 && game.dataMgr.generalMo.isFunOpen(7 /* shop */)) {
                    game.gameScene.closeAllPopup(); //打开商城前关闭所有弹出框
                    game.gameScene.showHallUI(2 /* shop */);
                }
            }, tar);
        }
        MsgBox.showGoldBox = showGoldBox;
        //维护提示
        function showSafeGuard(startTm, endTm) {
            var txt;
            if (startTm || endTm) {
                var start = TimeUtil.formatTsStr(startTm);
                var end = TimeUtil.formatTsStr(endTm);
                txt = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 901 /* safeguarding */), start, end);
            }
            else {
                txt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 900 /* safeguard */);
            }
            showTipBox(true, 124 /* e_rmt_server_down */, "mainLang" /* mainLang */, txt);
        }
        MsgBox.showSafeGuard = showSafeGuard;
        //提示文字 
        /**
         *
         * @param isErr 是否是服务器错误码 langConsts.errCode.xxx
         * @param code 错误码
         * @param gp 组名
         * @param txt 文本，如果是已经处理过的，就传个文本过来
         */
        function showTipBox(isErr, code, gp, txt, color, isSpc) {
            var tmpCode = code;
            var codeTxt;
            if (isSpc) {
                codeTxt = TRain.langMgr.getErrText(code);
                var tmpTxt = codeTxt.split("&");
                codeTxt = tmpTxt[0];
                var tmpVer = parseInt(tmpTxt[1]);
                if (tmpVer == 2) {
                    game.BoxMgr.showEasyWarmBox(codeTxt);
                }
                else if (tmpVer == 3) {
                    game.BoxMgr.showWarmBox(codeTxt);
                }
                else {
                    showErr(codeTxt);
                }
            }
            else {
                if (isErr) {
                    tmpCode = code + 100000;
                }
                var tipConf = game.dataMgr.generalMo.getTipConf(tmpCode);
                if (tipConf) {
                    if (tipConf.show == 2) {
                        if (txt) {
                            codeTxt = txt;
                        }
                        else {
                            if (isErr) {
                                codeTxt = TRain.langMgr.getErrText(code);
                            }
                            else {
                                codeTxt = TRain.langMgr.getTxt(gp, code);
                            }
                        }
                        game.BoxMgr.showEasyWarmBox(codeTxt);
                    }
                    else if (tipConf.show == 3) {
                        if (txt) {
                            codeTxt = txt;
                        }
                        else {
                            if (isErr) {
                                codeTxt = TRain.langMgr.getErrText(code);
                            }
                            else {
                                codeTxt = TRain.langMgr.getTxt(gp, code);
                            }
                        }
                        game.BoxMgr.showWarmBox(codeTxt);
                    }
                    else {
                        if (txt) {
                            codeTxt = txt;
                            game.TipsMgr.showPrompt(codeTxt);
                        }
                        else {
                            if (isErr) {
                                showErr(code);
                            }
                            else {
                                showTxt(gp, code, 40, color);
                            }
                        }
                    }
                }
            }
        }
        MsgBox.showTipBox = showTipBox;
        /**
         *
         * @param gp 组名
         * @param key 语言包枚举
         * @param other 增加的
         * @param isNotOk 不显示确认按钮 true
         */
        function showBox(gp, key, other, isNotOk) {
            var txt = TRain.langMgr.getTxt(gp, key);
            if (other)
                txt += other;
            game.BoxMgr.showBox(txt, null, self, isNotOk);
        }
        MsgBox.showBox = showBox;
        function showErr(errCode) {
            var txt;
            if (typeof errCode == 'number') {
                txt = TRain.langMgr.getErrText(errCode);
            }
            else {
                txt = errCode;
            }
            game.TipsMgr.showPrompt(txt, 15615301 /* red */);
        }
        MsgBox.showErr = showErr;
        function showPrompt(errCode) {
            var txt;
            if (typeof errCode == 'number') {
                txt = TRain.langMgr.getErrText(errCode);
            }
            else {
                txt = errCode;
            }
            // let conf = dataMgr.generalMo.getPromptConf( errCode );
            // if( conf ){
            // }
            // else{
            //直接显示
            game.TipsMgr.showPrompt(txt, 15615301 /* red */);
            // }
        }
        MsgBox.showPrompt = showPrompt;
        /**
         *
         * @param gpName
         * @param key
         * @param color  默认白色
         */
        function showTxt(gpName, key, size, color) {
            var txt = TRain.langMgr.getTxt(gpName, key);
            game.TipsMgr.showPrompt(txt, color, 3000, false, size);
        }
        MsgBox.showTxt = showTxt;
        /**
         *
         * @param gpName
         * @param key
         * @param repValue 要替换的
         * @param color  默认白色
         */
        function showPrintfTxt(gpName, key, color) {
            var rest = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                rest[_i - 3] = arguments[_i];
            }
            var txt = TRain.langMgr.getTxt(gpName, key);
            rest.unshift(txt);
            txt = StringUtil.printf.apply(StringUtil, rest);
            game.TipsMgr.showPrompt(txt, color);
        }
        MsgBox.showPrintfTxt = showPrintfTxt;
    })(MsgBox = game.MsgBox || (game.MsgBox = {}));
    game.msgPrompt = MsgBox;
})(game || (game = {}));
var game;
(function (game) {
    var UIUtils;
    (function (UIUtils) {
        UIUtils.quakeFun = EaseUtil.getQuakeFun(5, 5);
        // export function itemFlyTo(parent, display, targetPos, cb) {
        // 	let actionSeq = TRain.ActionSequence.create(
        // 		TRain.ActionPropTo.create(1000, {x:targetPos.x, y:targetPos.y, scaleX:0.3, scaleY:0.3}),
        // 		TRain.ActionCallFun.create(0, function() {
        // 			parent.removeChild(display);
        // 			TRain.actionMgr.rmvAction(actionSeq);
        // 			cb();
        // 		}, self)
        // 	);
        // 	TRain.actionMgr.addAction(actionSeq, display, false);
        // }
        /**
         * @param targetPos中可以设置多个属性 例如 x ,y , scaleX,scaleY   {x:600,y:110,scaleX:0.3,scaleY:0.3}
         * confConsts.GameTp.xxx
         * TRain.core.addDelayDo( move, self, delayTime, 游戏id, false, display, targetPos, speed, dur ,times );
         */
        function move(display, targetPos, speed, dur, times, cb, flag) {
            if (dur === void 0) { dur = 1000; }
            if (times === void 0) { times = 1; }
            var action = new TRain.ActionPropTo(dur, times, targetPos);
            action.setEaseFun(speed);
            if (cb) {
                var actionCall = new TRain.ActionCallDo();
                actionCall.setCall(cb, self);
                action = new TRain.ActionSequence([action, actionCall]);
            }
            TRain.actionMgr.addAction(action, display, false, flag);
        }
        UIUtils.move = move;
        // export function createMoveAct( x:number, y:number, dur:number, action?:TRain.ActionPropTo ):TRain.ActionPropTo{
        // 	action = action || new TRain.ActionPropTo(dur || 1000, 1 );
        // 	action.addProp();
        // 	return action;
        // }
        // export function createScaleAct( scaleX:number, scaleY:number, dur:number, action?:TRain.ActionPropTo ):TRain.ActionPropTo{
        // 	action = action || new TRain.ActionPropTo(dur || 1000, 1 );
        // 	return action;
        // }
        /**
         * @param targetPos中可以设置多个属性 例如 x ,y , scaleX,scaleY   {x:600,y:110,scaleX:0.3,scaleY:0.3}
         */
        function startActCB(display, actions, cb, flag) {
            var actionSeq = new TRain.ActionSequence();
            actionSeq.setActions(actions);
            if (cb) {
                var actionCall = new TRain.ActionCallDo();
                actionCall.setCall(cb, self);
                actionSeq.addAction(actionCall);
            }
            TRain.actionMgr.addAction(actionSeq, display, false, flag);
        }
        UIUtils.startActCB = startActCB;
        // export function scaleAct(display:egret.DisplayObject,dur:number,dur1:number,scaleX:number,scaleY:number,cb?:Function):void{
        // 	let self = this;
        // 	let oldScaleX = display.scaleX;
        // 	let oldScaleY = display.scaleY;
        // 	let action = new TRain.ActionPropTo(dur,1,{scaleX:scaleX,scaleY:scaleY});
        //     action.setEaseFun(EaseUtil.quadIn);
        //     let action2 = new TRain.ActionPropTo(dur1,1,{scaleX:oldScaleX,scaleY:oldScaleX});
        // 	action2.setEaseFun(EaseUtil.quadOut);
        // 	self.startActCB(display,[action,action2],cb);
        // }
        /**
         * @param scr:资源名
         * @param closeTm:合上的时间
         * @param openTm:翻开的时间
         * @param scaleX:翻开后的scale
         */
        function flipCardCB(display, scr, scaleX, closeTm, openTm, cb, flag) {
            var self = this;
            var action = new TRain.ActionPropTo(closeTm || 250, 1, { scaleX: 0 });
            action.setEaseFun(EaseUtil.quadIn);
            var action1 = new TRain.ActionPropDo(0, { source: scr });
            var action2 = new TRain.ActionPropTo(openTm || 150, 1, { scaleX: scaleX });
            action2.setEaseFun(EaseUtil.quadOut);
            display.anthorPerX = 0.5;
            self.startActCB(display, [action, action1, action2], cb, flag);
        }
        UIUtils.flipCardCB = flipCardCB;
        /**
         * @param missTm:什么时间消失
         *
         * @param LookTm:什么时间出现
         */
        function flashAni(display, missTm, endTm, cb, flag) {
            var action = new TRain.ActionPropDo(missTm, { visible: false });
            var action2 = new TRain.ActionPropDo(endTm, { visible: true });
            startActCB(display, [action, action2], cb, flag);
        }
        UIUtils.flashAni = flashAni;
        //来回缓动
        function sin(t) {
            return Math.sin(t * Math.PI * 2);
        }
        UIUtils.sin = sin;
        function secToStr(sec) {
            var min = Math.floor(sec / 60); //分
            sec = sec - min * 60; //秒
            var minStr = min > 9 ? min : ("0" + min);
            var secStr = sec > 9 ? sec : ("0" + sec);
            return minStr + ":" + secStr;
        }
        UIUtils.secToStr = secToStr;
        /**
         *
         * @param parent 存放星星的容器
         * @param form 初始位置
         * @param to 结束位置
         * @param flyTm 飞行时间
         * @param flag 标记
         * @param cb 返回函数
         */
        function flyStarAni(parent, form, to, flyTm, flag, cb) {
            var self = this;
            form.y -= 80;
            TRain.soundMgr.playSFX("jiesuan2" /* jiesuan2 */);
            flyTm = flyTm || 1000;
            var _loop_4 = function (i) {
                var imgstar = new cui.Image(); //todo 粒子效果
                imgstar.source = i == 0 ? "common@xing" /* xing */ : "common@star" /* star */;
                imgstar.anthorPerX = 0.5;
                imgstar.anthorPerY = 0.5;
                imgstar.scaleX = imgstar.scaleY = 1 - i * 0.1;
                var changeTm = i * 55;
                var actionDelay = new TRain.ActionCallDo(changeTm);
                actionDelay.setCall(function () {
                    parent.addChild(imgstar);
                }, self);
                var actionX = new TRain.ActionPropTween(flyTm, 1, {
                    x: { b: form.x, r: to.x - form.x }
                });
                var actionSeqX = new TRain.ActionSequence([actionDelay, actionX]);
                TRain.actionMgr.addAction(actionSeqX, imgstar, false, flag);
                var actionY = new TRain.ActionPropTween(flyTm + changeTm, 1, {
                    y: { b: form.y, r: to.y - form.y }
                });
                actionY.setEaseFun(EaseUtil.quintIn);
                var actionCall = new TRain.ActionCallDo();
                actionCall.setCall(function () {
                    var index = parent.getChildIndex(imgstar);
                    if (index != -1)
                        parent.removeChild(imgstar);
                    if (cb)
                        cb();
                }, self);
                var actionSeqY = new TRain.ActionSequence([actionY, actionCall]);
                TRain.actionMgr.addAction(actionSeqY, imgstar, false, flag);
            };
            for (var i = 0; i < 5; i++) {
                _loop_4(i);
            }
        }
        UIUtils.flyStarAni = flyStarAni;
        /**
         *
         * @param parent 父容器
         * @param gold 金币
         * @param form 出发点
         * @param to 结束点
         * @param flag 标记
         */
        function showGold(parent, gold, form, to, flag) {
            var self = this;
            var winGold = new cui.BitmapLabel();
            winGold.font = "winMoney" /* winMoney */;
            winGold.text = "+" + game.DataFormat.convertYuanString3(gold);
            winGold.x = form.x;
            winGold.y = form.y;
            winGold.alpha = 0;
            parent.addChild(winGold);
            var action = new TRain.ActionPropTo(300, 1, { alpha: 1 });
            var action1 = new TRain.ActionPropTo(500, 1, { y: to.y });
            var action2 = new TRain.Action(1000);
            var action3 = new TRain.ActionPropTo(800, 1, { alpha: 0 });
            var actionCall = new TRain.ActionCallDo();
            actionCall.setCall(function () {
                if (winGold.parent)
                    parent.removeChild(winGold);
            }, self);
            var actionSeq = new TRain.ActionSequence([action, action1, action2, action3, actionCall]);
            TRain.actionMgr.addAction(actionSeq, winGold, false, flag);
        }
        UIUtils.showGold = showGold;
        function createParticle(nm) {
            var conf = game.dataMgr.generalMo.partConf[nm];
            var sys = new cui.ParticleSys(conf);
            switch (conf.pcls) {
                case "global":
                    sys.particleCls = cui.GlobalParticle;
                    break;
                case "gravity":
                    sys.particleCls = cui.GravityParticle;
                    break;
                case "mov":
                    sys.particleCls = cui.MovParticle;
                    break;
            }
            return sys;
        }
        UIUtils.createParticle = createParticle;
        /**
         * 金币显示滚动增加
         * @param fromGold   初始金币
         * @param fromGold   最终金币
         * @param fromGold   你的label或者bitmaplabel
         * @param fromGold   是否是bitmaplabel  是就true不是false
         * @param fromGold   就是self
         * @param fromGold   游戏id
         */
        function showRollGold(fromGold, toGold, target, isBit, thisObj, flag, hasYuan) {
            if (hasYuan === void 0) { hasYuan = true; }
            //每次变化间隔时间
            var duration = 5;
            //变化次数
            var count = 1;
            //金币差
            var lerp = toGold - fromGold;
            var gold;
            //每次变化数量
            var num = ~~(lerp / count);
            var temp = !isBit ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */) : "y" /* y */;
            var _loop_5 = function (i) {
                var n = TRain.core.addDelayDo(function () {
                    gold = Math.floor(game.DataFormat.convertGold((fromGold + i * num)));
                    target.text = hasYuan ? (~~game.DataFormat.convertGold(fromGold + i * num) + temp) : gold;
                    // target.text = hasYuan ? DataFormat.convertYuanString((fromGold + i * num), !isBit) : gold;
                    TRain.core.rmvDelayDoByID(n);
                }, thisObj, duration * (i - 1), flag);
            };
            for (var i = 1; i <= count; i++) {
                _loop_5(i);
            }
            if ((fromGold + count * num) != toGold) {
                var n2_1 = TRain.core.addDelayDo(function () {
                    gold = Math.floor(game.DataFormat.convertGold(toGold));
                    target.text = hasYuan ? (~~game.DataFormat.convertGold(toGold) + temp) : gold;
                    // target.text = hasYuan ? DataFormat.convertYuanString(toGold, !isBit) : gold;
                    TRain.core.rmvDelayDoByID(n2_1);
                }, thisObj, duration * count, flag);
            }
        }
        UIUtils.showRollGold = showRollGold;
        /**
         * 数字显示滚动增加
         * @param toNum     最终数字
         * @param item      ui
         * @param str1 2    前缀/后缀
         * @param allTime   总时长
         * @param target    self
         * @param delay     延迟显示
         */
        function showRollGold1(toNum, item, target, allTime, delay, str1, str2) {
            if (delay === void 0) { delay = 0; }
            if (str1 === void 0) { str1 = ""; }
            if (str2 === void 0) { str2 = ""; }
            //每次变化间隔时间
            var duration = 8;
            //开始金币
            var fromNum = toNum > 500 ? toNum / 2 : 0;
            //金币差
            var lerp = toNum - fromNum;
            //变化次数
            var count = allTime > 0 ? Math.ceil(allTime / duration) : 1;
            // let count = 1;
            // if(lerp > 1000000){
            // 	count = 80 * Math.floor(lerp / 1000000);
            // }else if(lerp > 100000){
            // 	count = 70 * Math.floor(lerp / 100000);
            // }else if(lerp > 10000){
            // 	count = 60 * Math.floor(lerp / 10000);
            // }else if(lerp > 1000){
            // 	count = 50 * Math.floor(lerp / 1000);
            // }else if(lerp > 100){
            // 	count = 40 * Math.floor(lerp / 100);
            // }else if(lerp > 10){
            // 	count = 5 * Math.floor(lerp / 10);
            // }
            //判断是否整数
            var isInt = Math.floor(toNum) == toNum;
            //每次变化数量
            var num = isInt ? Math.ceil(lerp / count) : lerp / count;
            var curNum = fromNum;
            var delayId = TRain.core.addDelayDo(function () {
                TRain.core.rmvDelayDoByID(delayId);
                var n = TRain.core.addFrameDo(function () {
                    curNum = isInt ? Math.ceil(curNum + num) : Math.floor((curNum + num) * 100) / 100;
                    if (curNum >= toNum) {
                        curNum = toNum;
                        TRain.core.rmvFrameDoById(n);
                    }
                    item.text = str1 + curNum + str2;
                }, target, false, duration);
            }, target, delay);
        }
        UIUtils.showRollGold1 = showRollGold1;
        function getQRCodeTeam(id, codeTag, cb) {
            var key = "QRteamId" + id + "_" + codeTag;
            var val = game.GameUtil.getLocal(key);
            var isChgQR = game.dataMgr.accMo.getIsChgQR();
            if (val && !isChgQR) {
                cb(val);
            }
            else {
                var LinkUrl = getQRLinkUrl1(id, codeTag, 2);
                var args = { playerid: String(id), link: LinkUrl };
                game.HttpUtil.askCreateImg(args, false, function (data) {
                    var base64 = "";
                    if (data) {
                        if (data.info) {
                            base64 = data.info;
                        }
                        game.GameUtil.setLocal(key, base64);
                        cb(base64);
                    }
                }, self);
            }
        }
        UIUtils.getQRCodeTeam = getQRCodeTeam;
        function getQRCodeTeam1(id, codeTag, cb) {
            var key = "QRteamId" + id + "_" + codeTag;
            var shareUrl = game.dataMgr.generalMo.getShareUrl();
            var args = { playerid: String(id), link: shareUrl };
            game.HttpUtil.askCreateImg(args, false, function (data) {
                var base64 = "";
                if (data) {
                    if (data.info) {
                        base64 = data.info;
                    }
                    game.GameUtil.setLocal(key, base64);
                    cb(base64);
                }
            }, self);
        }
        UIUtils.getQRCodeTeam1 = getQRCodeTeam1;
        function getQRCodePly(cb) {
            var myID = game.dataMgr.accMo.getData().aid;
            var key = "QRPlyId" + myID;
            var val = game.GameUtil.getLocal(key);
            var isChgQR = game.dataMgr.accMo.getIsChgQR();
            if (val && !isChgQR) {
                cb(val);
            }
            else {
                var LinkUrl = getQRLinkUrl1(myID);
                var args = { playerid: String(myID), link: LinkUrl };
                game.HttpUtil.askCreateImg(args, false, function (data) {
                    var base64 = "";
                    if (data) {
                        if (data.info) {
                            base64 = data.info;
                        }
                        game.GameUtil.setLocal(key, base64);
                        cb(base64);
                    }
                }, self);
            }
        }
        UIUtils.getQRCodePly = getQRCodePly;
        function getQRCodePly1(cb) {
            var myID = game.dataMgr.accMo.getData().aid;
            var key = "QRPlyId" + myID;
            var shareUrl = game.dataMgr.generalMo.getShareUrl();
            var LinkUrl = getQRLinkUrl1(myID, null, 1, shareUrl);
            var args = { playerid: String(myID), link: LinkUrl };
            game.HttpUtil.askCreateImg(args, false, function (data) {
                var base64 = "";
                if (data) {
                    if (data.info) {
                        base64 = data.info;
                    }
                    game.GameUtil.setLocal(key, base64);
                    cb(base64);
                }
            }, self);
        }
        UIUtils.getQRCodePly1 = getQRCodePly1;
        function getQRLinkUrl(id, codeTag, type) {
            if (type === void 0) { type = 1; }
            var ID = id;
            var url = { channelID: "", params: "" };
            var tag = codeTag;
            var playerID = "";
            if (type == 1) {
                playerID = type + "|" + String(ID);
            }
            else if (type == 2) {
                playerID = type + "|" + String(ID) + ":" + tag;
            }
            var signKey = Base64.base64Encode(playerID);
            var channelID = game.dataMgr.accMo.getData().channelId;
            url.channelID = channelID;
            url.params = channelID + "/?channelId=" + channelID + "&recommendId=" + signKey;
            return url;
        }
        UIUtils.getQRLinkUrl = getQRLinkUrl;
        function getQRLinkUrl1(id, codeTag, type, newUrl) {
            if (type === void 0) { type = 1; }
            var ID = id;
            var url = "";
            var erweimaUrl = newUrl || CONF.erweima;
            var tag = codeTag;
            var playerID = "";
            if (type == 1) {
                playerID = type + "|" + String(ID);
            }
            else if (type == 2) {
                playerID = type + "|" + String(ID) + ":" + tag;
            }
            var signKey = Base64.base64Encode(playerID);
            var channelID = game.dataMgr.accMo.getData().channelId;
            url = erweimaUrl + channelID + "/?channelId=" + channelID + "&recommendId=" + signKey;
            return url;
        }
        UIUtils.getQRLinkUrl1 = getQRLinkUrl1;
        function enterActionCom(item, moveX, moveY, moveTime, delay, isCenter, cb) {
            var self = this;
            var arr = [];
            if (delay) {
                var action1 = new TRain.Action(delay);
                arr.push(action1);
            }
            var action = new TRain.ActionPropDo(0, { visible: true });
            arr.push(action);
            var act = isCenter ? { vCenter: moveX, hCenter: moveY } : { x: moveX, y: moveY };
            var action2 = new TRain.ActionPropTo(moveTime, 1, act);
            action2.setEaseFun(EaseUtil.sineOut);
            arr.push(action2);
            game.UIUtils.startActCB(item, arr, cb);
        }
        UIUtils.enterActionCom = enterActionCom;
    })(UIUtils = game.UIUtils || (game.UIUtils = {}));
})(game || (game = {}));
var game;
(function (game) {
    var BindGiftDialog = (function (_super) {
        __extends(BindGiftDialog, _super);
        function BindGiftDialog() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "BindGiftSkin2";
            self.hCenter = 0;
            self.vCenter = 0;
            self._sayDur = 500;
            self._delayDur = 1000;
            self.hCenter = self.vCenter = 0;
            self._gameTag = self._gameTag = TRain.actionMgr.getUnitTag();
            self._arr = new cui.ArrayCollection();
            return _this;
        }
        BindGiftDialog.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            // (self.skDataGrp.layout as cui.DataLineLayout).horizontalAlign = "center";
            // (self.skDataGrp.layout as cui.DataLineLayout).verticalAlign = "center";
            // game.dataMgr.actMo.addPropListener("bindActList", self.upateIcon, self);
            TRain.core.stage.addEventListener(egret.TouchEvent.TOUCH_END, self.showArrow, self);
            self._sayID = TRain.core.addDelayDo(function () {
                game.UIUtils.move(self.skGrpSay, { scaleX: 1, scaleY: 1 }, EaseUtil.quadInOut, self._sayDur, undefined, undefined, self._gameTag);
                TRain.core.rmvDelayDoByID(self._sayID);
                self._sayID = undefined;
            }, self, self._delayDur);
            self.skBtnClose.sound = "click" /* click */;
            self.skBtnClose.setTarget(function () {
                self.close();
                game.dataMgr.generalMo.postEvent("close" /* Close */ + "");
            }, self);
            self.skBtnBind.sound = "click" /* click */;
            self.skBtnBind.setTarget(function () {
                var view = new game.Registered();
                view.setData(true);
                game.gameScene.openPopup(view);
                self.close();
            }, self);
            var bindAct = game.dataMgr.actMo.getData();
            if (bindAct) {
                var gold = bindAct.bindGold;
                self.skBindAct.visible = gold > 0;
                var formatGold = game.DataFormat.convertYuanString2(gold);
                self.skBindAct.getChildAt(1).text = formatGold;
            }
            else {
                self.skBindAct.visible = false;
            }
            self.skDataGrp.itemRender = BindGiftItem;
            self.skDataGrp.dataProvider = self._arr;
            //测试
            // let bindActList = [{ tId: 11, uId: 11, name: "在线奖励", sort: 9999 },
            // { tId: 11, uId: 11, name: "在线奖励", sort: 9999 }];
            var bindActList1 = game.dataMgr.actMo.getData().bindActList;
            // bindActList1 = [];
            if (bindActList1) {
                var bbd = game.dataMgr.generalMo.bindBenData;
                var count = bbd.benefitsCount;
                var gold = bbd.benefitsGold;
                var t = TRain.langMgr.getTxt("mainLang" /* mainLang */, 837 /* bindAndSave */);
                var v = game.DataFormat.convertGold(count * gold);
                var str = StringUtil.printf(t, v);
                var bindActList = bindActList1.concat();
                bindActList.push({ tId: 0, uId: 9999, name: str, sort: 9999 });
                // let bindActList = [];
                // bindActList.push({ tId: 0, uId: 9999, name: str, sort: 9999 });
                // bindActList.push({ tId: 0, uId: 9999, name: str, sort: 9999 });
                // bindActList.push({ tId: 0, uId: 9999, name: str, sort: 9999 });
                if (self.skConf && self.skConf.tag == 1) {
                    self._one = 233;
                    self._two = 138;
                    self._three = 43;
                }
                else if (self.skConf && self.skConf.tag == 2) {
                    self._one = 180;
                    self._two = 95;
                    self._three = 10;
                }
                else {
                    self._one = 206;
                    self._two = 127;
                    self._three = 48;
                }
                if (bindActList.length == 1) {
                    self.skDataGrp.layout.paddingLeft = self._one;
                }
                else if (bindActList.length == 2) {
                    self.skDataGrp.layout.paddingLeft = self._two;
                }
                else if (bindActList.length == 3) {
                    self.skDataGrp.layout.paddingLeft = self._three;
                }
                else {
                    self.skDataGrp.layout.paddingLeft = 0;
                }
                bindActList.sort(function (a, b) {
                    return b.sort - a.sort;
                });
                self._arr.source = bindActList;
                self._arr.refresh();
            }
            self.skLeft.setTarget(function () {
                if (self.skScroller.scrollH < 700) {
                    self.skScroller.setScrollLeft(0, 500);
                }
                else {
                    self.skScroller.setScrollLeft(self.skScroller.scrollH - 700, 400);
                }
                TRain.core.addDelayDo(self.showArrow, self, 500);
            }, self);
            self.skRight.setTarget(function () {
                self.skScroller.setScrollLeft(self.skScroller.scrollH + 700, 400);
                TRain.core.addDelayDo(self.showArrow, self, 500);
            }, self);
            self.skLeft.visible = false;
            if (self.skDataGrp.contentWidth <= self.skScroller.width) {
                self.skRight.visible = false;
            }
        };
        BindGiftDialog.prototype.showArrow = function () {
            var self = this;
            if (self.skDataGrp.scrollH <= 10) {
                self.skLeft.visible = false;
            }
            else {
                self.skLeft.visible = true;
            }
            if (self.skDataGrp.scrollH + self.skDataGrp.width >= self.skDataGrp.contentWidth) {
                self.skRight.visible = false;
            }
            else {
                self.skRight.visible = true;
            }
        };
        // private upateIcon() {
        //     let self = this;
        //     let bindActList = dataMgr.actMo.getData().bindActList;
        //     self._arr.source = bindActList;
        //     self._arr.refresh();
        // }
        BindGiftDialog.prototype.onDispose = function () {
            var self = this;
            // game.dataMgr.actMo.rmvPropListener("bindActList", self);
            if (!isNaN(self._sayID)) {
                TRain.core.rmvDelayDoByID(self._sayID);
            }
            TRain.actionMgr.rmvActsByTag(self._gameTag);
            TRain.core.rmvDelayDo(self.showArrow, self);
            TRain.core.stage.removeEventListener(egret.TouchEvent.TOUCH_END, self.showArrow, self);
            _super.prototype.onDispose.call(this);
        };
        return BindGiftDialog;
    }(game.UIPopup));
    game.BindGiftDialog = BindGiftDialog;
    __reflect(BindGiftDialog.prototype, "game.BindGiftDialog");
    var BindGiftItem = (function (_super) {
        __extends(BindGiftItem, _super);
        function BindGiftItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "BindGiftItemSkin";
            return _this;
        }
        BindGiftItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
        };
        BindGiftItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var vo = self._data;
            self.skImg.source = "bindGift@gold" + vo.tId;
            self.skLab.text = vo.name;
        };
        return BindGiftItem;
    }(cui.DataItem));
    game.BindGiftItem = BindGiftItem;
    __reflect(BindGiftItem.prototype, "game.BindGiftItem");
})(game || (game = {}));
var game;
(function (game) {
    var SaveMoneyDialog = (function (_super) {
        __extends(SaveMoneyDialog, _super);
        function SaveMoneyDialog() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "SaveMoneySkin";
            self.hCenter = self.vCenter = 0;
            return _this;
        }
        SaveMoneyDialog.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skBtnClose.sound = "click" /* click */;
            self.skBtnClose.setTarget(function () {
                self.close();
            }, self);
            //充值
            self.skBtnCharge.setTarget(function () {
                self.close();
                game.gameScene.showHallUI(2 /* shop */);
            }, self);
            //领取救济金
            self.skBtnSave.setTarget(function () {
                self.getSaveMoney();
            }, self);
            self.updateInfo();
            // dataMgr.accMo.addListener("getSaveMoney", function () {
            //     self.updateInfo();
            // }, self);
        };
        SaveMoneyDialog.prototype.updateInfo = function () {
            //今日剩余次数
            var self = this;
            var bbd = game.dataMgr.generalMo.bindBenData;
            var count = bbd.benefitsCount - game.dataMgr.accMo.getData().collected;
            self.skLabCount.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang", 688 /* AlmsRestCount */), count);
            //领取金币限制条件
            self.skLabCondition.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang", 689 /* AlmsGetCondition */), game.DataFormat.convertGold(bbd.benefitsLimit).toFixed(2));
        };
        //领取救济金
        SaveMoneyDialog.prototype.getSaveMoney = function () {
            var self = this;
            game.dataMgr.generalMo.sendBenefits();
            self.close();
        };
        return SaveMoneyDialog;
    }(game.UIPopup));
    game.SaveMoneyDialog = SaveMoneyDialog;
    __reflect(SaveMoneyDialog.prototype, "game.SaveMoneyDialog");
})(game || (game = {}));
var game;
(function (game) {
    var disTable = (function (_super) {
        __extends(disTable, _super);
        function disTable(plyCount, data, disID) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "disMissView";
            self._plyCount = plyCount;
            self._disID = disID;
            self._data = data;
            return _this;
        }
        disTable.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            if (self.skConfGrp)
                self._tag = self.skConfGrp.tag;
            if (self.skBack1) {
                self.skBack.visible = (self._plyCount > 4);
                self.skBack1.visible = (self._plyCount <= 4);
            }
            self.AllPos();
            var plyNick = "";
            for (var i = 0; i < self._plyCount; i++) {
                var tempDta = self._data[i];
                if (tempDta) {
                    if (tempDta.plyId == self._disID) {
                        plyNick = tempDta.nickName;
                    }
                }
            }
            self.skAskDis.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 965 /* askDismiss */), plyNick);
            self._time = 60;
            TRain.core.addFrameDo(self.showText, self, true, 1000);
        };
        disTable.prototype.showText = function () {
            var self = this;
            self._time = self._time - 1;
            self.skNotice.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 966 /* disNotice */), self._time));
            if (self._time == 0) {
                TRain.core.rmvFrameDo(self, self.showText);
            }
        };
        disTable.prototype.reSet = function () {
            var self = this;
            var list = self.skJiesanGrp;
            TRain.core.rmvFrameDo(self, self.showText);
            list.removeChildren();
        };
        disTable.prototype.AllPos = function () {
            var self = this;
            var count = self._plyCount;
            if (count == 2) {
                self._posArr = (self._tag == 0) ? [283, 506] : ((self._tag == 1) ? [297, 531] : [190, 428]);
            }
            else if (count == 3) {
                self._posArr = (self._tag == 0) ? [228, 401, 574] : ((self._tag == 1) ? [237, 415, 593] : [126, 313, 500]);
            }
            else if (count == 4) {
                self._posArr = (self._tag == 0) ? [143, 316, 489, 662] : ((self._tag == 1) ? [165, 324, 483, 642] : [99, 242, 384, 527]);
            }
            else if (count == 5) {
                self._posArr = (self._tag == 0) ? [43, 220, 397, 573, 750] : ((self._tag == 1) ? [69, 243, 417, 591, 765] : [57, 185, 313, 440, 568]);
            }
            else if (count == 6) {
                self._posArr = (self._tag == 0) ? [12, 164, 315, 467, 618, 770] : ((self._tag == 1) ? [24, 175, 326, 477, 628, 779] : [20, 136, 253, 369, 486, 602]);
            }
        };
        disTable.prototype.setData = function (data) {
            var self = this;
            self._data = data;
            self.updateView();
        };
        disTable.prototype.updateView = function () {
            var self = this;
            var list = self.skJiesanGrp;
            list.removeChildren();
            for (var i = 0; i < self._plyCount; i++) {
                var tempDta = self._data[i];
                if (tempDta) {
                    var showData = {
                        nickName: tempDta.nickName,
                        head: tempDta.head,
                        vip: tempDta.vip,
                        agree: tempDta.agree,
                    };
                    var tempTile = new DisTile(showData);
                    tempTile.x = self._posArr[i];
                    list.addChild(tempTile);
                }
            }
        };
        return disTable;
    }(cui.Component));
    game.disTable = disTable;
    __reflect(disTable.prototype, "game.disTable");
    var DisTile = (function (_super) {
        __extends(DisTile, _super);
        function DisTile(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "disMissInfoSkin";
            self._data = data;
            return _this;
        }
        DisTile.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skHeadFrame.source = "head@old" /* oldFrame */ + data.vip;
            self.skState.source = (data.agree == -1) ? "jeisan@txt_wait" : ((data.agree == 1) ? "jeisan@txt_agree" : "jeisan@txt_no");
            self.skNickName.text = game.DataFormat.formatName(data.nickName, 8);
        };
        return DisTile;
    }(cui.DataItem));
    game.DisTile = DisTile;
    __reflect(DisTile.prototype, "game.DisTile");
})(game || (game = {}));
var game;
(function (game) {
    var ExtensionNoticeView = (function (_super) {
        __extends(ExtensionNoticeView, _super);
        function ExtensionNoticeView(isCreate, data) {
            var _this = _super.call(this) || this;
            _this._isCreate = -1;
            var self = _this;
            self._isCreate = isCreate;
            self._data = data;
            self.skinName = "TeamNoticeSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        ExtensionNoticeView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            if (self.skConfGrp) {
                self._tag = self.skConfGrp.tag;
            }
            game.dataMgr.generalMo.addListener("PerformTeamcreate" /* PerformTeamcreate */, self.showResult, self);
            game.dataMgr.generalMo.addListener("PerformTeamupdate" /* PerformTeamupdate */, self.showResult2, self);
            self.skclose.setTarget(function () {
                game.dataMgr.generalMo.rmvListener("PerformTeamcreate" /* PerformTeamcreate */, self);
                game.dataMgr.generalMo.rmvListener("PerformTeamupdate" /* PerformTeamupdate */, self);
                self.close();
            }, self);
            var CreateGrp = self.skCreateGrp;
            var ChangeGrp = self.skChangeGrp;
            var resetGrp = self.skresetGrp;
            if (self._isCreate == 0) {
                self.sknoticeName.source = (self._tag == 2) ? "txt_cjtd" : "extend@txt_createTeam";
                CreateGrp.visible = true;
                ChangeGrp.visible = false;
                resetGrp.visible = false;
            }
            else if (self._isCreate == 1) {
                self.sknoticeName.source = (self._tag == 2) ? "txt_xgdm" : "extend@txt_changeTeamN";
                CreateGrp.visible = false;
                ChangeGrp.visible = true;
                resetGrp.visible = false;
            }
            else if (self._isCreate == 2) {
                self.sknoticeName.source = (self._tag == 2) ? "txt_ts" : "extend@txt_tishi";
                CreateGrp.visible = false;
                ChangeGrp.visible = false;
                resetGrp.visible = true;
            }
            self.sksetname.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 734 /* setteamname */);
            self.sksetnum.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 736 /* setPaixian */);
            self.skTname.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 731 /* teamname */);
            self.skTname.promptColor = 0x988293;
            self.skTname.addEventListener(egret.Event.CHANGE, self.OnAccount, self);
            self.skTname.addEventListener(egret.Event.FOCUS_IN, self.onFocus1, self);
            self.skTnum.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 737 /* teamsNum */);
            self.skTnum.promptColor = 0x988293;
            self.skTnum.addEventListener(egret.Event.CHANGE, self.OnAccount1, self);
            self.skTnum.addEventListener(egret.Event.FOCUS_IN, self.onFocus2, self);
            self.skCreate.setTarget(function () {
                if (self.skTname.text.length > 0) {
                    var isNumber = self.getIsAllNumber(self.skTname.text);
                    var limitNumber = self.getIsAllNumber(self.skTnum.text);
                    if (isNumber) {
                        game.MsgBox.showTipBox(false, 738 /* notAllNumber */, "mainLang" /* mainLang */);
                    }
                    else {
                        var teamNum = parseInt(self.skTnum.text);
                        if (teamNum < 1 || teamNum > 50 || self.skTnum.text.length == 0) {
                            game.MsgBox.showTipBox(false, 739 /* wrongNumber */, "mainLang" /* mainLang */);
                        }
                        else {
                            if (limitNumber) {
                                if (true)
                                    console.log("创建团队的名字是：   ", self.skTname.text);
                                game.dataMgr.generalMo.setCreateTeamName(self.skTname.text);
                                game.dataMgr.generalMo.sendCreateTeam(teamNum, self.skTname.text);
                            }
                            else {
                                game.MsgBox.showTipBox(false, 751 /* inputNum */, "mainLang" /* mainLang */);
                            }
                        }
                    }
                }
                else {
                    game.MsgBox.showTipBox(false, 733 /* cannotnoTeam */, "mainLang" /* mainLang */);
                }
            }, self);
            self.skTishi.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 743 /* notices */);
            self.skTchange.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 735 /* teamsName */);
            self.skTchange.promptColor = 0x988293;
            self.skTchange.addEventListener(egret.Event.CHANGE, self.OnAccount2, self);
            self.skTchange.addEventListener(egret.Event.FOCUS_IN, self.onFocus3, self);
            self.skcancle.setTarget(self.close, self);
            self.skchange.setTarget(function () {
                if (self.skTchange.text.length > 0) {
                    var isNumber = self.getIsAllNumber(self.skTchange.text);
                    if (isNumber) {
                        game.MsgBox.showTipBox(false, 738 /* notAllNumber */, "mainLang" /* mainLang */);
                    }
                    else {
                        var data = self._data;
                        if (true)
                            console.log("修改团队的名字是：   ", self.skTchange.text);
                        game.dataMgr.generalMo.setChangeTeamName(self.skTchange.text);
                        game.dataMgr.generalMo.sendChangeTeamName(2, data.id, data.count_limit, self.skTchange.text);
                    }
                }
                else {
                    game.MsgBox.showTipBox(false, 733 /* cannotnoTeam */, "mainLang" /* mainLang */);
                }
            }, self);
            self.skReset.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 745 /* resetMa */)));
            if (self.sknoSure)
                self.sknoSure.setTarget(self.close, self);
            self.skSure.setTarget(function () {
                var data = self._data;
                game.dataMgr.generalMo.sendChangeTeamName(0, data.id, data.count_limit, data.name);
            }, self);
        };
        ExtensionNoticeView.prototype.getIsAllNumber = function (val) {
            var regPos = /^\d+(\.\d+)?$/; //非负浮点数
            var regNeg = /^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/; //负浮点数
            if (regPos.test(val) || regNeg.test(val)) {
                return true;
            }
            else {
                return false;
            }
        };
        ExtensionNoticeView.prototype.onFocus1 = function (e) {
            this.skTname.text = "";
        };
        ExtensionNoticeView.prototype.OnAccount = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skTname.text = inputText;
            self.skTname.textColor = 0xe9e9e9;
        };
        ExtensionNoticeView.prototype.onFocus2 = function (e) {
            this.skTnum.text = "";
        };
        ExtensionNoticeView.prototype.OnAccount1 = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skTnum.text = inputText;
            self.skTnum.textColor = 0xe9e9e9;
        };
        ExtensionNoticeView.prototype.onFocus3 = function (e) {
            this.skTchange.text = "";
        };
        ExtensionNoticeView.prototype.OnAccount2 = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skTchange.text = inputText;
            self.skTchange.textColor = 0xe9e9e9;
        };
        ExtensionNoticeView.prototype.showResult = function () {
            var self = this;
            game.dataMgr.generalMo.sendPerformTeamList();
            var teamname = game.dataMgr.generalMo.getCreateTeamName();
            if (true)
                console.log("teamname  ==  ", teamname);
            var info = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 740 /* teamSuccess */), teamname);
            game.BoxMgr.showBox(info);
            self.close();
        };
        ExtensionNoticeView.prototype.showResult2 = function (optype, data) {
            var self = this;
            game.dataMgr.generalMo.sendPerformTeamList();
            var teamList = game.dataMgr.generalMo.getPerformanceTeamlist();
            var name;
            for (var i = 0; i < teamList.length; i++) {
                var temp = teamList[i];
                if (temp.id == data.team_id) {
                    name = temp.name;
                }
            }
            var info;
            if (optype == 0) {
                info = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 746 /* resetMaName */), name);
            }
            else if (optype == 2) {
                var changename = game.dataMgr.generalMo.getChangeTeamName();
                if (true)
                    console.log("changename  ==  ", changename);
                info = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 744 /* teamChange */), changename);
            }
            game.BoxMgr.showBox(info);
            self.close();
        };
        ExtensionNoticeView.prototype.onShow = function (stage) {
            _super.prototype.onShow.call(this, stage);
            var self = this;
        };
        ExtensionNoticeView.prototype.onHide = function () {
            _super.prototype.onHide.call(this);
            var self = this;
        };
        return ExtensionNoticeView;
    }(game.UIPopup));
    game.ExtensionNoticeView = ExtensionNoticeView;
    __reflect(ExtensionNoticeView.prototype, "game.ExtensionNoticeView");
})(game || (game = {}));
var game;
(function (game) {
    var ExtensionPop = (function (_super) {
        __extends(ExtensionPop, _super);
        function ExtensionPop() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "ExtendPopSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        ExtensionPop.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skclose.setTarget(function () {
                self.close();
                game.dataMgr.generalMo.postEvent("close" /* Close */);
            }, self);
            self.skTG.setTarget(function () {
                self.close();
                game.gameScene.showHallUI(5 /* extension */);
            }, self);
        };
        return ExtensionPop;
    }(game.UIPopup));
    game.ExtensionPop = ExtensionPop;
    __reflect(ExtensionPop.prototype, "game.ExtensionPop");
})(game || (game = {}));
var game;
(function (game) {
    var ExtensionShareView = (function (_super) {
        __extends(ExtensionShareView, _super);
        function ExtensionShareView(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "TeamShareListSkin";
            self._data = data;
            return _this;
        }
        ExtensionShareView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var LinkUrl = game.UIUtils.getQRLinkUrl(self._data.id, self._data.code_tag, 2);
            game.dataMgr.generalMo.askPromoteUrl(LinkUrl.channelID, LinkUrl.params);
            game.dataMgr.generalMo.addListener("updateUrl" /* updateUrl */, self.updateUrl, self);
            self.showUrl();
            self.skCopy.setTarget(function () {
                game.MsgBox.showTipBox(false, 732 /* copynet */, "mainLang" /* mainLang */);
                URLUtil.copyText(self.skNet.text);
            }, self);
            self.skclose.setTarget(function () {
                TRain.soundMgr.playSFX("click" /* click */);
                self.close();
                game.gameScene.showHallUI(5 /* extension */, 6);
            }, self);
            self.createImg(1);
        };
        ExtensionShareView.prototype.updateUrl = function (num) {
            var self = this;
            var linkUrl = game.dataMgr.generalMo.getShareUrl();
            if (linkUrl)
                self.skNet.text = linkUrl;
            self.createImg(num);
        };
        ExtensionShareView.prototype.showUrl = function () {
            var self = this;
            var shareUrl = game.dataMgr.generalMo.getShareUrl();
            if (shareUrl) {
                self.skNet.text = shareUrl;
            }
            else {
                var ID = self._data.id;
                var tag = self._data.code_tag;
                var playerID = "";
                playerID = 2 + "|" + String(ID) + ":" + tag;
                var signKey = Base64.base64Encode(playerID);
                var channelID = game.dataMgr.accMo.getData().channelId;
                self.skNet.text = CONF.erweima + channelID + "/?channelId=" + channelID + "&recommendId=" + signKey;
            }
        };
        ExtensionShareView.prototype.createImg = function (type) {
            var self = this;
            if (true)
                console.log("createImg     type  ==  ", type);
            var teamID = self._data.id;
            var tag = self._data.code_tag;
            if (type == 1) {
                game.UIUtils.getQRCodeTeam(teamID, tag, function (data) {
                    self.skerwei.source = data;
                });
            }
            else {
                game.UIUtils.getQRCodeTeam1(teamID, tag, function (data) {
                    self.skerwei.source = data;
                });
            }
        };
        ExtensionShareView.prototype.onShow = function (stage) {
            _super.prototype.onShow.call(this, stage);
        };
        ExtensionShareView.prototype.onHide = function () {
            _super.prototype.onHide.call(this);
        };
        return ExtensionShareView;
    }(game.UIFullFW));
    game.ExtensionShareView = ExtensionShareView;
    __reflect(ExtensionShareView.prototype, "game.ExtensionShareView");
})(game || (game = {}));
var game;
(function (game) {
    var yjIndex = 0;
    var ExtensionView = (function (_super) {
        __extends(ExtensionView, _super);
        function ExtensionView(openid) {
            if (openid === void 0) { openid = 0; }
            var _this = _super.call(this) || this;
            _this._dailiPage = 1;
            _this._yejiPage = 1;
            _this._teamPage = 1;
            _this._openId = 0;
            _this._xishuPage = 0;
            var self = _this;
            self.skinName = "gameExtendSkin";
            self._openId = openid;
            return _this;
        }
        ExtensionView.prototype.setScOffX = function () {
            var self = this;
            var scOffx = CONF.scOffx;
            if (self._tag == 0 || self._tag == 2) {
                self.skLeftGrp.left += scOffx;
                if (self.skLeftImg)
                    self.skLeftImg.left += scOffx;
            }
        };
        ExtensionView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            if (self.skConfGrp) {
                self._tag = self.skConfGrp.tag;
            }
            self.setScOffX();
            var generalMo = game.dataMgr.generalMo;
            generalMo.sendPerformanceInfo();
            generalMo.addListener("Gain_result" /* Gain_result */, self.showGain, self);
            generalMo.addListener("GetGain" /* GetGain */, self.showGain, self);
            generalMo.addListener("Perform" /* Perform */, self.showPerforms, self);
            generalMo.addListener("PerformList" /* PerformList */, self.showPerformsList, self);
            generalMo.addListener("PerformChild" /* PerformChild */, self.showPerformsChild, self);
            generalMo.addListener("PerformTeamlist" /* PerformTeamlist */, self.showPerformsTeamlist, self);
            generalMo.addListener("PerformTeaminfo" /* PerformTeaminfo */, self.showTeamInfo, self);
            generalMo.addListener("updateUrl" /* updateUrl */, self.updateUrl, self);
            generalMo.addListener("PerformConfig" /* PerformConfig */, self.updateConfig, self);
            generalMo.sendPerformTeamList();
            self.skdaili0.visible = true;
            self.skBack.visible = true;
            self.skTeamBack.visible = false;
            self.skYejiBack.visible = false;
            if (self.skdiGrp)
                self.skdiGrp.visible = true;
            if (self.skdiYJGrp)
                self.skdiYJGrp.visible = false;
            if (self.skdlXian) {
                self.skdlXian.visible = true;
                self.skYJxian.visible = false;
            }
            if (self.skdiTeam)
                self.skdiTeam.visible = false;
            var list0 = self.skList;
            list0.itemRender = extensionWuXian;
            list0.dataProvider = self._itemPro = new cui.ArrayCollection();
            var list5 = self.skListXS;
            list5.itemRender = extensionXiShu;
            list5.dataProvider = self._itemProXS = new cui.ArrayCollection();
            var list1 = self.skDLList;
            list1.itemRender = ExtensionPerformList;
            list1.dataProvider = self._itemProPerformance = new cui.ArrayCollection();
            var list2 = self.skteamList;
            list2.itemRender = ExtensionPerformTeamMemberList;
            list2.dataProvider = self._itemProTeamList = new cui.ArrayCollection();
            var list3 = self.skTeamList;
            list3.itemRender = ExtensionPerformTeamList;
            list3.dataProvider = self._itemProTeam = new cui.ArrayCollection();
            var list4 = self.skDLYJlist;
            list4.itemRender = ExtensionDLList;
            list4.dataProvider = self._itemExtendList = new cui.ArrayCollection();
            for (var i = 1; i < 7; i++) {
                self["skdaili" + i].visible = false;
            }
            self.skBtnGrp.visible = true;
            self.skTeam.visible = false;
            self.skyejiGrp.visible = false;
            self.skYeJiGrp.visible = false;
            self.skSearchGrp.visible = false;
            self.skBtnGrp.setTarget(self.btnClickChip, self);
            self.skBtnGrp.selectTag = self._openId;
            generalMo.sendGetGain();
            self.skChaxun.setTarget(self.btnClickExtend, self);
            self.skYeJiGrp.setTarget(self.btnClickYeji, self);
            self.skLeft.setTarget(function () {
                self._xishuPage = 0;
                self.updateView(5);
            }, self);
            self.skRight.setTarget(function () {
                self._xishuPage = 1;
                self.updateView(5);
            }, self);
            self.skFind.setTarget(function () {
                if (self.skName.text.length > 0) {
                    self.searchResult();
                }
                else {
                    game.MsgBox.showTipBox(false, 624 /* ContentIsNull */, "mainLang" /* mainLang */);
                }
            }, self);
            self.skX.setTarget(function () {
                self.skName.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 723 /* inPlayerId */);
                self.skName.text = "";
                self.skX.visible = false;
                self.skCancle.visible = false;
                self.skFind.visible = true;
                self.updateView(2);
            }, self);
            self.skCancle.setTarget(function () {
                self.skName.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 723 /* inPlayerId */);
                self.skName.text = "";
                self.skX.visible = false;
                self.skCancle.visible = false;
                self.skFind.visible = true;
            }, self);
            self.skCopy.setTarget(function () {
                game.MsgBox.showTipBox(false, 732 /* copynet */, "mainLang" /* mainLang */);
                URLUtil.copyText(self.skNet.text);
            }, self);
            self.skCopyImg.setTarget(function () {
                URLUtil.saveImg("qrcode", self._base64Code);
            }, self);
            self.skShareWx.setTarget(function () {
                URLUtil.openWXUrl();
            }, self);
            self.skShareQQ.setTarget(function () {
                URLUtil.openQQUrl();
            }, self);
            self.skTeamX.setTarget(function () {
                self.skScerchName.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 723 /* inPlayerId */);
                self.skScerchName.text = "";
                self.skTeamX.visible = false;
                self.skTeamCancle.visible = false;
                self.skteamScerch.visible = true;
            }, self);
            self.skTeamCancle.setTarget(function () {
                self.skScerchName.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 723 /* inPlayerId */);
                self.skScerchName.text = "";
                self.skTeamX.visible = false;
                self.skTeamCancle.visible = false;
                self.skteamScerch.visible = true;
            }, self);
            self.skNext.setTarget(function () {
                var PerformList = generalMo.getPerformanceList();
                if (!PerformList)
                    return;
                if (PerformList.length / 8 > self._dailiPage) {
                    self._dailiPage += 1;
                    self.updateView(2);
                }
            }, self);
            self.skLast.setTarget(function () {
                var PerformList = generalMo.getPerformanceList();
                if (!PerformList)
                    return;
                if (self._dailiPage > 1) {
                    self._dailiPage -= 1;
                    self.updateView(2);
                }
            }, self);
            self.skFirst.setTarget(function () {
                var PerformList = generalMo.getPerformanceList();
                if (!PerformList)
                    return;
                if (self._dailiPage > 1) {
                    self._dailiPage = 1;
                    self.updateView(2);
                }
            }, self);
            self.skEnd.setTarget(function () {
                var PerformList = generalMo.getPerformanceList();
                if (!PerformList)
                    return;
                if (PerformList.length / 8 > self._dailiPage) {
                    self._dailiPage = Math.ceil(PerformList.length / 8);
                    self.updateView(2);
                }
            }, self);
            self.skclean.setTarget(function () {
                self.skteamName.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 731 /* teamname */);
                self.skteamName.text = "";
                self.skclean.visible = false;
                self.updateView(6);
            }, self);
            self.skSearchTeam.setTarget(function () {
                if (self.skteamName.text.length > 0) {
                    self.teamSearchResult();
                }
                else {
                    game.MsgBox.showTipBox(false, 733 /* cannotnoTeam */, "mainLang" /* mainLang */);
                }
            }, self);
            self.skCreateTeam.setTarget(function () {
                var view = new game.ExtensionNoticeView(0);
                game.gameScene.openPopup(view);
            }, self);
            self.skTeamBack.setTarget(function () {
                if (self.skdlXian) {
                    self.skdlXian.visible = true;
                    self.skYJxian.visible = false;
                }
                if (self.skdiGrp)
                    self.skdiGrp.visible = true;
                if (self.skdiYJGrp)
                    self.skdiYJGrp.visible = false;
                if (self.skdiTeam)
                    self.skdiTeam.visible = false;
                self.skTeamBack.visible = false;
                self.skTeam.visible = false;
                self.skteamGrp.visible = false;
                self.skBack.visible = true;
                self.skBtnGrp.visible = true;
                self.showResult(6);
            }, self);
            self.skYejiBack.setTarget(function () {
                if (self.skdiGrp)
                    self.skdiGrp.visible = true;
                if (self.skdiYJGrp)
                    self.skdiYJGrp.visible = false;
                if (self.skdlXian) {
                    self.skdlXian.visible = true;
                    self.skYJxian.visible = false;
                }
                if (self.skdiTeam)
                    self.skdiTeam.visible = false;
                self.skyejiGrp.visible = false;
                self.skYeJiGrp.visible = false;
                self.skYejiBack.visible = false;
                self.skBack.visible = true;
                self.skBtnGrp.visible = true;
                self.showResult(1);
                self.showDate(1);
            }, self);
            self.skBack.setTarget(function () {
                TRain.soundMgr.playSFX("click" /* click */);
                game.gameScene.goHome();
            }, self);
            self.skTeamNext.setTarget(function () {
                var teamInfo = game.dataMgr.generalMo.getPerformanceTeamInfo();
                if (!teamInfo)
                    return;
                var member_infos = teamInfo[0].member_infos;
                if (member_infos && member_infos.length / 8 > self._teamPage) {
                    self._teamPage += 1;
                    self.showTeamInfo();
                }
            }, self);
            self.skTeamLast.setTarget(function () {
                var teamInfo = game.dataMgr.generalMo.getPerformanceTeamInfo();
                if (!teamInfo)
                    return;
                if (self._dailiPage > 1) {
                    self._dailiPage -= 1;
                    self.showTeamInfo();
                }
            }, self);
            self.skTeamFirst.setTarget(function () {
                var teamInfo = game.dataMgr.generalMo.getPerformanceTeamInfo();
                if (!teamInfo)
                    return;
                if (self._teamPage > 1) {
                    self._teamPage = 1;
                    self.showTeamInfo();
                }
            }, self);
            self.skTeamEnd.setTarget(function () {
                var teamInfo = game.dataMgr.generalMo.getPerformanceTeamInfo();
                if (!teamInfo)
                    return;
                var member_infos = teamInfo[0].member_infos;
                if (member_infos && member_infos.length / 8 > self._teamPage) {
                    self._teamPage = Math.ceil(member_infos.length / 8);
                    self.showTeamInfo();
                }
            }, self);
            self.skteamScerch.setTarget(function () {
                if (self.skScerchName.text.length > 0) {
                    self.memberSearchResult();
                }
                else {
                    game.MsgBox.showTipBox(false, 624 /* ContentIsNull */, "mainLang" /* mainLang */);
                }
            }, self);
            self.skYJNext.setTarget(function () {
                var PerformList = generalMo.getPerformanceList();
                if (!PerformList)
                    return;
                if (PerformList.length / 8 > self._yejiPage) {
                    self._yejiPage += 1;
                    self.updateDLView(yjIndex);
                }
            }, self);
            self.skYJLast.setTarget(function () {
                var PerformList = generalMo.getPerformanceList();
                if (!PerformList)
                    return;
                if (self._yejiPage > 1) {
                    self._yejiPage -= 1;
                    self.updateDLView(yjIndex);
                }
            }, self);
            self.skYJEnd.setTarget(function () {
                var PerformList = generalMo.getPerformanceList();
                if (!PerformList)
                    return;
                if (PerformList.length / 8 > self._yejiPage) {
                    self._yejiPage = Math.ceil(PerformList.length / 8);
                    self.updateDLView(yjIndex);
                }
            }, self);
            self.skYJFirst.setTarget(function () {
                var PerformList = generalMo.getPerformanceList();
                if (!PerformList)
                    return;
                if (self._yejiPage > 1) {
                    self._yejiPage = 1;
                    self.showTeamInfo();
                }
            }, self);
        };
        ExtensionView.prototype.btnClickExtend = function (item) {
            TRain.soundMgr.playSFX("click" /* click */);
            var self = this;
            self.showExtendResult(item.tag);
        };
        ExtensionView.prototype.showExtendResult = function (num) {
            var self = this;
            for (var i = 0; i < 7; i++) {
                self["skdaili" + i].visible = false;
            }
            if (self.skdiGrp)
                self.skdiGrp.visible = false;
            if (self.skdiYJGrp)
                self.skdiYJGrp.visible = true;
            if (self.skdlXian) {
                self.skdlXian.visible = false;
                self.skYJxian.visible = true;
            }
            self.skBtnGrp.visible = false;
            self.skBack.visible = false;
            self.skyejiGrp.visible = true;
            self.skYeJiGrp.visible = true;
            self.skYejiBack.visible = true;
            self.skYeJiGrp.selectTag = num;
            if (self.skdlXian) {
                for (var i = 0; i < 8; i++) {
                    if (self.skdiYJGrp)
                        self.skdiYJGrp.getChildAt(i).visible = i == num;
                }
            }
            self.updateDLView(num);
        };
        ExtensionView.prototype.btnClickYeji = function (item) {
            var self = this;
            TRain.soundMgr.playSFX("click" /* click */);
            if (self.skdiYJGrp) {
                for (var i = 0; i < 8; i++) {
                    if (self.skdlXian) {
                        for (var i_2 = 0; i_2 < 8; i_2++) {
                            self.skdiYJGrp.getChildAt(i_2).visible = i_2 == item.tag;
                        }
                    }
                    else {
                        for (var i_3 = 0; i_3 < 8; i_3++) {
                            var img = self.skdiYJGrp.getChildAt(i_3);
                            img.source = i_3 == item.tag ? "extend@diban" : "extend@diban1";
                        }
                    }
                }
            }
            self._yejiPage = 1;
            yjIndex = item.tag;
            self.updateDLView(item.tag);
        };
        ExtensionView.prototype.updateDLView = function (num) {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            self.skyejiPic.source = "extend@txt_yeji" + num;
            if (num % 2 == 0) {
                self.skyejiBG.source = "txt_yejiBiao";
            }
            else {
                self.skyejiBG.source = "txt_yejizhishu";
            }
            var PerformList = generalMo.getPerformanceList();
            if (!PerformList)
                return;
            var listArr = [];
            var lenght = 0;
            if (PerformList.length > 8)
                lenght = 8;
            else
                lenght = PerformList.length;
            var i = 0;
            if (self._yejiPage == 1)
                i = 0;
            else
                i = (self._yejiPage - 1) * 8;
            if (PerformList.length / 8 > 1) {
                self.skYJPage0.text = String(self._yejiPage);
            }
            else {
                self.skYJPage0.text = "1";
            }
            self.skYJPage1.text = String(Math.ceil(PerformList.length / 8));
            var tempGold = 0;
            if (num == 0) {
                for (; i < PerformList.length; i++) {
                    var temp = PerformList[i];
                    tempGold += temp.per_today;
                    var YJinfo = {
                        isself: true,
                        rank: (i + 1),
                        name: temp.nick_name,
                        player_id: temp.player_id,
                        yej: temp.per_today,
                    };
                    listArr.push(YJinfo);
                }
                self._itemExtendList.source = listArr;
            }
            else if (num == 1) {
                for (; i < PerformList.length; i++) {
                    var temp = PerformList[i];
                    tempGold += temp.per_sub_today;
                    var YJinfo = {
                        isself: false,
                        rank: (i + 1),
                        name: temp.nick_name,
                        player_id: temp.player_id,
                        yej: temp.per_sub_today,
                        yongj: temp.gain,
                    };
                    listArr.push(YJinfo);
                }
                self._itemExtendList.source = listArr;
            }
            else if (num == 2) {
                for (; i < PerformList.length; i++) {
                    var temp = PerformList[i];
                    tempGold += temp.per_yesterday;
                    var YJinfo = {
                        isself: true,
                        rank: (i + 1),
                        name: temp.nick_name,
                        player_id: temp.player_id,
                        yej: temp.per_yesterday,
                    };
                    listArr.push(YJinfo);
                }
                self._itemExtendList.source = listArr;
            }
            else if (num == 3) {
                for (; i < PerformList.length; i++) {
                    var temp = PerformList[i];
                    tempGold += temp.per_sub_yesterday;
                    var YJinfo = {
                        isself: false,
                        rank: (i + 1),
                        name: temp.nick_name,
                        player_id: temp.player_id,
                        yej: temp.per_sub_yesterday,
                        yongj: temp.gain_yd,
                    };
                    listArr.push(YJinfo);
                }
                self._itemExtendList.source = listArr;
            }
            else if (num == 4) {
                for (; i < PerformList.length; i++) {
                    var temp = PerformList[i];
                    tempGold += temp.per_tw;
                    var YJinfo = {
                        isself: true,
                        rank: (i + 1),
                        name: temp.nick_name,
                        player_id: temp.player_id,
                        yej: temp.per_tw,
                    };
                    listArr.push(YJinfo);
                }
                self._itemExtendList.source = listArr;
            }
            else if (num == 5) {
                for (; i < PerformList.length; i++) {
                    var temp = PerformList[i];
                    tempGold += temp.per_sub_tw;
                    var YJinfo = {
                        isself: false,
                        rank: (i + 1),
                        name: temp.nick_name,
                        player_id: temp.player_id,
                        yej: temp.per_sub_tw,
                        yongj: temp.gain_tw,
                    };
                    listArr.push(YJinfo);
                }
                self._itemExtendList.source = listArr;
            }
            else if (num == 6) {
                for (; i < PerformList.length; i++) {
                    var temp = PerformList[i];
                    tempGold += temp.per_lw;
                    var YJinfo = {
                        isself: true,
                        rank: (i + 1),
                        name: temp.nick_name,
                        player_id: temp.player_id,
                        yej: temp.per_lw,
                    };
                    listArr.push(YJinfo);
                }
                self._itemExtendList.source = listArr;
            }
            else if (num == 7) {
                for (; i < PerformList.length; i++) {
                    var temp = PerformList[i];
                    tempGold += temp.per_sub_lw;
                    var YJinfo = {
                        isself: false,
                        rank: (i + 1),
                        name: temp.nick_name,
                        player_id: temp.player_id,
                        yej: temp.per_sub_lw,
                        yongj: temp.gain_lw,
                    };
                    listArr.push(YJinfo);
                }
                self._itemExtendList.source = listArr;
            }
            var yeji = tempGold / 100;
            self.skyejiGold.text = String(yeji);
        };
        ExtensionView.prototype.btnClickChip = function (item) {
            TRain.soundMgr.playSFX("click" /* click */);
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            if (item.tag == 0) {
                generalMo.sendGetGain();
            }
            if (self.skdiGrp) {
                if (self.skdlXian) {
                    for (var i = 0; i < self.skdiGrp.numChildren; i++) {
                        self.skdiGrp.getChildAt(i).visible = i == item.tag;
                    }
                }
                else {
                    for (var i = 0; i < self.skdiGrp.numChildren; i++) {
                        var img = self.skdiGrp.getChildAt(i);
                        img.source = i == item.tag ? "extend@diban" : "extend@diban1";
                    }
                }
            }
            self.showResult(item.tag);
            if (item.tag == 0) {
                var LinkUrl = game.UIUtils.getQRLinkUrl(game.dataMgr.accMo.getData().aid);
                generalMo.askPromoteUrl(LinkUrl.channelID, LinkUrl.params);
            }
            self.showDate(item.tag);
        };
        ExtensionView.prototype.showDate = function (num) {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            if (num == 0) {
                var linkUrl = self.getQRLinkUrl();
                self.skNet.text = linkUrl;
                self.updatePic(1);
                var gain = generalMo.getGain();
                if (gain > 0) {
                    self.skGet.icon = "extend@txt_canGet";
                    self.skGet.touchEnabled = true;
                    self.skGet.setTarget(function () {
                        generalMo.sendAskForGain();
                    }, self);
                }
                else {
                    self.skGet.touchEnabled = false;
                    self.skGet.icon = "extend@txt_noGet";
                }
                if (!gain) {
                    self.skPay.text = "0y";
                }
                else {
                    self.skPay.text = String(gain / 100) + "y";
                }
                self.updateView(num);
                self.skshuoming.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, (815 /* extendSM */));
                self.sktishi.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, (841 /* extendTS */));
            }
            else if (num == 1) {
                generalMo.sendPerformanceInfo();
                generalMo.sendPerformList();
            }
            else if (num == 2) {
                self._dailiPage = 1;
                generalMo.sendPerformList();
                self.skName.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 723 /* inPlayerId */);
                self.skName.promptColor = 0xC4904D;
                self.skName.addEventListener(egret.Event.CHANGE, self.OnAccount, self);
                self.skName.addEventListener(egret.Event.FOCUS_IN, self.onFocus1, self);
            }
            else if (num == 3) {
                self.skSearchGrp.visible = false;
                self.skplayerId.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 723 /* inPlayerId */);
                self.skplayerId.promptColor = 0xC4904D;
                self.skplayerId.addEventListener(egret.Event.CHANGE, self.OnAccount2, self);
                self.skplayerId.addEventListener(egret.Event.FOCUS_IN, self.onFocus2, self);
                self.skSearch.setTarget(function () {
                    var playerid = parseInt(self.skplayerId.text);
                    generalMo.sendPerformanceChild(playerid);
                }, self);
            }
            else if (num == 4) {
                self.updateView(num);
            }
            else if (num == 5) {
                generalMo.askPerformanceConfig();
                self._xishuPage = 0;
                self.updateView(num);
            }
            else if (num == 6) {
                self.skteamName.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 731 /* teamname */);
                self.skteamName.promptColor = 0xC4904D;
                self.skteamName.addEventListener(egret.Event.CHANGE, self.OnAccount3, self);
                self.skteamName.addEventListener(egret.Event.FOCUS_IN, self.onFocus3, self);
                generalMo.sendPerformTeamList();
            }
        };
        ExtensionView.prototype.updatePic = function (type) {
            var self = this;
            if (true)
                console.log("updatePic     type  ==  ", type);
            if (type == 1) {
                game.UIUtils.getQRCodePly(function (data) {
                    self.skerwei.source = self._base64Code = data;
                });
            }
            else {
                game.UIUtils.getQRCodePly1(function (data) {
                    self.skerwei.source = self._base64Code = data;
                });
            }
        };
        ExtensionView.prototype.getQRLinkUrl = function () {
            var shareUrl = game.dataMgr.generalMo.getShareUrl();
            var accData = game.dataMgr.accMo.getData();
            if (shareUrl) {
                return shareUrl;
            }
            else {
                var myID = accData.aid;
                var playerID = "";
                playerID = 1 + "|" + String(myID);
                var signKey = Base64.base64Encode(playerID);
                var channelID = accData.channelId;
                var url = CONF.erweima + channelID + "/?channelId=" + channelID + "&recommendId=" + signKey;
                return url;
            }
        };
        ExtensionView.prototype.teamSearchResult = function () {
            var self = this;
            var teamList = game.dataMgr.generalMo.getPerformanceTeamlist();
            if (!teamList) {
                self.skclean.visible = true;
                game.MsgBox.showTipBox(false, 742 /* noTeam */, "mainLang" /* mainLang */);
                return;
            }
            var hasTeam = false;
            var number = -1;
            var searchName = self.skteamName.text;
            for (var i = 0; i < teamList.length; i++) {
                if (searchName == teamList[i].name) {
                    hasTeam = true;
                    number = i;
                }
            }
            self.skclean.visible = true;
            if (hasTeam) {
                var listArr = [];
                var id = 0;
                var temp = teamList[number];
                var tempinfos = temp.member_infos;
                if (tempinfos) {
                    id = tempinfos[tempinfos.length - 1].player_id;
                }
                var PerformTeamlist = {
                    handle: self,
                    name: temp.name,
                    count: temp.count,
                    count_limit: temp.count_limit,
                    player_id: id,
                    id: temp.id,
                    code_tag: temp.code_tag,
                };
                listArr.push(PerformTeamlist);
                self._itemProTeam.source = listArr;
            }
            else {
                game.MsgBox.showTipBox(false, 742 /* noTeam */, "mainLang" /* mainLang */);
            }
        };
        ExtensionView.prototype.searchResult = function () {
            var self = this;
            var PerformList = game.dataMgr.generalMo.getPerformanceList();
            self.skFind.visible = false;
            if (!PerformList) {
                self.skCancle.visible = true;
                self.skX.visible = false;
                game.MsgBox.showTipBox(false, 730 /* noplayer */, "mainLang" /* mainLang */);
                return;
            }
            var hasPlayer = false;
            var number = -1;
            var searchId = parseInt(self.skName.text);
            for (var i = 0; i < PerformList.length; i++) {
                if (searchId == PerformList[i].player_id) {
                    hasPlayer = true;
                    number = i;
                }
            }
            self.skCancle.visible = true;
            self.skX.visible = false;
            if (hasPlayer) {
                var temp = PerformList[number];
                var listArr = [];
                var PerformInfo = {
                    rank: (number + 1),
                    player_id: temp.player_id,
                    nick_name: temp.nick_name,
                    per_tw: temp.per_tw,
                    ac: temp.ac,
                    bd: 0,
                };
                listArr.push(PerformInfo);
                self._itemProPerformance.source = listArr;
            }
            else {
                game.MsgBox.showTipBox(false, 730 /* noplayer */, "mainLang" /* mainLang */);
            }
        };
        ExtensionView.prototype.memberSearchResult = function () {
            var self = this;
            var teamInfo = game.dataMgr.generalMo.getPerformanceTeamInfo();
            if (!teamInfo) {
                self.skTeamX.visible = true;
                self.skTeamCancle.visible = true;
                game.MsgBox.showTipBox(false, 730 /* noplayer */, "mainLang" /* mainLang */);
                return;
            }
            ;
            var member_infos = teamInfo[0].member_infos;
            self.skteamScerch.visible = false;
            var hasPlayer = false;
            var number = -1;
            var searchId = parseInt(self.skScerchName.text);
            if (member_infos) {
                for (var i = 0; i < member_infos.length; i++) {
                    if (searchId == member_infos[i].player_id) {
                        hasPlayer = true;
                        number = i;
                    }
                }
            }
            self.skTeamX.visible = true;
            self.skTeamCancle.visible = true;
            if (hasPlayer) {
                var temp = member_infos[number];
                var listArr = [];
                var memberInfo = {
                    rank: (number + 1),
                    name: temp.nick_name,
                    player_id: temp.player_id,
                    ts_create: temp.ts_create,
                    per_sub_tw: temp.per_sub_tw,
                    ac: temp.ac,
                };
                listArr.push(memberInfo);
                self._itemProTeamList.source = listArr;
            }
            else {
                game.MsgBox.showTipBox(false, 730 /* noplayer */, "mainLang" /* mainLang */);
            }
        };
        ExtensionView.prototype.updateView = function (num) {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            var gameModel = game.dataMgr.gameMo;
            if (num == 0) {
                var performInfo = generalMo.getPerformanceInfo();
                self.skMyId.text = String(game.dataMgr.accMo.getData().aid);
                if (performInfo) {
                    self.skTuiId.text = performInfo.parent ? String(performInfo.parent) : "---";
                    self.skZSNew.text = performInfo.ac_inc_dir ? performInfo.ac_inc_dir : "0";
                    self.skZSAll.text = performInfo.count_dir ? performInfo.count_dir : "0";
                    self.skTeamNew.text = performInfo.ac_inc ? String(performInfo.ac_inc) : "0";
                    self.skTeamMember.text = performInfo.ac ? String(performInfo.ac) : "0";
                    self.skYesYJ.text = performInfo.commission_yesterday_self ? (game.DataFormat.convertYuanString2(performInfo.commission_yesterday_self, true)) : "0" + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                    self.skHesYJ.text = performInfo.gain_all ? (game.DataFormat.convertYuanString2(performInfo.gain_all, true)) : "0" + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                }
            }
            else if (num == 1) {
                var performInfo = generalMo.getPerformanceInfo();
                if (performInfo.commission_today_team)
                    self.skteamtoday.text = String(performInfo.commission_today_team / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skteamtoday.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.commission_today_self)
                    self.skselftoday.text = String(performInfo.commission_today_self / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skselftoday.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.commission_today_agent)
                    self.skdltoday.text = String(performInfo.commission_today_agent / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skdltoday.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.commission_yesterday_team)
                    self.skteamyes.text = String(performInfo.commission_yesterday_team / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skteamyes.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.commission_yesterday_self)
                    self.skselfyes.text = String(performInfo.commission_yesterday_self / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skselfyes.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.commission_yesterday_agent)
                    self.skdlyes.text = String(performInfo.commission_yesterday_agent / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skdlyes.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_today_team)
                    self.skteamtodaygold.text = String(performInfo.per_today_team / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skteamtodaygold.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_today_self)
                    self.skselftodaygold.text = String(performInfo.per_today_self / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skselftodaygold.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_today_agent)
                    self.skdltodaygold.text = String(performInfo.per_today_agent / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skdltodaygold.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_yesterday_team)
                    self.skteamyesgold.text = String(performInfo.per_yesterday_team / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skteamyesgold.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_yesterday_self)
                    self.skselfyesgold.text = String(performInfo.per_yesterday_self / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skselfyesgold.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_yesterday_agent)
                    self.skdlyesgold.text = String(performInfo.per_yesterday_agent / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skdlyesgold.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_today)
                    self.skmyyj.text = String(performInfo.per_today / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skmyyj.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_this_week)
                    self.skmyweek.text = String(performInfo.per_this_week / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skmyweek.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.rebate_today)
                    self.sktodayyj.text = String(performInfo.rebate_today / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.sktodayyj.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.rebate_this_week)
                    self.skweekyj.text = String(performInfo.rebate_this_week / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skweekyj.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_b_self_today)
                    self.skmyZY.text = String(performInfo.per_b_self_today / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skmyZY.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_b_child_today)
                    self.skZS.text = String(performInfo.per_b_child_today / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skZS.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_b_self_yesterday)
                    self.skmyZYyes.text = String(performInfo.per_b_self_yesterday / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skmyZYyes.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.per_b_child_yesterday)
                    self.skZSyes.text = String(performInfo.per_b_child_yesterday / 100) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                else
                    self.skZSyes.text = 0 + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
                if (performInfo.ac)
                    self.skteamNum.text = String(performInfo.ac);
                else
                    self.skteamNum.text = "0";
                if (performInfo.ac_inc_yd)
                    self.skyesNew.text = String(performInfo.ac_inc_yd);
                else
                    self.skyesNew.text = "0";
                if (performInfo.ac_inc_tm)
                    self.skmonthNew.text = String(performInfo.ac_inc_tm);
                else
                    self.skmonthNew.text = "0";
            }
            else if (num == 2) {
                var listArr = [];
                var PerformList = generalMo.getPerformanceList();
                if (!PerformList)
                    return;
                var performInfo = generalMo.getPerformanceInfo();
                var lenght = 0;
                self.skzhishuNew.text = performInfo.ac_inc;
                self.skzhishuNum.text = String(PerformList.length);
                if (PerformList.length > 8)
                    lenght = 8;
                else
                    lenght = PerformList.length;
                var i = 0;
                if (PerformList.length / 8 > 1) {
                    self.skGLPage0.text = String(self._dailiPage);
                }
                else {
                    self.skGLPage0.text = "1";
                }
                self.skGLPage1.text = String(Math.ceil(PerformList.length / 8));
                if (self._dailiPage == 1)
                    i = 0;
                else
                    i = (self._dailiPage - 1) * 8;
                for (; i < PerformList.length; i++) {
                    var temp = PerformList[i];
                    var PerformInfo = {
                        rank: (i + 1),
                        player_id: temp.player_id,
                        nick_name: temp.nick_name,
                        per_tw: temp.per_sub_tw,
                        ac: temp.ac,
                        bd: 0,
                    };
                    listArr.push(PerformInfo);
                }
                self._itemProPerformance.source = listArr;
            }
            else if (num == 3) {
                var performChild = generalMo.getPerformanceChild();
                if (performChild) {
                    if (performChild.player_id) {
                        self.skSearchGrp.visible = true;
                        self.skupId.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 724 /* preId */), performChild.parent));
                        self.skteamnum.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 725 /* teamnum */), performChild.ac));
                        self.sktodaygold.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 726 /* todaygold */), performChild.per_sub_today / 100));
                        self.skweekgold.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 727 /* weekgold */), performChild.per_sub_tw / 100));
                        var time = self.GMTToStr(performChild.ts_create * 1000);
                        self.sktime.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 728 /* createTime */), time));
                    }
                    else {
                        game.MsgBox.showTipBox(false, 729 /* noresult */, "mainLang" /* mainLang */);
                    }
                }
                else {
                    game.MsgBox.showTipBox(false, 729 /* noresult */, "mainLang" /* mainLang */);
                }
            }
            else if (num == 4) {
                if (self.skInGrp.numChildren > 0) {
                    for (var i = 0; i < self.skInGrp.numChildren; i++) {
                        var temp = self.skInGrp.getChildAt(i);
                        temp.dispose();
                    }
                }
                self.skInGrp.removeChildren();
                var maxHeight = 0;
                var faq = generalMo.getExtend();
                for (var key in faq) {
                    var faqConf = faq[key];
                    if (faqConf.isImg) {
                        var img = new cui.Image();
                        img.source = faqConf.text;
                        img.x = faqConf.x;
                        img.y = faqConf.y;
                        self.skInGrp.addChild(img);
                        if (maxHeight < img.y)
                            maxHeight = img.y;
                    }
                    else {
                        var lab = new cui.Label();
                        lab.textFlow = cui.htmlParser.parser(faqConf.text);
                        lab.x = faqConf.x;
                        lab.y = faqConf.y;
                        self.skInGrp.addChild(lab);
                        if (maxHeight < lab.y)
                            maxHeight = lab.y;
                    }
                }
                self.skInGrp.width = self.skGrp.width;
                self.skInGrp.height = maxHeight + 120;
                if (true)
                    console.log("updateView      self.skInGrp.width  ==   ", self.skInGrp.width);
                self.skGrp.setContentSize(self.skGrp.width, maxHeight + 120);
            }
            else if (num == 5) {
                for (var i = 0; i < 2; i++) {
                    self.skMoveGrp.getChildAt(i).visible = (i == self._xishuPage);
                }
                if (self._xishuPage == 0) {
                    self.skZhiDu.visible = true;
                    self.skXiShu.visible = false;
                    var listArr = [];
                    self.skVip.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, (721 /* backGain */));
                    var info = generalMo.getPerform();
                    if (!info)
                        return;
                    var id = 0;
                    for (var i = 0; i < info.length; i++) {
                        id += 1;
                        var temp = info[i];
                        var WuXianinfo = {
                            id: id,
                            PButton: temp.pbutton,
                            PTop: temp.ptop,
                            Rate: temp.rate,
                            Describe: temp.desc,
                        };
                        listArr.push(WuXianinfo);
                    }
                    self._itemPro.source = listArr;
                }
                else {
                    self.skZhiDu.visible = false;
                    self.skXiShu.visible = true;
                    self.skTrueGold0.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, (886 /* extendXiShu0 */));
                    self.skTrueGold1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, (887 /* extendXiShu1 */));
                    self.skTrueGold2.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, (888 /* extendXiShu2 */));
                    var listArr = [];
                    var info = generalMo.getPerformXishu();
                    if (!info)
                        return;
                    var id = 0;
                    for (var i = 0; i < info.length; i++) {
                        id += 1;
                        var temp = info[i];
                        var curSvrList = gameModel.getData();
                        var tempConf = void 0;
                        for (var j = 0; j < curSvrList.length; j++) {
                            var tempInfo = curSvrList[j];
                            if (tempInfo.gameid == temp.gameid) {
                                tempConf = tempInfo.conf;
                            }
                        }
                        if (tempConf) {
                            var XiShuinfo = {
                                id: id,
                                gameName: tempConf.nm,
                                xishu: temp.performancerate,
                                shuoming: temp.desc,
                            };
                            listArr.push(XiShuinfo);
                        }
                    }
                    listArr.sort(self.testFun);
                    self._itemProXS.source = listArr;
                }
            }
            else if (num == 6) {
                var listArr = [];
                var teamList = generalMo.getPerformanceTeamlist();
                if (!teamList)
                    return;
                for (var i = 0; i < teamList.length; i++) {
                    var temp = teamList[i];
                    game.dataMgr.generalMo.sendSearchTeam(temp.id);
                }
                var tempinfo = generalMo.getPerformanceTeamInfo();
                for (var i = 0; i < teamList.length; i++) {
                    var id = 0;
                    var temp = teamList[i];
                    if (tempinfo) {
                        var tempinfos = tempinfo[0].member_infos;
                        if (tempinfos) {
                            id = tempinfos[tempinfos.length - 1].player_id;
                        }
                    }
                    var PerformTeamlist = {
                        handle: self,
                        name: temp.name,
                        count: temp.count,
                        count_limit: temp.count_limit,
                        player_id: id,
                        id: temp.id,
                        code_tag: temp.code_tag,
                    };
                    listArr.push(PerformTeamlist);
                }
                self._itemProTeam.source = listArr;
            }
        };
        //排序函数
        ExtensionView.prototype.testFun = function (a, b) {
            return b.xishu - a.xishu;
        };
        ExtensionView.prototype.GMTToStr = function (time) {
            var date = new Date(time);
            var Str = date.getFullYear() + TRain.langMgr.getTxt("mainLang" /* mainLang */, 923 /* year */) +
                (date.getMonth() + 1) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 924 /* month */) +
                date.getDate() + TRain.langMgr.getTxt("mainLang" /* mainLang */, 925 /* day */) +
                date.getHours() + TRain.langMgr.getTxt("mainLang" /* mainLang */, 926 /* hour */) +
                date.getMinutes() + TRain.langMgr.getTxt("mainLang" /* mainLang */, 927 /* minter */) +
                date.getSeconds() + TRain.langMgr.getTxt("mainLang" /* mainLang */, 928 /* seconds */);
            return Str;
        };
        ExtensionView.prototype.onFocus1 = function (e) {
            var self = this;
            self.skX.visible = false;
            self.skCancle.visible = false;
            self.skFind.visible = true;
            self.skName.text = "";
        };
        ExtensionView.prototype.OnAccount = function (e) {
            var self = this;
            var inputText = e.target.text;
            if (true)
                console.log("inputText ==", inputText);
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skName.text = inputText;
            self.skName.textColor = 0xeddF36;
        };
        ExtensionView.prototype.onFocus2 = function (e) {
            this.skplayerId.text = "";
        };
        ExtensionView.prototype.OnAccount2 = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skplayerId.text = inputText;
            self.skplayerId.textColor = 0xeddF36;
        };
        ExtensionView.prototype.onFocus3 = function (e) {
            var self = this;
            self.skclean.visible = false;
            self.skteamName.text = "";
        };
        ExtensionView.prototype.OnAccount3 = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skteamName.text = inputText;
            self.skteamName.textColor = 0xeddF36;
        };
        ExtensionView.prototype.onFocus4 = function (e) {
            this.skScerchName.text = "";
        };
        ExtensionView.prototype.OnAccount4 = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skScerchName.text = inputText;
            self.skScerchName.textColor = 0xeddF36;
        };
        ExtensionView.prototype.showResult = function (num) {
            var self = this;
            for (var i = 0; i < 7; i++) {
                // if (num == i) {
                // 	self["skdaili" + i].visible = true;
                // 	continue;
                // }
                self["skdaili" + i].visible = num == i;
            }
        };
        ExtensionView.prototype.showGain = function () {
            var self = this;
            self.showDate(0);
        };
        ExtensionView.prototype.showPerforms = function () {
            var self = this;
            self.updateView(1);
        };
        ExtensionView.prototype.showPerformsList = function () {
            var self = this;
            self.updateView(2);
        };
        ExtensionView.prototype.showPerformsChild = function () {
            var self = this;
            self.updateView(3);
        };
        ExtensionView.prototype.showPerformsTeamlist = function () {
            var self = this;
            self.updateView(6);
        };
        ExtensionView.prototype.updateConfig = function () {
            this.updateView(5);
        };
        ExtensionView.prototype.updateUrl = function (num) {
            var self = this;
            var linkUrl = self.getQRLinkUrl();
            self.skNet.text = linkUrl;
            self.updatePic(num);
        };
        ExtensionView.prototype.showTeamInfo = function () {
            var self = this;
            var teamInfo = game.dataMgr.generalMo.getPerformanceTeamInfo();
            var listArr = [];
            if (!teamInfo)
                return;
            var teamList = game.dataMgr.generalMo.getPerformanceTeamlist();
            var ac_inc = 0;
            if (teamList) {
                for (var i = 0; i < teamList.length; i++) {
                    if (teamInfo[0].id == teamList[i].id) {
                        ac_inc = teamList[i].ac_inc;
                    }
                }
            }
            self.skpaixianNum.text = String(teamInfo[0].count);
            self.skpaixianNew.text = String(ac_inc);
            if (teamInfo[0].member_infos) {
                var member_infos = teamInfo[0].member_infos;
                if (member_infos.length == 0)
                    return;
                var length_4 = 0;
                if (member_infos.length > 8)
                    length_4 = 8;
                else
                    length_4 = member_infos.length;
                var i = 0;
                if (self._teamPage == 1)
                    i = 0;
                else
                    i = (self._teamPage - 1) * 8;
                if (member_infos.length / 8 > 1) {
                    self.skTeamPage0.text = String(self._teamPage);
                }
                else {
                    self.skTeamPage0.text = "1";
                }
                self.skTeamPage1.text = String(Math.ceil(member_infos.length / 8));
                for (; i < member_infos.length; i++) {
                    var temp = member_infos[i];
                    var PerformTeamlist = {
                        rank: (i + 1),
                        name: temp.nick_name,
                        player_id: temp.player_id,
                        ts_create: temp.ts_create,
                        per_sub_tw: temp.per_sub_tw,
                        ac: temp.ac,
                    };
                    listArr.push(PerformTeamlist);
                }
                self._itemProTeamList.source = listArr;
            }
        };
        ExtensionView.prototype.btnClick = function (item, num) {
            var self = this;
            TRain.soundMgr.playSFX("click" /* click */);
            var data = item.data;
            if (num == 1) {
                var view = new game.ExtensionNoticeView(1, data);
                game.gameScene.openPopup(view);
            }
            else if (num == 2) {
                game.gameScene.showHallUI(6 /* code */, data);
            }
            else if (num == 3) {
                var view = new game.ExtensionNoticeView(2, data);
                game.gameScene.openPopup(view);
            }
            else if (num == 4) {
                self.showTeamGrp(data);
            }
        };
        ExtensionView.prototype.showTeamGrp = function (data) {
            var self = this;
            self.skBtnGrp.visible = false;
            self.skBack.visible = false;
            if (self.skdlXian) {
                self.skdlXian.visible = false;
                self.skYJxian.visible = false;
            }
            if (self.skdiGrp)
                self.skdiGrp.visible = false;
            if (self.skdiYJGrp)
                self.skdiYJGrp.visible = false;
            if (self.skdiTeam)
                self.skdiTeam.visible = true;
            for (var i = 0; i < 7; i++) {
                self["skdaili" + i].visible = false;
            }
            self.skTeam.visible = true;
            self.skteamGrp.visible = true;
            self.skTeamBack.visible = true;
            self.skScerchName.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 723 /* inPlayerId */);
            self.skScerchName.promptColor = 0xC4904D;
            self.skScerchName.addEventListener(egret.Event.CHANGE, self.OnAccount4, self);
            self.skScerchName.addEventListener(egret.Event.FOCUS_IN, self.onFocus4, self);
            game.dataMgr.generalMo.sendSearchTeam(data.id);
        };
        ExtensionView.prototype.dispose = function () {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            generalMo.rmvListener("Gain_result" /* Gain_result */, self);
            generalMo.rmvListener("GetGain" /* GetGain */, self);
            generalMo.rmvListener("Perform" /* Perform */, self);
            generalMo.rmvListener("PerformList" /* PerformList */, self);
            generalMo.rmvListener("PerformChild" /* PerformChild */, self);
            generalMo.rmvListener("PerformTeamlist" /* PerformTeamlist */, self);
            generalMo.rmvListener("PerformTeaminfo" /* PerformTeaminfo */, self);
            generalMo.rmvListener("updateUrl" /* updateUrl */, self);
            generalMo.rmvListener("PerformConfig" /* PerformConfig */, self);
            _super.prototype.dispose.call(this);
        };
        return ExtensionView;
    }(game.UIFullFW));
    game.ExtensionView = ExtensionView;
    __reflect(ExtensionView.prototype, "game.ExtensionView");
    var extensionXiShu = (function (_super) {
        __extends(extensionXiShu, _super);
        function extensionXiShu() {
            var _this = _super.call(this) || this;
            _this.skinName = "gameXiShuListSkin";
            return _this;
        }
        extensionXiShu.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            if (self.skXian) {
                if (data.id == 1) {
                    self.skXian.visible = true;
                }
                else {
                    self.skXian.visible = false;
                }
            }
            self.skGameName.text = data.gameName;
            self.skGameXiShu.text = (data.xishu > 0) ? (data.xishu / 10) + "%" : "0";
            self.skShuoMing.text = (data.shuoming) ? data.shuoming : "-";
        };
        return extensionXiShu;
    }(cui.DataItem));
    game.extensionXiShu = extensionXiShu;
    __reflect(extensionXiShu.prototype, "game.extensionXiShu");
    var extensionWuXian = (function (_super) {
        __extends(extensionWuXian, _super);
        function extensionWuXian() {
            var _this = _super.call(this) || this;
            _this.skinName = "gameWuxianListSkin";
            return _this;
        }
        extensionWuXian.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            if (self.skXian) {
                if (data.id == 1) {
                    self.skXian.visible = true;
                }
                else {
                    self.skXian.visible = false;
                }
            }
            if (data.PButton == 0) {
                self.skWXgold.text = game.DataFormat.convertYuanString2(data.PTop, true) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 929 /* underDown */);
            }
            else if (data.PTop == 0) {
                self.skWXgold.text = game.DataFormat.convertYuanString2(data.PButton, true) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 930 /* underUp */);
            }
            else {
                self.skWXgold.text = game.DataFormat.convertYuanString2(data.PButton, true) + "～" + game.DataFormat.convertYuanString2(data.PTop, true);
            }
            self.skWXlv.text = data.Describe;
            self.skWXget.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 931 /* eachW */) + data.Rate + TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
        };
        return extensionWuXian;
    }(cui.DataItem));
    game.extensionWuXian = extensionWuXian;
    __reflect(extensionWuXian.prototype, "game.extensionWuXian");
    var ExtensionPerformList = (function (_super) {
        __extends(ExtensionPerformList, _super);
        function ExtensionPerformList() {
            var _this = _super.call(this) || this;
            _this.skinName = "gameDLListSkin";
            return _this;
        }
        ExtensionPerformList.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skRank.text = String(data.rank);
            self.skNickname.text = formatString(data.nick_name);
            self.skId.text = String(data.player_id);
            self.skyj.text = String(data.per_tw / 100);
            self.skTeamNum.text = String(data.ac);
            self.skBaodi.text = String(data.bd);
        };
        return ExtensionPerformList;
    }(cui.DataItem));
    game.ExtensionPerformList = ExtensionPerformList;
    __reflect(ExtensionPerformList.prototype, "game.ExtensionPerformList");
    function formatString(str) {
        if (str.length > 5) {
            return str.substr(0, 5) + "...";
        }
        else {
            return str;
        }
    }
    game.formatString = formatString;
    var ExtensionPerformTeamList = (function (_super) {
        __extends(ExtensionPerformTeamList, _super);
        function ExtensionPerformTeamList() {
            var _this = _super.call(this) || this;
            _this.skinName = "gameTeamListSkin";
            var self = _this;
            self.skChange.setTarget(function () {
                self.data.handle.btnClick(self, 1);
            }, self);
            self.skshare.setTarget(function () {
                self.data.handle.btnClick(self, 2);
            }, self);
            self.skerweima.setTarget(function () {
                self.data.handle.btnClick(self, 3);
            }, self);
            self.skTeam.setTarget(function () {
                self.data.handle.btnClick(self, 4);
            }, self);
            return _this;
        }
        ExtensionPerformTeamList.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skteamName.text = data.name;
            self.sknumber.text = String(data.count);
            self.skpaixian.text = String(data.count) + "/" + String(data.count_limit);
            if (data.player_id != 0)
                self.sknewId.text = "ID:" + String(data.player_id);
            else
                self.sknewId.text = "--";
        };
        return ExtensionPerformTeamList;
    }(cui.DataItem));
    game.ExtensionPerformTeamList = ExtensionPerformTeamList;
    __reflect(ExtensionPerformTeamList.prototype, "game.ExtensionPerformTeamList");
    var ExtensionPerformTeamMemberList = (function (_super) {
        __extends(ExtensionPerformTeamMemberList, _super);
        function ExtensionPerformTeamMemberList() {
            var _this = _super.call(this) || this;
            _this.skinName = "gamePXListSkin";
            var self = _this;
            return _this;
        }
        ExtensionPerformTeamMemberList.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skRank.text = String(data.rank);
            self.skNickname.text = String(data.name);
            self.skId.text = String(data.player_id);
            var time = self.GMTToStr(data.ts_create * 1000);
            self.sktime.text = time;
            self.skyj.text = String(data.per_sub_tw / 100);
            self.skTeamNum.text = String(data.ac);
        };
        ExtensionPerformTeamMemberList.prototype.GMTToStr = function (time) {
            var date = new Date(time);
            var Str = date.getFullYear() + TRain.langMgr.getTxt("mainLang" /* mainLang */, 923 /* year */) +
                (date.getMonth() + 1) + TRain.langMgr.getTxt("mainLang" /* mainLang */, 924 /* month */) +
                date.getDate() + TRain.langMgr.getTxt("mainLang" /* mainLang */, 925 /* day */);
            return Str;
        };
        return ExtensionPerformTeamMemberList;
    }(cui.DataItem));
    game.ExtensionPerformTeamMemberList = ExtensionPerformTeamMemberList;
    __reflect(ExtensionPerformTeamMemberList.prototype, "game.ExtensionPerformTeamMemberList");
    var ExtensionDLList = (function (_super) {
        __extends(ExtensionDLList, _super);
        function ExtensionDLList() {
            var _this = _super.call(this) || this;
            _this.skinName = "gameSelfYejiListSkin";
            return _this;
        }
        ExtensionDLList.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            if (data) {
                if (data.isself) {
                    self.skself.visible = true;
                    self.skother.visible = false;
                    self.skmyRank.text = String(data.rank);
                    self.skmyname.text = formatString(data.name);
                    self.skmyid.text = String(data.player_id);
                    self.skmygold.text = String(data.yej / 100);
                }
                else {
                    self.skself.visible = false;
                    self.skother.visible = true;
                    self.skotherRank.text = String(data.rank);
                    self.skothername.text = formatString(data.name);
                    self.skotherid.text = String(data.player_id);
                    self.skothergold.text = String(data.yej / 100);
                    self.skotheryj.text = String(data.yongj / 100);
                }
            }
        };
        return ExtensionDLList;
    }(cui.DataItem));
    game.ExtensionDLList = ExtensionDLList;
    __reflect(ExtensionDLList.prototype, "game.ExtensionDLList");
})(game || (game = {}));
var game;
(function (game) {
    var ClickMcMgr;
    (function (ClickMcMgr) {
        var _parent; //父窗口
        var _delegate;
        function setParent(parent, layerDelegate) {
            if (_parent) {
                close();
            }
            _parent = parent;
            _delegate = layerDelegate;
            if (parent) {
                show();
            }
        }
        ClickMcMgr.setParent = setParent;
        function close() {
            if (_parent.parent) {
                _delegate.hideLayer(_parent);
            }
        }
        function show() {
            if (!_parent.parent) {
                _delegate.showLayer(_parent);
            }
        }
        function showMc(x, y) {
            var uiMovice = new cui.UIMovieClip();
            uiMovice.aniName = "clickMvc";
            uiMovice.gotoAndPlay(0, 1);
            uiMovice.x = x;
            uiMovice.y = y;
            _parent.addChild(uiMovice);
            uiMovice.addEventListener("play_fin" /* EVT_PLAY_FIN */, function () {
                _parent.removeChild(uiMovice);
            }, self);
        }
        ClickMcMgr.showMc = showMc;
    })(ClickMcMgr = game.ClickMcMgr || (game.ClickMcMgr = {}));
})(game || (game = {}));
var game;
(function (game) {
    /**
     * 游戏主逻辑界面，分层控制游戏内其他界面。
     *
     * */
    var GameScene = (function (_super) {
        __extends(GameScene, _super);
        function GameScene() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GameScene.createInst = function () {
            if (!game.gameScene) {
                game.gameScene = new GameScene();
            }
            return game.gameScene;
        };
        GameScene.prototype.childrenCreated = function () {
            var self = this;
            self._uiClss = {};
            self._hideHome = 0;
            //
            self._firstShow = true;
            var layers = new CMap();
            self._layers = layers;
            var layer = new cui.Group;
            self._mainLayer = layer;
            layer.perWidth = 100;
            layer.perHeight = 100;
            layers.set(0 /* kMainLayer */, layer); //mainLayer
            layer.tag = 0 /* kMainLayer */;
            layer.hitCheckBound = false;
            self.addChild(layer);
            // let topBar = MainTop.impl = new MainTop();
            // topBar.tag = GameLayer.kFloatLayer;
            // layers.set( GameLayer.kFloatLayer, layer );
            // self.addChild( topBar );     
            layer = new cui.Group();
            //layer.touchEnabled = false;
            layer.hitCheckBound = false;
            layer.perWidth = 100;
            layer.perHeight = 100;
            layer.tag = 2 /* kLoadLayer */;
            layer.addChild(game.GameLoadView.getInst());
            layers.set(2 /* kLoadLayer */, layer); //kLoadLayer
            var popupLayer = new game.PopupLayer();
            popupLayer.delegate = self;
            popupLayer.hitCheckBound = false;
            popupLayer.perWidth = 100;
            popupLayer.perHeight = 100;
            popupLayer.tag = 3 /* kPopup */;
            layers.set(3 /* kPopup */, popupLayer); //kPopup
            self._popupLayer = popupLayer;
            var effLay = new game.EffectLayer();
            effLay.touchEnabled = false;
            effLay.delegate = self;
            effLay.hCenter = 0;
            effLay.vCenter = 0;
            effLay.tag = 1 /* kEffectLayer */;
            effLay.hitCheckBound = false;
            layers.set(1 /* kEffectLayer */, effLay); //kEffectLayer
            layer = new cui.Group();
            //layer.touchEnabled = false;
            layer.hitCheckBound = false;
            layer.perWidth = 100;
            layer.perHeight = 100;
            layer.tag = 5 /* kMessageBox */;
            layers.set(5 /* kMessageBox */, layer); //kMessageBox
            game.BoxMgr.setParent(layer, self);
            layer = new cui.Group();
            layer.perWidth = 100;
            layer.perHeight = 100;
            layer.touchEnabled = false;
            layer.tag = 6 /* kTipsLayer */;
            layers.set(6 /* kTipsLayer */, layer); //kTipsLayer
            game.TipsMgr.setParent(layer, self);
            layer = new cui.Group();
            layer.perWidth = 100;
            layer.perHeight = 100;
            //layer.touchEnabled = false;
            layer.tag = 7 /* kGuildLayer */;
            layers.set(7 /* kGuildLayer */, layer); //kGuildLayer
            game.GuideMgr.setParent(layer, self);
            layer = new cui.Group();
            layer.perWidth = 100;
            layer.perHeight = 100;
            layer.touchEnabled = false;
            layer.tag = 8 /* kClickMCLayer */;
            layers.set(8 /* kClickMCLayer */, layer); //kGuildLayer
            game.ClickMcMgr.setParent(layer, self);
            popupLayer = new game.PopupLayer();
            popupLayer.delegate = self;
            popupLayer.hitCheckBound = false;
            popupLayer.perWidth = 100;
            popupLayer.perHeight = 100;
            popupLayer.tag = 4 /* kTopPopup */;
            layers.set(4 /* kTopPopup */, popupLayer); //kPopup
            self._popupTop = popupLayer;
            var busyUI = game.BusyLayer.getInst();
            busyUI.setParent(self);
            game.resMgr.loadShow = busyUI;
            game.Net.busyUI = busyUI;
            game.notifiCenter.addListener("jserr" /* JS_ERR */, function (datas) {
                busyUI.stopBusy();
                // let curGMD = dataMgr.gameMo.getCurGMD();
                // if( curGMD ) curGMD.gm.end();
                if (true) {
                    game.MsgBox.showBox("mainLang" /* mainLang */, 702 /* gameError */, datas.toString(), true);
                }
                else {
                    var webLogData = game.GameUtil.getWebLogData();
                    var curData = game.dataMgr.gameMo.getGameData(webLogData.gameId);
                    var ver = (curData && curData.update) ? curData.update.curVer : "";
                    game.HttpUtil.webLogInfo({ playId: webLogData.playId, error: datas.toString(), gameId: webLogData.gameId, gameVer: ver });
                }
            }, self);
            var homeUI = self.homeUI = new game.HomeView();
            homeUI.tag = 1 /* Home */;
            var accMo = game.dataMgr.accMo;
            var gameId = accMo.gameId;
            var gameData;
            if (gameId) {
                gameData = { inGame: true };
            }
            else {
                var roomId = CONF.roomId;
                if (roomId) {
                    var roomInfo = URLUtil.parseRoomId(roomId);
                    if (roomInfo) {
                        gameId = roomInfo.gameId;
                        gameData = roomInfo;
                    }
                }
            }
            var apiGameId = CONF.gameId;
            if (!!apiGameId) {
                if (!gameData) {
                    gameId = parseInt(apiGameId);
                    self.connEnterGm(gameId);
                }
                else {
                    if (gameId != apiGameId) {
                        accMo.regLeaveHandle(function (data) {
                            if (data.result == 1 /* e_rmt_success */) {
                                gameId = parseInt(apiGameId);
                                gameData = undefined;
                            }
                            accMo.unRegLeaveHandle();
                            self.connEnterGm(gameId, gameData);
                        }, self);
                        accMo.askLeaveGm();
                    }
                    else {
                        self.connEnterGm(gameId, gameData);
                    }
                }
            }
            else {
                self.connEnterGm(gameId, gameData);
            }
            //断线重连
            TRain.core.addNextDo(function () {
                accMo.addListener("svr_fin" /* login_svr_fin */, function () {
                    if (game.Net.isReCon) {
                        var curGMD = game.dataMgr.gameMo.getCurGMD();
                        var gameId_1 = accMo.gameId;
                        if (curGMD) {
                            if (curGMD.inited && curGMD.id != gameId_1) {
                                if (CONF.isNative) {
                                    URLUtil.nativeHandler("closeWebView"); // 关闭webView
                                }
                                curGMD.gm.end();
                                curGMD = null;
                            }
                        }
                        if (gameId_1) {
                            if (curGMD) {
                                if (curGMD.inited)
                                    curGMD.gm.onReConnect();
                            }
                            else {
                                self.startGame(gameId_1, { inGame: true });
                            }
                        }
                    }
                }, self);
            }, self);
            game.notifiCenter.delayPostEvent("enter_fin" /* enter_game_fin */, 1);
            game.chipMgr = new game.ChipManager();
            game.goldMgr = new game.GoldMange();
        };
        GameScene.prototype.connEnterGm = function (gameId, gameData) {
            var self = this;
            if (gameId) {
                self.startGame(gameId, gameData);
            }
            else {
                self.showHallUI(1 /* Home */);
            }
        };
        //--------------------------------------------------------------------------------------------
        GameScene.prototype.showLayer = function (layer) {
            this._showLayer(layer.tag, true);
        };
        GameScene.prototype.hideLayer = function (layer) {
            this._showLayer(layer.tag, false);
        };
        GameScene.prototype._showLayer = function (id, visible) {
            var self = this;
            var layers = self._layers;
            var layer = layers.get(id);
            if (visible) {
                //
                if (!layer.parent) {
                    var tag = layer.tag;
                    var children = self.$children;
                    var idx = children.length - 1;
                    for (; idx >= 0; --idx) {
                        var tmp = children[idx];
                        if (tmp.tag >= 0 && tmp.tag < tag)
                            break;
                    }
                    self.addChildAt(layer, idx + 1);
                }
            }
            else {
                if (layer.parent) {
                    self.removeChild(layer);
                }
            }
            return layer;
        };
        //--------------------------  UIDelegate start -----------------------------------------
        /**
         * 显示大厅UI
         * @param value:number 界面码
         * @param data?:any 传递给界面的参数 可选。其中 lastUI:打开此界面的上一个界面
         * */
        GameScene.prototype.showHallUI = function (tag, data, needBack) {
            var self = this;
            var oldTag = self._curTag;
            if (oldTag == tag) {
                return;
            }
            var openUI;
            if (tag > 1 /* Home */) {
                switch (tag) {
                    case 5 /* extension */:
                        openUI = new game.ExtensionView(data);
                        break;
                    case 4 /* sevenReward */:
                        openUI = new game.SevenRewardView();
                        break;
                    case 6 /* code */:
                        openUI = new game.ExtensionShareView(data);
                        break;
                    case 10 /* bxxShouyi */:
                        openUI = new game.SafeBoxView();
                        break;
                    case 9 /* safeBoxCQ */:
                        openUI = new game.SafeBoxGetOrCun(data);
                        break;
                    case 11 /* friendHome */:
                        openUI = new game.FriendCircleHome();
                        break;
                    case 12 /* roomCardHome */:
                        openUI = new game.RoomCardView();
                        break;
                    case 13 /* myWallet */:
                        openUI = new game.MyWalletView();
                        break;
                    default:
                        var cls = self._uiClss[tag];
                        if (cls) {
                            openUI = new cls(data);
                        }
                        break;
                }
            }
            if (openUI) {
                self._curTag = tag;
                openUI.tag = tag;
                openUI.open(self._mainLayer, data, function (ui) {
                    self.openFWUI(ui, ui.tag, false, needBack);
                }, self);
            }
            else {
                self.openFWUI(null, tag, false, needBack);
            }
            return openUI;
        };
        /**
         * 显示游戏UI  注：游戏UI  tag 需要大于1000
         * @param uiCls:传入要打开的界面类
         * */
        GameScene.prototype.showGameUI = function (tag, uiCls, isMain) {
            var self = this;
            var oldTag = self._curTag;
            if (oldTag == tag) {
                return;
            }
            var openUI = new uiCls();
            openUI.tag = tag;
            self.openFWUI(openUI, tag, isMain);
            game.dataMgr.gameMo.onGameShow();
            return openUI;
        };
        GameScene.prototype.getCurUI = function () {
            return this._curUI;
        };
        GameScene.prototype.getCurTag = function () {
            return this._curTag;
        };
        GameScene.prototype.openFWUI = function (newUI, tag, isMain, needBack) {
            var self = this;
            if (self._backUI) {
                self._backUI.dispose();
                self._backUI = null;
            }
            var oldUI = self._curUI;
            if (oldUI) {
                if (oldUI != self._mainUI) {
                    if (needBack) {
                        self._backUI = oldUI;
                    }
                    else {
                        oldUI.dispose();
                    }
                }
            }
            self._curUI = newUI;
            self._mainLayer.removeChildren();
            var oldMainUI = self._mainUI;
            //主界面时， 才可弹出界面
            if (newUI) {
                if (isMain) {
                    //卸载 mainUI
                    if (oldMainUI && oldMainUI.tag != 1 /* Home */) {
                        oldMainUI.dispose();
                    }
                    self._mainUI = newUI;
                }
            }
            else {
                if (tag == 1 /* Home */) {
                    //卸载 mainUI
                    if (oldMainUI && oldMainUI.tag != 1 /* Home */) {
                        oldMainUI.dispose();
                        oldMainUI = self._mainUI = null;
                    }
                }
                if (oldMainUI) {
                    newUI = oldMainUI;
                }
                else {
                    newUI = self.homeUI;
                }
            }
            self._curTag = tag;
            self._mainLayer.addChild(newUI);
            if (self._firstShow) {
                self._firstShow = false;
            }
        };
        //-----------------------------------------------------------
        GameScene.prototype.regUICls = function (tag, uiCls) {
            var uiClss = this._uiClss;
            uiClss[tag] = uiCls;
        };
        GameScene.prototype.unregUICls = function (tag) {
            delete this._uiClss[tag];
        };
        //---------------------------------- 进入子游戏 ----------------------------------
        /**
         *
         * @param gameId
         * @param data   当data有值  且inGame=true 表示当前正在游戏中
         * @param detailData 当detailData有值时说明是回放功能
         * 运营活动业绩开关 yyhd_enable
         * 无限代理业绩开关 wxdl_enable
         */
        GameScene.prototype.startGame = function (gameId, data) {
            var self = this;
            var gsMo = game.dataMgr.gsMo;
            var gameMo = game.dataMgr.gameMo;
            //首先检测这个游戏在不在
            var curGameData = gameMo.getGameData(gameId);
            if (!curGameData) {
                game.MsgBox.showTipBox(true, 42 /* e_rmt_room_notopen */);
                return;
            }
            if (data && data.detailData) {
                var gameLoadView_1 = game.GameLoadView.getInst();
                gameMo.addListener("fin" /* start_fin */, function (err, nm) {
                    if (err) {
                        //出错的情况下停止进度条
                        gameLoadView_1.stopUpdate();
                        var webLogData = game.GameUtil.getWebLogData();
                        var gameData_1 = gameMo.getGameData(gameId);
                        var tempData = {};
                        tempData.code = err;
                        tempData.name = gameData_1.conf.nm;
                        tempData.skin = CONF.res.all;
                        tempData.type = 0 /* GMD */;
                        game.HttpUtil.webLogInfo({ playId: webLogData.playId, error: JSON.stringify(tempData), gameId: gameId, gameVer: "" });
                        game.MsgBox.showPrintBoxCB("mainLang" /* mainLang */, err, function () {
                            self.hideGameLoad();
                            gameMo.closeGMD();
                            if (err == 903 /* gameNeedUp */) {
                                self.endGame();
                                var txt = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 845 /* gameAddQueue */), gameData_1.conf.nm);
                                game.MsgBox.showTipBox(false, 845 /* gameAddQueue */, "mainLang" /* mainLang */, txt);
                                gameMo.startUpdateGmd(gameId);
                            }
                        }, self, nm || "");
                    }
                    else {
                        var curGMD_1 = game.dataMgr.gameMo.getCurGMD();
                        // chipMgr.setPure(false);
                        game.VersionUI.getInst().setVer(curGMD_1.gVer || "");
                        var accMo = game.dataMgr.accMo;
                        if (accMo.gameId != accMo.lastId) {
                            self.startGC(5000);
                        }
                        else {
                            self.stopGC();
                        }
                    }
                }, self, true);
                self._popupLayer.closeAll();
                gameLoadView_1.initLoad();
                game.dataMgr.gsMo.askRoomCfg(gameId);
                gameMo.startGMD(gameId, data);
                var curGMD = game.dataMgr.gameMo.getCurGMD();
                if (curGMD && !curGMD.inited) {
                    self.showGameLoad();
                }
            }
            else {
                gsMo.addListener("check_state" /* CHECK_STATE */, function (checkData) {
                    game.BusyLayer.getInst().hideBusy();
                    var result = checkData.result;
                    if (result != 1 /* e_rmt_success */) {
                        if (result == 124 /* e_rmt_server_down */) {
                            game.MsgBox.showSafeGuard(checkData.server_down_start, checkData.server_down_end);
                        }
                        else {
                            game.MsgBox.showTipBox(true, result);
                        }
                        if (data && data.inGame) {
                            self.endGame();
                        }
                    }
                    else {
                        if (!data) {
                            data = {};
                        }
                        data.yyhd_enable = checkData.yyhd_enable;
                        data.wxdl_enable = checkData.wxdl_enable;
                        var isBindPlay = game.dataMgr.generalMo.bindBenData.bindPhone; //是否绑定才能试玩
                        if (!true && isBindPlay) {
                            //获取是否绑定
                            var isFormal = game.dataMgr.accMo.getData().isFormal;
                            if (!isFormal) {
                                //弹出提示，需要绑定才可试玩
                                game.MsgBox.showTipBox(false, 902 /* needBindPlay */, "mainLang" /* mainLang */);
                                var view = new game.Registered();
                                view.setData(true);
                                game.gameScene.openPopup(view);
                                return;
                            }
                        }
                        //根据游戏id获取当前游戏版本
                        var curSvrList = gameMo.getData();
                        var minVer = 0;
                        for (var i = 0, len = curSvrList.length; i < len; i++) {
                            var gameInfo = curSvrList[i];
                            if (gameInfo.gameid == gameId) {
                                minVer = gameInfo.minVer || 0;
                            }
                        }
                        //获取app版本
                        var jsAppVer = CONF.appVer;
                        if (CONF.isNative && jsAppVer < minVer) {
                            game.gameScene.openPopup(new game.UpDateVer());
                        }
                        else {
                            var gameLoadView_2 = game.GameLoadView.getInst();
                            gameMo.addListener("fin" /* start_fin */, function (err, nm) {
                                //BusyLayer.getInst().hideBusy();
                                var gameData = gameMo.getGameData(gameId);
                                if (err) {
                                    //MsgBox.showPrompt(err);
                                    //出错的情况下停止进度条
                                    gameLoadView_2.stopUpdate();
                                    var webLogData = game.GameUtil.getWebLogData();
                                    var tempData = {};
                                    tempData.code = err;
                                    tempData.name = gameData.conf.nm;
                                    tempData.skin = CONF.res.all;
                                    tempData.type = 0 /* GMD */;
                                    game.HttpUtil.webLogInfo({ playId: webLogData.playId, error: JSON.stringify(tempData), gameId: gameId, gameVer: "" });
                                    game.MsgBox.showPrintBoxCB("mainLang" /* mainLang */, err, function () {
                                        self.endGame();
                                        if (err == 903 /* gameNeedUp */) {
                                            var txt = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 845 /* gameAddQueue */), gameData.conf.nm);
                                            game.MsgBox.showTipBox(false, 845 /* gameAddQueue */, "mainLang" /* mainLang */, txt);
                                            gameMo.startUpdateGmd(gameId);
                                        }
                                    }, self, nm || "");
                                }
                                else {
                                    var curGMD_2 = game.dataMgr.gameMo.getCurGMD();
                                    game.chipMgr.setPure(gameData.pure_model);
                                    game.VersionUI.getInst().setVer(curGMD_2.gVer || "");
                                    var accMo = game.dataMgr.accMo;
                                    if (accMo.gameId != accMo.lastId) {
                                        self.startGC(5000);
                                    }
                                    else {
                                        self.stopGC();
                                    }
                                }
                            }, self, true);
                            self._popupLayer.closeAll();
                            //BusyLayer.getInst().showBusy();
                            gameLoadView_2.initLoad();
                            game.dataMgr.gsMo.askRoomCfg(gameId);
                            gameMo.startGMD(gameId, data);
                            var curGMD = game.dataMgr.gameMo.getCurGMD();
                            if (curGMD && !curGMD.inited) {
                                self.showGameLoad();
                            }
                        }
                    }
                }, self, true);
                gsMo.checkGameState(gameId);
            }
        };
        /**
         *
         * @param isKcik 是否是没钱被踢
         * @param isPlayBack 回放返回
         * @param isRmCardGm 是否是房卡游戏退出
         */
        GameScene.prototype.endGame = function (isKcik, isPlayBack, isRmCardGm) {
            var self = this;
            var closeUrlType = CONF.CloseUrlType;
            if (closeUrlType && closeUrlType == "1") {
                var homeUrl = CONF.homeUrl;
                URLUtil.changeWebURL(homeUrl);
                return;
            }
            game.dataMgr.guildMo.initGuildHandle();
            var accMo = game.dataMgr.accMo;
            accMo.askSynGold(); //同步金币
            accMo.askVipInfo(); //同步vip信息
            //七日奖励请求
            // dataMgr.generalMo.sendGetQuestlist(false);
            game.TipsMgr.clear();
            game.TipsMgr.clearWait();
            self.closePop(); //关闭所有弹窗
            game.chipMgr.resetAreaArr();
            game.goldMgr.reset();
            self.homeUI.setNotifyParent(null);
            game.VersionUI.getInst().setParent(null);
            game.dataMgr.gsMo.rmvRoomCfg();
            game.dataMgr.gsMo.rmvGoodRoadCfgs();
            game.dataMgr.gameMo.closeGMD();
            game.dataMgr.gsMo.endConn();
            self.goHome();
            self.hideGameLoad();
            self.startGC(30000);
            if (isRmCardGm) {
                game.gameScene.showHallUI(12 /* roomCardHome */);
            }
            if (!isPlayBack) {
                if (isKcik) {
                    self.homeUI.openRevivePop();
                }
                self.homeUI.openFunPop(true);
            }
            else {
                game.notifiCenter.postEvent("open_detail_view" /* OPEN_DETAIL_VIEW */);
            }
        };
        GameScene.prototype.friendEndGame = function (isPlayBack) {
            var self = this;
            var closeUrlType = CONF.CloseUrlType;
            if (closeUrlType && closeUrlType == "1") {
                var homeUrl = CONF.homeUrl;
                URLUtil.changeWebURL(homeUrl);
                return;
            }
            game.dataMgr.guildMo.initGuildHandle();
            var accMo = game.dataMgr.accMo;
            accMo.askSynGold(); //同步金币
            accMo.askVipInfo(); //同步vip信息
            game.TipsMgr.clear();
            game.TipsMgr.clearWait();
            self.closePop(); //关闭所有弹窗
            self.homeUI.setNotifyParent(null);
            game.VersionUI.getInst().setParent(null);
            game.dataMgr.gsMo.rmvRoomCfg();
            game.dataMgr.gsMo.rmvGoodRoadCfgs();
            game.dataMgr.gameMo.closeGMD();
            self.hideGameLoad();
            self.goHome();
            self.startGC(30000);
            //打开亲友圈
            game.gameScene.showHallUI(11 /* friendHome */);
            if (isPlayBack) {
                game.notifiCenter.postEvent("open_detail_view" /* OPEN_DETAIL_VIEW */);
            }
        };
        GameScene.prototype.startGC = function (tm) {
            var self = this;
            if (self._gcTag) {
                TRain.core.adjustDelayTmByID(self._gcTag, tm);
            }
            else {
                self._gcTag = TRain.core.addDelayDo(function () {
                    self._gcTag = 0;
                    self.doGC();
                }, self, tm);
            }
        };
        GameScene.prototype.stopGC = function () {
            var self = this;
            var gcTag = self._gcTag;
            if (gcTag) {
                self._gcTag = 0;
                TRain.core.rmvDelayDoByID(gcTag);
            }
        };
        GameScene.prototype.doGC = function () {
            game.dbMgr.doGC();
            TRain.mcMgr.doGC();
            TRain.soundMgr.gcRess();
            TRain.assetMgr.doGC();
            RES.doGC();
        };
        //----------------------------------弹出窗口---------------------------------------
        GameScene.prototype.goBack = function () {
            var self = this;
            var ui = self._mainUI;
            if (ui) {
                self.openFWUI();
            }
            else {
                self.goHome();
            }
        };
        GameScene.prototype.goHome = function () {
            var self = this;
            var backUI = self._backUI;
            if (backUI) {
                self._backUI = null;
                self.openFWUI(backUI, backUI.tag);
            }
            else {
                self.openFWUI(null, 1 /* Home */);
            }
        };
        GameScene.prototype.onBackClk = function () {
            if (this.$stage) {
                if (!game.dataMgr.gameMo.goBack()) {
                    //to do 大厅操作
                }
            }
            //console.log( "onBackClk" );
        };
        GameScene.prototype.openPopup = function (popup, data, isTop) {
            var self = this;
            var layer = isTop ? self._popupTop : self._popupLayer;
            popup.delegate = self;
            layer.openPopup(popup, data);
        };
        GameScene.prototype.openPopupByTag = function (tag, data, isTop) {
            var self = this;
            var uiCls = self._uiClss[tag];
            if (uiCls) {
                self.openPopup(new uiCls(), data, isTop);
            }
        };
        GameScene.prototype.closePop = function () {
            var self = this;
            self.closeAllPopup();
            self.closeAllTopPop();
        };
        GameScene.prototype.closeAllTopPop = function () {
            var self = this;
            var layer = self._popupTop;
            layer.closeAll();
        };
        GameScene.prototype.closeAllPopup = function () {
            var self = this;
            var layer = self._popupLayer;
            layer.closeAll();
        };
        GameScene.prototype.onPopupOpen = function (popup) {
            var self = this;
            if (popup.hideHome) {
                self._hideHome++;
                if (self._hideHome == 1) {
                    self._showLayer(0 /* kMainLayer */, false);
                }
            }
        };
        GameScene.prototype.onPopupClose = function (popup) {
            var self = this;
            if (popup.hideHome) {
                self._hideHome--;
                if (self._hideHome == 0) {
                    self._showLayer(0 /* kMainLayer */, true);
                }
            }
        };
        GameScene.prototype.stopPopup = function () {
            var layer = (this._layers.get(3 /* kPopup */));
            layer.stopPop();
        };
        GameScene.prototype.startPopup = function () {
            var layer = (this._layers.get(3 /* kPopup */));
            layer.startPop();
        };
        GameScene.prototype.hideGameLoad = function () {
            var layer = this._layers.get(2 /* kLoadLayer */);
            this.hideLayer(layer);
        };
        GameScene.prototype.showGameLoad = function () {
            var layer = this._layers.get(2 /* kLoadLayer */);
            this.showLayer(layer);
        };
        //----------------------全屏特效-------------------------
        GameScene.prototype.addSceneEff = function (eff) {
            var self = this;
            var effLay = self._layers.get(1 /* kEffectLayer */);
            effLay.addEffect(eff);
        };
        /**
         * 同时播放多个场景特效，仅用于小特效
         */
        GameScene.prototype.showSceneEff = function (eff) {
            var self = this;
            var effLay = self._layers.get(1 /* kEffectLayer */);
            effLay.showEffect(eff);
        };
        return GameScene;
    }(game.BaseScene));
    game.GameScene = GameScene;
    __reflect(GameScene.prototype, "game.GameScene", ["game.PopupDelegate"]);
})(game || (game = {}));
var game;
(function (game) {
    var GuideMgr;
    (function (GuideMgr) {
        var _parent; //父窗口
        var _delegate;
        var _ui;
        function setParent(parent, layerDelegate) {
            if (_parent && _ui) {
                _parent.removeChild(_ui);
                close();
            }
            _parent = parent;
            _delegate = layerDelegate;
            if (parent && _ui) {
                parent.addChild(_ui);
                show();
            }
        }
        GuideMgr.setParent = setParent;
        function clear() {
            close();
        }
        GuideMgr.clear = clear;
        function close() {
            if (_parent.parent) {
                _delegate.hideLayer(_parent);
            }
        }
        function show() {
            if (!_parent.parent) {
                _delegate.showLayer(_parent);
            }
        }
        function guideState(state) {
            if (_ui)
                _parent.removeChild(_ui);
            switch (state) {
                case 0 /* first */:
                    _ui = new game.FirstGuide();
                    break;
                case 1 /* second */:
                    _ui = new game.SecondGuide();
                    break;
                case 2 /* third */:
                    _ui = new game.ThirdGuide();
                    break;
                case 3 /* four */:
                    _ui = new game.FourthGuide();
                    break;
                case 4 /* fif */:
                    _ui = new game.FifthGuide();
                    break;
            }
            _parent.addChild(_ui);
        }
        GuideMgr.guideState = guideState;
        function showGuild() {
            show();
            this.guideState(0 /* first */);
        }
        GuideMgr.showGuild = showGuild;
    })(GuideMgr = game.GuideMgr || (game.GuideMgr = {}));
})(game || (game = {}));
var game;
(function (game) {
    var ConfGroup = (function (_super) {
        __extends(ConfGroup, _super);
        function ConfGroup() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConfGroup;
    }(cui.Group));
    game.ConfGroup = ConfGroup;
    __reflect(ConfGroup.prototype, "game.ConfGroup");
})(game || (game = {}));
var game;
(function (game) {
    var GetReward = (function (_super) {
        __extends(GetReward, _super);
        function GetReward(gold, skin) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "getRewardSkin";
            self.hideBg = true;
            self.hCenter = 0;
            self.vCenter = 0;
            self.pri = 10000 /* top */;
            self._showGold = gold;
            return _this;
        }
        GetReward.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var gPos = new egret.Point();
            gPos.x = self.skWinGold.x;
            gPos.y = self.skWinGold.y;
            self._goldPos = gPos;
            if (self._showGold) {
                self.showWinGrp(self._showGold);
            }
        };
        GetReward.prototype.showWinGrp = function (gold) {
            var self = this;
            var ani = self.skGoldAni;
            var winGold = self.skWinGold;
            var pos = self._goldPos;
            winGold.text = game.DataFormat.convertGoldString3(gold);
            winGold.alpha = 0;
            winGold.scaleX = 7;
            winGold.scaleY = 7;
            winGold.x = pos.x + 100;
            winGold.y = pos.y - 100;
            ani.gotoAndPlay("action01", 0, 1);
            ani.addEventListener("play_fin" /* EVT_PLAY_FIN */, function () {
                ani.gotoAndPlay("action02");
                var action = new TRain.ActionPropTo(250, 1, { alpha: 1, x: pos.x, y: pos.y, scaleX: 1, scaleY: 1 });
                var actionCall = new TRain.ActionCallDo(1000);
                actionCall.setCall(self.close, self);
                action = new TRain.ActionSequence([action, actionCall]);
                TRain.actionMgr.addAction(action, winGold, false);
            }, self);
        };
        GetReward.prototype.onDispose = function () {
            var self = this;
            if (self.skGoldAni)
                self.skGoldAni.dispose();
            _super.prototype.onDispose.call(this);
        };
        return GetReward;
    }(game.UIPopup));
    game.GetReward = GetReward;
    __reflect(GetReward.prototype, "game.GetReward");
})(game || (game = {}));
var game;
(function (game) {
    var HlhEwmView = (function (_super) {
        __extends(HlhEwmView, _super);
        function HlhEwmView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "hlhEwmSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        HlhEwmView.prototype.childrenCreated = function () {
            var self = this;
            self.skClose.setTarget(function () {
                self.close();
            }, self);
        };
        return HlhEwmView;
    }(game.UIPopup));
    game.HlhEwmView = HlhEwmView;
    __reflect(HlhEwmView.prototype, "game.HlhEwmView");
})(game || (game = {}));
var game;
(function (game) {
    var HlhSettingView = (function (_super) {
        __extends(HlhSettingView, _super);
        function HlhSettingView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "hlhSettingSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        HlhSettingView.prototype.childrenCreated = function () {
            var self = this;
            self.skClose.setTarget(function () {
                self.close();
            }, self);
            var soundMgr = TRain.soundMgr;
            self.skMusic.setTarget(function () {
                var tempMcState = soundMgr.musicState;
                game.GameUtil.setLocal("MUSIC_STATUS" /* MUSIC_STATUS */, !tempMcState);
                soundMgr.musicState = !tempMcState;
                self.updateMcAndSd();
            }, self);
            self.skSound.setTarget(function () {
                var tempSdState = soundMgr.sfxState;
                game.GameUtil.setLocal("SFX_STATUS" /* SFX_STATUS */, !tempSdState);
                soundMgr.sfxState = !tempSdState;
                self.updateMcAndSd();
            }, self);
            self.updateMcAndSd();
        };
        HlhSettingView.prototype.updateMcAndSd = function () {
            var self = this;
            var soundMgr = TRain.soundMgr;
            self.skMusic.icon = "hall_setting@" + (soundMgr.musicState ? "open" : "close");
            self.skSound.icon = "hall_setting@" + (soundMgr.sfxState ? "open" : "close");
            if (soundMgr.musicState) {
                game.dataMgr.soundMo.playMusic();
            }
            else {
                soundMgr.stopMusic();
            }
            if (!soundMgr.sfxState)
                soundMgr.stopAllSFX();
        };
        return HlhSettingView;
    }(game.UIPopup));
    game.HlhSettingView = HlhSettingView;
    __reflect(HlhSettingView.prototype, "game.HlhSettingView");
})(game || (game = {}));
var game;
(function (game) {
    var HomeView = (function (_super) {
        __extends(HomeView, _super);
        function HomeView() {
            var _this = _super.call(this) || this;
            // public skMoneyBag:cui.SimpleButton;
            // public skAniLeft:cui.UIMovieClip;
            // public skAniRight:cui.UIMovieClip;
            _this._classFlag = 1;
            var self = _this;
            self.skinName = "gameHallSkin";
            self._notifyUI = new game.NotifyUI();
            self._loginCount = 0;
            self._offX = "";
            self._isFlashGirl = self.skGirlImg ? self.skGirlImg.visible : false;
            self._soundNum = [0, 0, 0, 0];
            // self._xfyFrameNum = 0;
            self._onlineTm = 0;
            // self._onlineTag = 0;
            // self._tipNum = 0;
            self._isHaveGuide = false;
            self._tmTag = 0;
            self._xfTm = 10;
            // self._bubbleTm = 0;
            self._bubbleCloseTm = 0;
            self._isCanTime = false;
            self._clickTm = 0;
            self._clickAniTm = 0;
            self._headBtnOpen = false;
            self._bindFlag = true;
            // self._isFirstSet = true;
            self._newGames = [];
            if (self.skBgBar)
                self.skBgBar.direction = "rtl" /* RTL */;
            self._newTileTag = -1;
            self._isFristEnter = true;
            self._balanceDeyTag = 0;
            self._clickGmIds = [];
            self._gameTags = [];
            return _this;
        }
        HomeView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            if (self.skImgDone)
                self._point = { x: self.skImgDone.right, y: self.skImgDone.top };
            if (self.skConfGrp) {
                self._offX = self.skConfGrp.offX || "";
                self._changeNotice = self.skConfGrp.noticeNm || "";
                self.removeChild(self.skConfGrp);
            }
            if (self.skClassGrp) {
                for (var i = 0; i < self.skClassGrp.numChildren; ++i) {
                    var menuChild = self.skClassGrp.getChildAt(i);
                    self._gameTags.push(menuChild.tag);
                }
            }
            var accMo = game.dataMgr.accMo;
            var sortCls = accMo.getSortCls();
            var sortClsLen = sortCls.length;
            if (sortClsLen > 0 && !self.skKfBtn) {
                for (var m = sortCls.length - 1; m >= 0; m--) {
                    var mIdx = sortCls[m];
                    if (self._gameTags.indexOf(mIdx) == -1) {
                        sortCls.splice(m, 1);
                        continue;
                    }
                }
                // if(accMo.isApi){
                // 	let idx = sortCls.indexOf(GameClass.create_room);
                // 	if(idx >= 0){
                // 		sortCls.splice(idx,1);
                // 	}
                // 	idx = sortCls.indexOf(GameClass.video);
                // 	if(idx >= 0){
                // 		sortCls.splice(idx,1);
                // 	}
                // }
                var hasHot = self._gameTags.indexOf(20 /* hot_game */) != -1;
                for (var i = sortCls.length - 1; i >= 0; i--) {
                    var index = sortCls[i];
                    for (var j = self.skClassGrp.numChildren - 1; j >= 0; j--) {
                        var menuChild = self.skClassGrp.getChildAt(j);
                        var tag = menuChild.tag;
                        var width = menuChild.width;
                        var height = menuChild.height;
                        if (index == tag && tag > 0) {
                            var hall = CONF.res.hall;
                            var newIdx = hasHot ? i + 1 : i;
                            if (hall == "hall10") {
                                menuChild.x = width * (newIdx);
                            }
                            else {
                                menuChild.y = height * (newIdx);
                            }
                            self.skClassGrp.setChildIndex(menuChild, newIdx);
                        }
                    }
                }
            }
            if (self.skNotice)
                self._oldNotice = self.skNotice.getChildAt(0).aniName;
            if (!accMo.isApi && !self.skKfBtn) {
                self._soundNum[0] = TRain.soundMgr.playSFX("dating" /* dating */);
            }
            // self.skTipBtn1.setTarget(function () {
            // 	if (self.skGrp.scaleX == 1 && self.skGrp.scaleY == 1) {
            // 		//打开状态
            // 		self.randomTxt();
            // 		self._bubbleTm = 2;
            // 		self._bubbleCloseTm = 0;
            // 	} else if (self.skGrp.scaleX == 0 && self.skGrp.scaleY == 0) {
            // 		// 	//关闭状态
            // 		TRain.core.rmvDelayDoByFlag(self._tempGameId);
            // 		// self.frameFunOpen();
            // 	}
            // }, self);
            // self.skTipBtn.setTarget(function () {
            // 	//打开状态
            // 	self.randomTxt();
            // 	self._bubbleTm = 2;
            // 	self._bubbleCloseTm = 0;
            // }, self);
            if (self.skSoundBtn) {
                self.skSoundBtn.sound = "click" /* click */;
            }
            if (self.skKfBtn) {
                var homeWd = self.width;
                self.skKfBtn.setTarget(game.HttpUtil.gotoKeFu, game.HttpUtil);
                self.skEwmBtn.setTarget(function () {
                    game.gameScene.openPopup(new game.HlhEwmView(), self);
                }, self);
                self.skSetting.setTarget(function () {
                    game.gameScene.openPopup(new game.HlhSettingView(), self);
                }, self);
                var hlhGrp = self.skHlhGrp;
                hlhGrp.itemRender = game.HeadTile;
                hlhGrp.itemSkinName = "hlhGmTileSkin";
                hlhGrp.dataProvider = new cui.ArrayCollection();
                var hlhGmsConfs = game.dataMgr.generalMo.getHlhGmsConf();
                var tmpArr = [];
                for (var key in hlhGmsConfs) {
                    var hlhGms = hlhGmsConfs[key];
                    var showData = {
                        handle: self,
                        bg: "hall_txt_game" + hlhGms.idx,
                        icon: "hall_hall@txt_nm" + hlhGms.idx,
                        lab: hlhGms.nm,
                    };
                    tmpArr.push(showData);
                }
                hlhGrp.dataProvider.source = tmpArr;
                self.skMenuGame.setContentSize(160 * 7, self.skMenuGame.height);
                self.skMenuGame.setTarget(function () {
                    URLUtil.outLayOpenUrl(CONF.hlhUrl);
                }, self);
                self.setHlhResize(homeWd);
            }
            self.setBindOrSave();
            var accData = accMo.getData();
            var sevenDay_Done = accData.sevenday_done;
            var isLookSDay = game.dataMgr.generalMo.isFunOpen(5 /* sevenDay */); //是否开放七日奖励
            if (self.skTask)
                self.skTask.visible = (!!sevenDay_Done && game.dataMgr.gameMo.getData().length > 7 && isLookSDay) ? true : false;
            if (self.skReward)
                self.skReward.visible = (!sevenDay_Done && game.dataMgr.gameMo.getData().length > 7 && isLookSDay) ? true : false;
            if (self.skWallet)
                self.skWallet.visible = game.dataMgr.generalMo.isFunOpen(12 /* wallet */);
            if (self.skGameSc)
                self._gamesBeginX = self.skGameSc.x;
            if (self.skBHead)
                self.skBHead.setTarget(function () {
                    TRain.soundMgr.playSFX("click" /* click */);
                    game.gameScene.openPopup(new game.PersonCenter());
                    if (self._soundNum[0] || self._soundNum[2] || self._soundNum[3]) {
                        TRain.soundMgr.stopSFX(self._soundNum[0]);
                        TRain.soundMgr.stopSFX(self._soundNum[2]);
                        TRain.soundMgr.stopSFX(self._soundNum[3]);
                    }
                    self._soundNum[1] = TRain.soundMgr.playSFX("personInfo" /* personInfo */);
                }, self);
            if (self.skBSet)
                self.skBSet.setTarget(function () {
                    //打开设置界面
                    TRain.soundMgr.playSFX("click" /* click */);
                    var view = new game.SettingView();
                    game.gameScene.openPopup(view);
                }, self);
            if (self.skMail)
                self.skMail.setTarget(function () {
                    //打开邮件界面
                    TRain.soundMgr.playSFX("click" /* click */);
                    var view = new game.MailView();
                    game.gameScene.openPopup(view);
                    if (self._soundNum[0] || self._soundNum[1] || self._soundNum[3]) {
                        TRain.soundMgr.stopSFX(self._soundNum[0]);
                        TRain.soundMgr.stopSFX(self._soundNum[1]);
                        TRain.soundMgr.stopSFX(self._soundNum[3]);
                    }
                    self._soundNum[2] = TRain.soundMgr.playSFX("email" /* email */);
                }, self);
            if (self.skService)
                self.skService.setTarget(game.HttpUtil.gotoKeFu, game.HttpUtil);
            if (self.skClass)
                self.skClass.setTarget(function () {
                    if (self._classFlag == 0) {
                        // self.skClassGroup.addChildAt(self.skClassGrp, 0);
                        self.skMenuBg.visible = self.skClassGrp.visible = true;
                        self._classFlag = 1;
                    }
                    else {
                        // self.skClassGroup.removeChildAt(0);
                        self.skMenuBg.visible = self.skClassGrp.visible = false;
                        self._classFlag = 0;
                    }
                }, self);
            if (self.skProfit) {
                self.skProfit.setTarget(function () {
                    TRain.soundMgr.playSFX("click" /* click */);
                    self.rechargeMoClick();
                }, self);
            }
            if (self.skLeft)
                self.skLeft.setTarget(function () {
                    // if(self.skGames.scrollH == 0){
                    // 	self.skLeft.visible = false;
                    // 	self.skRight.visible = true;
                    // }else 
                    if (self.skGames.scrollH < 700) {
                        self.skGameSc.setScrollLeft(0, 500);
                        // self.skLeft.visible = false;
                        // self.skRight.visible = true;
                    }
                    else {
                        self.skGameSc.setScrollLeft(self.skGames.scrollH - 700, 500);
                    }
                    TRain.core.addDelayDo(self.showArrow, self, 500);
                }, self);
            if (self.skRight)
                self.skRight.setTarget(function () {
                    self.skGameSc.setScrollLeft(self.skGames.scrollH + 700, 500);
                    // self.skLeft.visible = true;
                    TRain.core.addDelayDo(self.showArrow, self, 500);
                }, self);
            if (self.skSafeBox) {
                self.skSafeBox.setTarget(function () {
                    generalMo.setSelfGold(-1);
                    var tempData = accMo.getData();
                    var isBind = tempData.isFormal;
                    if (isBind) {
                        var isOpen = tempData.isSafeDepositBoxPwdEmpty;
                        game.gameScene.openPopup(new game.SafeBoxOpen(isOpen));
                    }
                    else {
                        game.MsgBox.showBoxCB("mainLang" /* mainLang */, 874 /* kaiqiTS */, function (tag) {
                            if (tag == 1) {
                                var view = new game.Registered();
                                view.setData(true);
                                game.gameScene.openPopup(view);
                            }
                        }, self);
                    }
                }, self);
            }
            var list = self.skGames;
            if (list) {
                list.itemRender = game.GameTile;
                list.itemSkinName = "gameTileSkin";
                list.dataProvider = new cui.ArrayCollection();
            }
            game.dataMgr.generalMo.askWalletList(true);
            self.updateHead();
            accMo.addPropListener("icon_custom", self.updateHead, self);
            accMo.addPropListener("viplvl", self.updateHead, self);
            accMo.addPropListener("gold", self.updateGold, self);
            accMo.addPropListener("nickname", self.updateHead, self);
            accMo.addPropListener("sevenday_done", self.updateSevenDayBtn, self);
            accMo.addPropListener("room_card", function () {
                if (self.skCardNum) {
                    self.skCardNum.text = String(accMo.getData().room_card || 0);
                }
            }, self);
            if (self.skClassGrp) {
                self.skClassGrp.setTarget(self.menuClick, self);
                if (self.skClassGrp.getChildByTag(20 /* hot_game */)) {
                    self.skClassGrp.selectTag = 20 /* hot_game */;
                }
                else {
                    self.skClassGrp.selectTag = 0;
                }
            }
            if (self._isFlashGirl) {
                self.flipGirlGrp();
            }
            // self.skBinding.setTarget(self.bindGift, self);
            if (self.skRelief)
                self.skRelief.setTarget(self.bindGift, self);
            if (self.skExtension) {
                self.skExtension.setTarget(function () {
                    game.gameScene.showHallUI(5 /* extension */);
                }, self);
            }
            if (self.skTask) {
                self.skTask.setTarget(function () {
                    //打开限时悬赏界面
                    TRain.soundMgr.playSFX("click" /* click */);
                    game.gameScene.openPopup(new game.LimitReward2());
                    //generalMo.sendGetQuestlist();
                }, self);
            }
            if (self.skReward) {
                self.skReward.setTarget(function () {
                    //七日奖励
                    TRain.soundMgr.playSFX("click" /* click */);
                    // GameUtil.playClickSound();
                    //点击大厅七日图标
                    if (isLookSDay)
                        game.gameScene.showHallUI(4 /* sevenReward */);
                }, self);
            }
            if (self.skWallet) {
                self.skWallet.setTarget(function () {
                    game.gameScene.showHallUI(13 /* myWallet */);
                    // MsgBox.showTxt(LangGrp.mainLang,langConsts.mainLang.notOpen);
                }, self);
            }
            self.showNewGames();
            self.setNotifyParent(null);
            var _loop_6 = function (i) {
                var gameBtn = self["skGame" + i];
                if (gameBtn) {
                    gameBtn.setTarget(function () {
                        TRain.soundMgr.playSFX("click" /* click */);
                        if (self._newGames[i]) {
                            var gameId = self._newGames[i].id;
                            var timers = egret.getTimer();
                            if (timers - 2000 /* CLICK_INTERVALTM */ > self._clickTm) {
                                game.gameScene.startGame(gameId);
                                self._clickTm = timers;
                            }
                        }
                    }, self);
                }
            };
            for (var i = 0; i < 2; i++) {
                _loop_6(i);
            }
            //刚登陆游戏，需要弹出某个窗口
            //也需要判断是游客还是用户
            var generalMo = game.dataMgr.generalMo;
            generalMo.addListener("ShowGameClass" /* ShowGameClass */, function (tag) {
                // self.showGameClass(tag);
                self.skClassGrp.selectTag = tag;
            }, self);
            // generalMo.addListener(General_EVT.changeHead,);
            accMo.addListener("bin_fin" /* bin_phone_fin */, self.setBindOrSave, self);
            accMo.addListener("update_notice" /* update_notice */, function () {
                self.showNoticeNum();
            }, self);
            game.notifiCenter.addListener("bind_miss" /* BIND_MISS */, function (isShow) {
                self.skBinding.visible = isShow;
                self._bindFlag = isShow;
                self.updateBtn();
            }, self);
            generalMo.addListener("IsDone" /* IsDone */, function (data, data2) {
                var showDone = data || data2;
                if (self.skImgDone && showDone && game.dataMgr.gameMo.getData().length > 7) {
                    self.skImgDone.source = data2 ? "hall_hall@txt_done" : "notice@noRead2";
                    self.skImgDone.right = data2 ? self._point.x : self._point.x + 15;
                    self.skImgDone.top = data2 ? self._point.y : self._point.y + 15;
                }
                if (self.skImgDone)
                    self.skImgDone.visible = (showDone && game.dataMgr.gameMo.getData().length > 7 && isLookSDay) ? true : false;
            }, self);
            var isShowDone = generalMo.isDone || generalMo.isget;
            if (self.skImgDone && isShowDone && game.dataMgr.gameMo.getData().length > 7) {
                self.skImgDone.source = generalMo.isget ? "hall_hall@txt_done" : "notice@noRead2";
                self.skImgDone.right = generalMo.isget ? self._point.x : self._point.x + 15;
                self.skImgDone.top = generalMo.isget ? self._point.y : self._point.y + 15;
            }
            if (self.skImgDone)
                self.skImgDone.visible = (isShowDone && game.dataMgr.gameMo.getData().length > 7 && isLookSDay) ? true : false;
            // self._tipNum = 0;
            // TRain.core.addFrameDo(self.randomTxt, self, true, 2000);
            //注册游戏后首次登陆游戏，调用定位，该功能用于玩家发展下线用
            game.HttpUtil.sendLocation();
            var LinkUrl = game.UIUtils.getQRLinkUrl(accMo.getData().aid);
            generalMo.askPromoteUrl(LinkUrl.channelID, LinkUrl.params);
            if (self.skNotice) {
                self.skNoticeGrp = self.skNotice.getChildAt(1);
                self.skNoticeMvp = self.skNotice.getChildAt(0);
            }
            self.showNoticeNum();
            self.noticeGrpAni();
            game.dataMgr.mailMo.addListener("mailupdate" /* update */, self.showRed, self);
            self.showRed();
            generalMo.addListener("backInfo" /* backInfo */, self.openFunPop, self);
            game.dataMgr.generalMo.sendPerformanceInfo();
            game.dataMgr.generalMo.sendPerformList(true);
            game.dataMgr.generalMo.addListener("GetQuestReward" /* GetQuestReward */, function () {
                // self.skImgDone.visible = false;
                game.dataMgr.generalMo.sendGetQuestlist(false);
            }, self);
            //一分钟请求一次邮件列表
            // TRain.core.addFrameDo(function(){
            // },self,false,6000);
            self.setScOffX();
            accMo.addListener("bin_fin" /* bin_phone_fin */, self.playReward, self);
            if (!accMo.isApi)
                self.initRepair();
            if (self.skXfScrll) {
                self.skXfScrll.activeInView = true;
                self.skXfScrll.setTarget(function (tableIdx) {
                    self.skXfBtnGrp.selectTag = tableIdx;
                    self._xfTm = 10;
                }, self);
            }
            game.dataMgr.actMo.addPropListener("onlineAwd", self.initOnline, self);
            if (self.skOnlineReward) {
                self.skOnlineReward.setTarget(function () {
                    var actData = game.dataMgr.actMo.getData().onlineAwd;
                    if (actData && actData.uId != -1) {
                        game.gameScene.showHallUI(8 /* activity */, { tp: 0, state: 1 /* hall */, uid: actData.uId });
                    }
                }, self);
            }
            var playId = accMo.getData().aid;
            var haveLocal = accMo.idHaveLocal(playId);
            var isApi = accMo.isApi;
            if (accData.LogOutTime == 0 && !haveLocal && !isApi && !self.skKfBtn) {
                accMo.firstGold = accData.gold;
                accMo.setVal("gold", 0);
                game.GuideMgr.showGuild();
                self._isHaveGuide = true;
                accMo.setIdToLocal(playId);
            }
            // else {
            // 	self.openFunPop(true);
            // }
            game.dataMgr.actMo.addPropListener("bindActList", self.updateIcon, self);
            generalMo.addListener("guide" /* NewGuide */, function () {
                self._isHaveGuide = false;
                self.playReward(true);
            }, self);
            // self.initIcon();
            var gameMo = game.dataMgr.gameMo;
            gameMo.addListener("up_gmd_pro" /* update_gmd_progress */, function (data, per) {
                for (var i = 0, len = self._showGames.length; i < len; i++) {
                    var showGame = self._showGames[i];
                    if (showGame && showGame.ud.file == data.file && self._clickGmIds.indexOf(showGame.tag) != -1) {
                        showGame.upState = { state: 2 /* UPDATING */, proBar: per };
                        self.skGames.dataProvider.itemUpdated(showGame);
                    }
                }
            }, self);
            gameMo.addListener("up_gmd_fin" /* update_gmd_fin */, function (data, errData) {
                var info = gameMo.getGameData(data.gameId);
                var updateData = info.update;
                var gameId = data.gameId;
                for (var i = 0, len = self._showGames.length; i < len; i++) {
                    var showGame = self._showGames[i];
                    if (showGame && showGame.ud.file == data.file) {
                        if (self._clickGmIds.indexOf(showGame.tag) != -1) {
                            gameId = showGame.tag;
                        }
                        showGame.upState = { state: updateData.state, proBar: updateData.progress };
                        self.skGames.dataProvider.itemUpdated(showGame);
                    }
                }
                var isRoomCls = info.conf.class2.indexOf(7 /* create_room */) != -1;
                if (!isRoomCls) {
                    URLUtil.gameLoadErr(gameId, errData);
                }
            }, self);
            if (self.skNotice)
                self.skNotice.setTarget(self.activityMoClick, self);
            if (self.skBinding)
                self.skBinding.setTarget(self.activityMoClick, self);
            if (self.skStore)
                self.skStore.setTarget(self.rechargeMoClick, self);
            if (self.skAdd)
                self.skAdd.setTarget(self.rechargeMoClick, self);
            if (self.skAddCard)
                self.skAddCard.setTarget(self.rechargeMoClick, self);
            //房卡
            if (self.skCardNum) {
                self.skCardNum.text = String(accMo.getData().room_card || 0);
            }
            if (self.skRoomCardNumGrp) {
                self.skRoomCardNumGrp.visible = game.dataMgr.gameMo.isOpenRmCard();
            }
            if (self.skHeadBtn) {
                self.skHeadBtn.setTarget(function () {
                    self._headBtnOpen = !self._headBtnOpen;
                    self.skHeadBtn.icon = self._headBtnOpen ? "hall_hall@jtRight" : "hall_hall@jtLeft";
                    self.updateBar();
                }, self);
            }
            game.notifiCenter.addListener("open_detail_view" /* OPEN_DETAIL_VIEW */, self.openDetail, self);
            if (accMo.isApi) {
                self.showApiBtn();
                // self.skBack.visible = dataMgr.accMo.isApi && CONF.homeUrl != ""; 改到api入场的时候设置
                if (self.skBack)
                    self.skBack.setTarget(function () {
                        TRain.soundMgr.playSFX("click" /* click */);
                        var homeUrl = CONF.homeUrl;
                        // if(!homeUrl){
                        // 	MsgBox.showTipBox(false,langConsts.mainLang.addLinks,LangGrp.mainLang);
                        // }else{
                        URLUtil.changeWebURL(homeUrl);
                        // }
                    }, self);
            }
            // let chat = new Chat();
            // chat.vCenter = 0;
            // chat.hCenter = 0;
            // chat.initChatSys({chatUrl: "wss://www.black-sakura.com:8000",
            // headGrp: [],
            // mediaUrl: "wss://www.black-sakura.com:8888",
            // playId: dataMgr.accMo.getData().aid,
            // roomId: "10978",
            // sign: "73BE71D3B7FEEF76C765D9ED59B3F579"
            // });
            // self.addChild(chat);
            if (self.skGameRecord) {
                self.skGameRecord.setTarget(function () {
                    TRain.soundMgr.playSFX("click" /* click */);
                    game.gameScene.openPopup(new game.GameAllRecord());
                }, self);
            }
            if (self.skRebate) {
                self.skRebate.setTarget(function () {
                    TRain.soundMgr.playSFX("click" /* click */);
                    game.gameScene.openPopup(new game.RebateView());
                }, self);
            }
            if (self.skBack)
                self.skBack.visible = false;
            if (self.skMoneybag) {
                self.skMoneybag.visible = CONF.apiWalletType == "1";
                self.skMoneybag.sound = "click" /* click */;
                self.skMoneybag.setTarget(function () {
                    game.gameScene.openPopup(new game.PseudoWallet());
                }, self);
            }
            // notifiCenter.addListener(UIEvent.LOAD_ICON,self.showLoadBg,self);
            if (accMo.isApi && self.skTopGrp) {
                self.skTopGrp.visible = false;
                self.skTopBTn.visible = false;
                self.changeScreenImg();
                self.skWindow.visible = game.GameUtil.os != 1 /* iOS */;
                if (game.GameUtil.os == 1 /* iOS */) {
                    self.skGameRecord.x = self.skBSet.x;
                    self.skBSet.x = self.skWindow.x;
                }
                self.skWindow.setTarget(function () {
                    TRain.soundMgr.playSFX("click" /* click */);
                    if (!self.isFullscreenEnabled()) {
                        game.MsgBox.showTipBox(false, 1016 /* notSupportFull */, "mainLang" /* mainLang */);
                        return;
                    }
                    if (self.checkScreen()) {
                        self.exitScreen();
                    }
                    else {
                        self.fullScreen();
                    }
                }, self);
                //事件监听：
                document.addEventListener("fullscreenchange", function () {
                    self.changeScreenImg();
                }, false);
                document.addEventListener("mozfullscreenchange", function () {
                    self.changeScreenImg();
                }, false);
                document.addEventListener("webkitfullscreenchange", function () {
                    self.changeScreenImg();
                }, false);
                document.addEventListener("msfullscreenchange", function () {
                    self.changeScreenImg();
                }, false);
                document.addEventListener("keydown", function (evt) {
                    if (evt.keyCode == 122) {
                        evt.preventDefault(); //阻止F11默认动作
                        if (!self.isFullscreenEnabled()) {
                            game.MsgBox.showTipBox(false, 1016 /* notSupportFull */, "mainLang" /* mainLang */);
                            return;
                        }
                        if (self.checkScreen()) {
                            self.exitScreen();
                        }
                        else {
                            self.fullScreen();
                        }
                    }
                });
            }
        };
        HomeView.prototype.onResize = function (w, h) {
            var self = this;
            if (self.skKfBtn) {
                self.setHlhResize(w);
            }
        };
        /**
         *
         * @param w
         * hlh动态修改位置
         */
        HomeView.prototype.setHlhResize = function (w) {
            var self = this;
            var hlhGrp = self.skHlhGrp;
            if (w > 1500) {
                self.skHlhGame.width = hlhGrp.width = 1500;
                hlhGrp.hCenter = 15;
            }
            else {
                self.skHlhGame.width = hlhGrp.width = 750;
                hlhGrp.hCenter = 0;
            }
            if (w > 1120) {
                self.skHlhScr.width = 1120;
            }
            else if (w > 750) {
                self.skHlhScr.width = w;
            }
        };
        HomeView.prototype.clickBtn = function (itemTile) {
            URLUtil.outLayOpenUrl(CONF.hlhUrl);
        };
        HomeView.prototype.openDetail = function () {
            var roomRdInnerView = new game.RoomRdInnerView();
            game.gameScene.openPopup(roomRdInnerView);
            roomRdInnerView.setData(game.dataMgr.guildMo.detailData);
        };
        //改变下方按钮位置 api类游戏
        HomeView.prototype.showApiBtn = function () {
            var self = this;
            var accMo = game.dataMgr.accMo;
            var generalMo = game.dataMgr.generalMo;
            var isApi = accMo.isApi;
            if (isApi) {
                var isLookSafeBox = generalMo.isFunOpen(8 /* safeBox */);
                var isLookEarnings = generalMo.isFunOpen(6 /* earnings */);
                if (self.skSafeBox)
                    self.skSafeBox.visible = isLookSafeBox;
                if (self.skProfit)
                    self.skProfit.visible = isLookEarnings;
                if (!isLookEarnings) {
                    if (!isLookSafeBox) {
                        if (self.skProfit) {
                            self.skBSet.right = self.skProfit.right;
                        }
                    }
                    else {
                        if (self.skProfit && self.skSafeBox) {
                            self.skBSet.right = self.skSafeBox.right;
                            self.skSafeBox.right = self.skProfit.right;
                        }
                    }
                }
                else {
                    if (!isLookSafeBox) {
                        if (self.skSafeBox) {
                            self.skBSet.right = self.skSafeBox.right;
                        }
                    }
                }
                if (self.skStore)
                    self.skStore.visible = self.skAdd.visible = generalMo.isFunOpen(7 /* shop */);
                if (self.skService)
                    self.skService.visible = generalMo.isFunOpen(9 /* kefu */);
                if (self.skActGrp) {
                    self.skActGrp.visible = generalMo.isFunOpen(10 /* activity */);
                }
                if (self.skNotice)
                    self.skNotice.visible = generalMo.isFunOpen(10 /* activity */);
                if (self.skExtension)
                    self.skExtension.visible = false;
                var isLookSDay = generalMo.isFunOpen(5 /* sevenDay */);
                if (self.skTask)
                    self.skTask.visible = self.skReward.visible = isLookSDay;
                if (self.skImgDone)
                    self.skImgDone.visible = isLookSDay;
            }
        };
        // private roomCardClick(btn:cui.SimpleButton){
        // 	let tag = btn.tag;
        // 	if(tag == RoomCardTp.create_room){
        // 		gameScene.openPopup(new CreateRoomView(roomCardType.ert_points));
        // 	}else if(tag == RoomCardTp.join_room){
        // 		gameScene.openPopup(new JoinRoomView());
        // 	}else{
        // 		//亲友圈
        // 		//根据是否有工会id判断是否加入工会
        // 		let accData = dataMgr.accMo.getData();
        // 		if(accData.guild_id <= 0){
        // 			gameScene.openPopup(new FriendCirclePop());
        // 		}else{
        // 			//打开亲友圈
        // 			let guildData = dataMgr.guildMo.getGuildData();
        // 			if(guildData.guild_id){
        // 				gameScene.showHallUI(UITag.friendHome);
        // 			}
        // 		}
        // 	}
        // }
        HomeView.prototype.updateBar = function () {
            var self = this;
            var hasBtnNum = self.getDefaultBtns(10 /* wallet */);
            self.skBgBar.visible = self.skHeadBarGrp.visible = hasBtnNum > 3;
            var headOpen = self._headBtnOpen;
            //获取当前有多少个按钮显示
            if (headOpen && hasBtnNum >= 3) {
                self.upHeadBarPoint(hasBtnNum);
                for (var i = 0; i < hasBtnNum; i++) {
                    var curBtn = self._lookBtnGrp[i];
                    curBtn.visible = true;
                }
            }
            else {
                if (hasBtnNum >= 3) {
                    self.upHeadBarPoint(3);
                }
                else {
                    self.upHeadBarPoint(hasBtnNum);
                }
                for (var i = 3; i < hasBtnNum; i++) {
                    var curBtn = self._lookBtnGrp[i];
                    curBtn.visible = false;
                }
            }
        };
        HomeView.prototype.upHeadBarPoint = function (lookNum) {
            var self = this;
            var thumbWidth = self.skBgBar.width;
            var curBtn = self._lookBtnGrp[0];
            var width = curBtn.width;
            var clipWidth = (lookNum * width) + width / 8;
            if (clipWidth > thumbWidth)
                clipWidth = thumbWidth;
            var value = clipWidth / thumbWidth;
            self.skHeadBarGrp.right = clipWidth;
            self.skBgBar.setProgressValue(value, 1000);
        };
        HomeView.prototype.activityMoClick = function () {
            var gameMo = game.dataMgr.gameMo;
            var actMo = gameMo.getCurMoInfo("activity" /* activity */);
            if (actMo && actMo.state != 0 /* NONE */) {
                actMo.loadNum = 0;
                actMo.isBtn = true;
                gameMo.loadModule(actMo.nm);
                game.BusyLayer.getInst().showBusy();
            }
        };
        HomeView.prototype.rechargeMoClick = function () {
            var gameMo = game.dataMgr.gameMo;
            var rechargeMo = gameMo.getCurMoInfo("recharge" /* recharge */);
            if (rechargeMo && rechargeMo.state != 0 /* NONE */) {
                rechargeMo.loadNum = 0;
                rechargeMo.isBtn = true;
                gameMo.loadModule(rechargeMo.nm);
                game.BusyLayer.getInst().showBusy();
            }
        };
        HomeView.prototype.updateIcon = function () {
            var gameid = game.dataMgr.accMo.gameId;
            if (isNaN(gameid) || gameid == 0) {
                this.openFunPop(true);
            }
        };
        HomeView.prototype.initOnline = function () {
            var self = this;
            var actData = game.dataMgr.actMo.getData().onlineAwd;
            if (actData && actData.uId != -1 && self.skOnlineReward) {
                //获取服务器时间戳 
                var svrTm = actData.svrTm;
                var curTm = TimeUtil.getSvrSec();
                //获取这次开奖的总时间
                var totalTm = actData.totalTm;
                self._onlineTm = totalTm == 0 ? 0 : totalTm - (curTm - svrTm);
                self.skOnlineReward.visible = true;
                self.updateOnlineTm();
                self.updateBtn();
            }
        };
        HomeView.prototype.updateOnlineTm = function () {
            var self = this;
            var actData = game.dataMgr.actMo.getData().onlineAwd;
            var isOpen = actData && actData.uId != -1;
            if (isOpen && self._onlineTm >= 0 && self.skOnlineReward) {
                self._onlineTm--;
                var onlineLab = self.skOnlineReward.getChildAt(1);
                var onlineMovie = self.skOnlineReward.getChildAt(0);
                var isNotAwd = self._onlineTm > 0;
                onlineLab.visible = isNotAwd;
                onlineMovie.aniName = isNotAwd ? "hall_onlineReward2" : "hall_onlineReward1";
                if (isNotAwd) {
                    onlineLab.text = self.formatOnlineTm(self._onlineTm);
                }
                else {
                    if (game.dataMgr.accMo.gameId > 0) {
                        if (self._tmTag) {
                            TRain.core.rmvFrameDoById(self._tmTag);
                            self._tmTag = 0;
                        }
                    }
                }
            }
        };
        HomeView.prototype.updateTm = function () {
            var self = this;
            self.updateOnlineTm();
            var repairConfs = game.dataMgr.generalMo.getRepairConfs();
            var len = repairConfs.length;
            if (len > 1) {
                self._xfTm--;
                if (self._xfTm == 0) {
                    self.autoChangeIdx();
                }
            }
            // self._bubbleTm++;
            // if (self._isCanTime) {
            // 	self._bubbleCloseTm++;
            // }
            // if (self._bubbleCloseTm >= 5) {
            // 	self.frameFunClose();
            // }
            // if (self._bubbleTm - 2 > 0 && self._bubbleTm % 30 == 0) {
            // 	self.frameFunOpen();
            // 	self._bubbleTm = 2;
            // }
            self._newTileTag++;
            if (game.dataMgr.accMo.isApi && self._newTileTag % 3 == 0) {
                self.showNewTile();
            }
            self._onLineNumTm++;
            if (game.dataMgr.accMo.isApi && self._onLineNumTm >= 120) {
                self.randomOnline();
            }
        };
        HomeView.prototype.updateBtn = function () {
            var self = this;
            var accMo = game.dataMgr.accMo;
            if (accMo.isApi)
                return;
            var accData = accMo.getData();
            var actData = game.dataMgr.actMo.getData().onlineAwd;
            if (self.skOnlineReward)
                self.skOnlineReward.visible = !!actData && actData.uId != -1;
            var isOpenExt = (accData.flag_agent_status & 1) == 1;
            if (self.skExtension)
                self.skExtension.visible = isOpenExt && !accMo.isApi;
            if (self.skRebate)
                self.skRebate.visible = accData.rebate_open;
            var generalMo = game.dataMgr.generalMo;
            for (var i = 1 /* sevenDayReward */; i <= 10 /* wallet */; i++) {
                var conf = generalMo.getDynamicConf(i);
                //获取当前按钮
                var curBtn = self[conf.nm];
                if (!curBtn) {
                    continue;
                }
                var width = curBtn.width;
                var beforeIdx = (self.getDefaultBtns(i) - 1);
                curBtn.right = 10 + (width * beforeIdx);
            }
            if (self.skBgBar) {
                self.updateBar();
            }
        };
        //获取当前idx之前有多少显示的
        // private getBeforeIdx(idx:number):number{
        // 	let self = this;
        // 	let generalMo = dataMgr.generalMo;
        // 	let beforeNum:number = -1;
        // 	for (let i= confConsts.dynamicBtnTp.sevenDayReward; i<= idx;i++) {
        // 		let conf = generalMo.getDynamicConf(i);
        // 		//获取当前按钮
        // 		let curBtn = self[conf.nm] as cui.ScaleButton;
        // 		if(curBtn.visible){
        // 			beforeNum ++;
        // 		}
        // 	}
        // 	return beforeNum;
        // }
        HomeView.prototype.getDefaultBtns = function (idx) {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            var accData = game.dataMgr.accMo.getData();
            var sevenDay_Done = accData.sevenday_done;
            self._lookBtnGrp = [];
            var isLookSDay = game.dataMgr.generalMo.isFunOpen(5 /* sevenDay */); //是否开放七日奖励
            for (var i = 1 /* sevenDayReward */; i <= idx; i++) {
                var conf = generalMo.getDynamicConf(i);
                //获取当前按钮
                var curBtn = self[conf.nm];
                if (i == 3 /* extension */) {
                    var isOpenExt = (accData.flag_agent_status & 1) == 1;
                    if (isOpenExt && !game.dataMgr.accMo.isApi) {
                        self._lookBtnGrp.push(curBtn);
                    }
                }
                else if (i == 4 /* activity */) {
                    self._lookBtnGrp.push(curBtn);
                }
                else if (i == 6 /* bindAcc */) {
                    if (self._bindFlag) {
                        self._lookBtnGrp.push(curBtn);
                    }
                }
                else if (i == 7 /* onlineReward */) {
                    var actData = game.dataMgr.actMo.getData().onlineAwd;
                    if (!!actData && actData.uId != -1) {
                        self._lookBtnGrp.push(curBtn);
                    }
                }
                else if (i == 9 /* relief */) {
                    var isFromal = accData.isFormal;
                    if (isFromal) {
                        self._lookBtnGrp.push(curBtn);
                    }
                }
                else if (i == 1 /* sevenDayReward */) {
                    if (!sevenDay_Done && game.dataMgr.gameMo.getData().length > 7 && isLookSDay) {
                        self._lookBtnGrp.push(curBtn);
                    }
                }
                else if (i == 2 /* limitReward */) {
                    if (!!sevenDay_Done && game.dataMgr.gameMo.getData().length > 7 && isLookSDay) {
                        self._lookBtnGrp.push(curBtn);
                    }
                }
                else if (i == 8 /* rebate */) {
                    if (game.dataMgr.accMo.getData().rebate_open) {
                        self._lookBtnGrp.push(curBtn);
                    }
                }
                else if (i == 10 /* wallet */) {
                    var isOpen = game.dataMgr.generalMo.isFunOpen(12 /* wallet */);
                    if (isOpen) {
                        self._lookBtnGrp.push(curBtn);
                    }
                }
                else {
                    self._lookBtnGrp.push(curBtn);
                }
            }
            return self._lookBtnGrp.length;
        };
        HomeView.prototype.formatOnlineTm = function (Tm) {
            var min;
            var sec;
            min = Tm >= 60 ? String(Math.floor(Tm / 60)) : "00";
            var secTm = Tm - Math.floor(Tm / 60) * 60;
            sec = secTm >= 10 ? String(secTm) : "0" + secTm;
            return min + ":" + sec;
        };
        HomeView.prototype.playReward = function (isNotEvt) {
            var self = this;
            var accMo = game.dataMgr.accMo;
            if (!self._isHaveGuide) {
                var bindReward = accMo.getBindReward();
                if (bindReward > 0) {
                    if (!isNotEvt)
                        accMo.addVal("gold", bindReward);
                    game.gameScene.openPopup(new game.GetReward(bindReward), null, true);
                }
            }
            game.dataMgr.generalMo.rmvListener("guide" /* NewGuide */, self);
        };
        //初始修复页
        HomeView.prototype.initRepair = function () {
            var self = this;
            var list = self.skXfList;
            if (list) {
                list.itemRender = XfyItem;
                var dataPro = list.dataProvider = new cui.ArrayCollection();
                var repairConfs = game.dataMgr.generalMo.getRepairConfs();
                var i = 0, len = repairConfs.length;
                var xfBtnGrp = self.skXfBtnGrp;
                xfBtnGrp.visible = len > 1;
                var showArr = [];
                for (; i < len; i++) {
                    var repairConf = repairConfs[i];
                    if (repairConf.id == 0) {
                        var accData = game.dataMgr.accMo.getData();
                        var isOpenExt = (accData.flag_agent_status & 1) == 1;
                        if (!isOpenExt) {
                            continue;
                        }
                    }
                    var img = new cui.MenuItemImage();
                    img.skinName = "xfyMenuItemSKin";
                    img.tag = i;
                    img.x = i * 34;
                    xfBtnGrp.addChild(img);
                    showArr.push(self.formatXfyInfo(repairConf, i));
                }
                xfBtnGrp.visible = xfBtnGrp.numChildren > 1;
                xfBtnGrp.width = 24 * len + 10 * (len - 1);
                dataPro.source = showArr;
                self._xfyIdx = self.skXfBtnGrp.selectTag = 0;
            }
        };
        HomeView.prototype.autoChangeIdx = function () {
            var self = this;
            var repairConfs = game.dataMgr.generalMo.getRepairConfs();
            if (repairConfs.length > 1) {
                self._xfyIdx++;
                if (self._xfyIdx > repairConfs.length - 1)
                    self._xfyIdx = 0;
                self.skXfBtnGrp.selectTag = self._xfyIdx;
                self.skXfScrll.showTableInViewStart(self._xfyIdx, true);
            }
        };
        HomeView.prototype.formatXfyInfo = function (repairConf, id) {
            var self = this;
            var showData = {
                handle: self,
                id: id,
                imgSrc: repairConf.charImg,
                btnSrc: repairConf.btnImg,
            };
            return showData;
        };
        HomeView.prototype.xfBtnClick = function (item) {
            var self = this;
            var data = item.data;
            if (data.id == 0) {
                game.gameScene.showHallUI(5 /* extension */);
            }
            else {
                //打开修复页
                var url = CONF.erweima + "index_fix_app.html?c=" + CONF.channelId;
                URLUtil.outLayOpenUrl(url);
            }
        };
        HomeView.prototype.setScOffX = function () {
            var self = this;
            var scOffx = CONF.scOffx;
            if (!self.skKfBtn) {
                self.skLeftGrp.left += scOffx;
                self.skJingle.left += scOffx;
                self.skAgent.left += scOffx;
                self.skLeft.left += scOffx;
                self.skRight.right += scOffx;
                self.skGameSc.left += scOffx;
                self.skXfyGrp.left += scOffx;
                var classGrp = self.skClassGroup;
                if (classGrp.x > 100) {
                    classGrp.right += scOffx;
                }
                else {
                    var classLeft = classGrp.left;
                    if (classLeft >= 0) {
                        classGrp.left += scOffx;
                    }
                    else {
                        classGrp.x += scOffx;
                    }
                }
                if (classGrp.y < self.skBtnGroup.height) {
                    self.skBtnGroup.right += scOffx;
                }
                if (self.skKfAllGrp) {
                    self.skKfAllGrp.x += scOffx;
                }
            }
        };
        HomeView.prototype.clickTile = function (item) {
            var self = this;
            TRain.soundMgr.playSFX("click" /* click */);
            var itemData = item.data;
            var id = itemData.tag;
            var gameMo = game.dataMgr.gameMo;
            //根据id 获取当前状态
            var curGameData = gameMo.getGameData(id);
            var updateData = curGameData.update;
            if (updateData.state == 0 /* NONE */) {
                var timers = egret.getTimer();
                if (timers - 2000 /* CLICK_INTERVALTM */ > self._clickTm) {
                    if (curGameData.conf.isFakeIcon) {
                        game.MsgBox.showTipBox(false, 805 /* vipExpWaitTip */, "mainLang" /* mainLang */);
                    }
                    else if (id == 211 /* roomgm */) {
                        game.gameScene.showHallUI(12 /* roomCardHome */);
                    }
                    else {
                        game.GameUtil.enterCurGame(id);
                    }
                    self._clickTm = timers;
                }
            }
            else if (updateData.state == 2 /* UPDATING */ || updateData.progress) {
                self._clickGmIds.push(id);
                // 	gameMo.stopUpdateGmd(id);
                // 	itemData.upState = { state: curGameData.state, proBar: curGameData.progress };
                // 	self.skGames.dataProvider.itemUpdated(itemData);	
            }
            else {
                //下载失败等于重新下载
                gameMo.startUpdateGmd(id);
                // MsgBox.showPrintfTxt(LangGrp.mainLang, langConsts.mainLang.gameAddQueue, undefined, curGameData.conf.nm);
                self._clickGmIds.push(id);
                var txt = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 845 /* gameAddQueue */), curGameData.conf.nm);
                game.MsgBox.showTipBox(false, 845 /* gameAddQueue */, "mainLang" /* mainLang */, txt);
                itemData.upState = { state: updateData.state, proBar: updateData.progress };
                self.skGames.dataProvider.itemUpdated(itemData);
            }
        };
        HomeView.prototype.showRed = function () {
            var self = this;
            if (self.skRedpoint)
                self.skRedpoint.visible = !game.dataMgr.accMo.isApi && self.isShowRedPoint();
        };
        HomeView.prototype.isShowRedPoint = function () {
            var issshow = false;
            var mailList = game.dataMgr.mailMo.list;
            for (var i = 0; i < mailList.length; i++) {
                if (mailList[i].read == 0) {
                    issshow = true;
                }
            }
            return issshow;
        };
        HomeView.prototype.setRedPoint = function (num) {
            this._redPointNum = num;
        };
        HomeView.prototype.showNoticeNum = function () {
            var self = this;
            if (!game.dataMgr.accMo.isApi && self.skNoticeGrp) {
                var noticeNum = game.dataMgr.accMo.getNoReadNum() + self._redPointNum;
                var inGrp = self.skNoticeGrp;
                inGrp.visible = noticeNum > 0;
                if (self._changeNotice) {
                    self.skNoticeMvp.aniName = noticeNum > 0 ? self._changeNotice : self._oldNotice;
                }
                inGrp.getChildAt(1).text = String(noticeNum);
            }
        };
        HomeView.prototype.noticeGrpAni = function () {
            var self = this;
            var action = new TRain.ActionPropTween(2000, 1, { vCenter: { b: 0, r: -5 } });
            action.setEaseFun(game.UIUtils.sin);
            self._actIconLoop = new TRain.ActionLoop(action);
        };
        HomeView.prototype.updateSevenDayBtn = function () {
            var self = this;
            var accMo = game.dataMgr.accMo;
            var sevenDay_Done = accMo.getData().sevenday_done;
            var isOpen = game.dataMgr.gameMo.getData().length > 7;
            var isLookSDay = game.dataMgr.generalMo.isFunOpen(5 /* sevenDay */); //是否开放七日奖励
            self.skTask.visible = (!!sevenDay_Done && isOpen && isLookSDay) ? true : false;
            self.skReward.visible = (!sevenDay_Done && isOpen && isLookSDay) ? true : false;
            //弹出系统解锁
            if (!!sevenDay_Done && game.dataMgr.accMo.gameId == 0 && isOpen) {
                var view = new game.LimitRwOpen();
                game.gameScene.openPopup(view);
            }
        };
        HomeView.prototype.setBindOrSave = function () {
            var self = this;
            if (!game.dataMgr.accMo.isApi) {
                // self.skBinding.visible = dataMgr.accMo.getData().isFormal ? false : true;
                if (self.skRelief)
                    self.skRelief.visible = game.dataMgr.accMo.getData().isFormal ? true : false;
                // self.initIcon();
                self.updateBtn();
            }
        };
        HomeView.prototype.menuClick = function (item) {
            var self = this;
            TRain.soundMgr.playSFX("click" /* click */);
            var tag = item.tag;
            self.showGameClass(tag);
            // let index = self.getChildIndex(self.skLeft);
            // if (index > 0) self.removeChild(self.skLeft);
        };
        HomeView.prototype.bindGift = function () {
            var self = this;
            TRain.soundMgr.playSFX("click" /* click */);
            var view = game.dataMgr.accMo.getData().isFormal ? new game.SaveMoneyDialog() : new game.BindGiftDialog();
            game.gameScene.openPopup(view);
            if (self._soundNum[0] || self._soundNum[1] || self._soundNum[2]) {
                TRain.soundMgr.stopSFX(self._soundNum[0]);
                TRain.soundMgr.stopSFX(self._soundNum[1]);
                TRain.soundMgr.stopSFX(self._soundNum[2]);
            }
            self._soundNum[3] = TRain.soundMgr.playSFX("bangdingyouli" /* bangdingyouli */);
        };
        //打开绑定界面
        HomeView.prototype.openBind = function () {
            var view = new game.BindGiftDialog();
            game.gameScene.openPopup(view);
        };
        HomeView.prototype.setNotifyParent = function (p, maskWidth) {
            this._notifyUI.setParent(p || this.skNotify, maskWidth);
        };
        //移除时 使用
        HomeView.prototype.rmvNotifyParent = function (p) {
            this._notifyUI.rmvParent(p);
        };
        // private frameFunClose() {
        // 	let self = this;
        // 	if (self.skRoleTalk.visible && !dataMgr.accMo.isApi) {
        // 		self._isCanTime = false;
        // 		self._bubbleCloseTm = 0;
        // 		self.outOrIn(false, function () {
        // 			self.skGrp.visible = false;
        // 		});
        // 	}
        // }
        // private frameFunOpen() {
        // 	let self = this;
        // 	if (self.skRoleTalk.visible && !dataMgr.accMo.isApi) {
        // 		self._isCanTime = true;
        // 		self.skGrp.visible = true;
        // 		self.randomTxt();
        // 		self.outOrIn(true);
        // 	}
        // 	// TRain.core.addDelayDo(self.frameFunClose, self, 5000);
        // }
        HomeView.prototype.onShow = function (stage) {
            _super.prototype.onShow.call(this, stage);
            var self = this;
            // self.updateTopIcon();
            self.updateBtn();
            if (self.skGrp) {
                self.skGrp.scaleX = self.skGrp.scaleY = 0;
                self.skGrp.visible = false;
            }
            self._tempGameId = TRain.actionMgr.getUnitTag();
            // TRain.core.addDelayDo(function () {
            // 	self.frameFunOpen();
            // }, self, 2000, self._tempGameId);
            if (self._tmTag == 0 && !self.skKfBtn) {
                self._tmTag = TRain.core.addFrameDo(self.updateTm, self, false, 1000);
            }
            // TRain.core.addFrameDo(self.randomTxt, self, true, 5000);
            game.dataMgr.soundMo.playMusic();
            var gameModel = game.dataMgr.gameMo;
            var accMo = game.dataMgr.accMo;
            var lastGmId = accMo.lastId;
            if (!lastGmId) {
                var curSvrList = game.dataMgr.gameMo.getData();
                curSvrList.sort(function (a, b) {
                    if (a.sort == b.sort) {
                        return a.gameid - b.gameid;
                    }
                    else {
                        return a.sort - b.sort;
                    }
                });
                var gameData = curSvrList[0];
                lastGmId = gameData.gameid;
                if (self.skLast)
                    self.skLast.source = "hall_" /* hallNm */ + "hall@txt_popular";
                if (self.skGameName)
                    self.skGameName.text = gameData.conf.nm;
            }
            else {
                var gameConf = gameModel.getGmdConf(lastGmId);
                var name_2;
                if (gameConf.isFriendGm) {
                    name_2 = TRain.langMgr.getTxt("mainLang" /* mainLang */, 982 /* friendCircleNm */);
                }
                else {
                    name_2 = game.DataFormat.formatName(gameConf.nm, 12, 8);
                }
                if (self.skGameName)
                    self.skGameName.text = name_2;
                if (self.skLast)
                    self.skLast.source = "hall_" /* hallNm */ + "hall@txt_lastPlay";
            }
            if (self.skLastGmBtn)
                self.skLastGmBtn.setTarget(function () {
                    TRain.soundMgr.playSFX("click" /* click */);
                    if (accMo.isApi && accMo.lastId) {
                        game.gameScene.openPopup(new game.LastGameView());
                    }
                    else {
                        var timers = egret.getTimer();
                        if (timers - 2000 /* CLICK_INTERVALTM */ > self._clickTm) {
                            TRain.soundMgr.playSFX("click" /* click */);
                            //获取lastGame配置
                            var lastGameConf = gameModel.getGmdConf(lastGmId);
                            var isHasConf = lastGameConf.class2.indexOf(7 /* create_room */) != -1;
                            if (isHasConf) {
                                if (lastGameConf.isFriendGm) {
                                    //亲友圈
                                    //根据是否有工会id判断是否加入工会
                                    var accData = game.dataMgr.accMo.getData();
                                    if (accData.guild_id <= 0) {
                                        game.gameScene.openPopup(new game.FriendCirclePop());
                                    }
                                    else {
                                        //打开亲友圈
                                        var guildData = game.dataMgr.guildMo.getGuildData();
                                        if (guildData.guild_id) {
                                            game.gameScene.showHallUI(11 /* friendHome */);
                                        }
                                    }
                                }
                                else {
                                    game.gameScene.showHallUI(12 /* roomCardHome */);
                                }
                            }
                            else {
                                game.GameUtil.enterCurGame(lastGmId);
                            }
                            self._clickTm = timers;
                        }
                    }
                }, self);
            //如果女生图片是显示的才需要去上下抖动
            if (self._isFlashGirl) {
                TRain.actionMgr.addAction(self._actionLoop, self.skGirlImg, false);
            }
            if (self.skNoticeGrp)
                TRain.actionMgr.addAction(self._actIconLoop, self.skNoticeGrp, false);
            TRain.core.stage.addEventListener(egret.TouchEvent.TOUCH_END, self.showArrow, self);
            TRain.core.stage.addEventListener(egret.TouchEvent.TOUCH_BEGIN, self.showClick, self);
            //api入场动画
            if (game.dataMgr.accMo.isApi) {
                self.apiEnterActionAll();
            }
        };
        HomeView.prototype.showNewTile = function () {
            var self = this;
            for (var i = 0; i < 2; i++) {
                var skNewGame = self['skNewGame' + i];
                if (skNewGame) {
                    var skNewTile = self['skNewTitle' + i];
                    skNewTile.alpha = 1;
                    var actionProp = new TRain.ActionPropTo(1000, 1, { alpha: 0.2 });
                    actionProp.setEaseFun(EaseUtil.quadOut);
                    var actionProp1 = new TRain.ActionPropTo(1000, 1, { alpha: 1 });
                    actionProp1.setEaseFun(EaseUtil.quadIn);
                    var actionProp2 = new TRain.ActionDo(1000);
                    var actionSeq = new TRain.ActionSequence([actionProp, actionProp1, actionProp2]);
                    TRain.actionMgr.addAction(actionSeq, skNewTile, false);
                }
            }
        };
        HomeView.prototype.apiEnterActionAll = function () {
            var self = this;
            if (self.skDelay) {
                var delay = 100;
                var actTm = 500;
                self.skDelay.setNetDelay(game.dataMgr.networkDelay, true);
                self.randomOnline();
                self.apiEnterAction(self.skTopGrp, false, false, actTm, delay);
                // self.apiEnterAction(self.skBottomGrp, false, true, actTm + delay);
                self.enterActionBottom(self.skJingle, actTm, delay, true);
                self.enterActionBottom(self.skBottomBg, actTm, delay);
                self.apiEnterAction(self.skClassGroup, true, false, actTm, delay);
                self.apiEnterAction(self.skTopBTn, false, false, actTm, 500 + delay);
                if (!!CONF.homeUrl)
                    self.apiEnterAction(self.skBack, false, false, actTm, 500 + delay);
                if (self.skMoneybag.visible)
                    self.apiEnterAction(self.skMoneybag, false, false, actTm, 500 + delay);
                var moveY = self.skBomGrp.vCenter;
                self.skBomGrp.vCenter += self.skBomGrp.height;
                game.UIUtils.enterActionCom(self.skBomGrp, moveY, self.skBomGrp.hCenter, 500, 500 + delay, true);
                if (self.skGameImg && self.skGameImg.visible) {
                    var newY = self.skGameImg.vCenter;
                    self.skGameImg.vCenter += (self.skGameImg.height + 10);
                    game.UIUtils.enterActionCom(self.skGameImg, newY, self.skGameImg.hCenter, 500, 500 + delay, true);
                }
                if (self.skNewGameGrp) {
                    var grp = self.skNewGameGrp;
                    for (var i = 0; i < grp.numChildren; i++) {
                        var gameDb = grp.getChildAt(i);
                        if (gameDb) {
                            var y = gameDb.y;
                            gameDb.y += grp.height; //UIDBAni 没有高度所以加上父容器高度
                            game.UIUtils.enterActionCom(gameDb, gameDb.x, y, actTm, 800 + i * 100 + delay);
                        }
                    }
                }
                self.skGaNameGrp.mask = new egret.Rectangle(0, 0, self.skGaNameGrp.width, self.skGaNameGrp.height);
                self.apiEnterAction(self.skGameName, false, false, actTm, 500 + delay);
                self.skClassGrp.mask = new egret.Rectangle(0, 0, self.skClassGrp.width, self.skClassGrp.height);
                for (var i = 0; i < self.skClassGrp.numChildren; i++) {
                    var menuGrp = self.skClassGrp.getChildAt(i);
                    if (menuGrp) {
                        self.apiEnterAction(menuGrp, true, false, actTm, 550 + i * 100 + delay);
                    }
                }
                self.skGameSc.mask = new egret.Rectangle(0, 0, self.skGameSc.width, self.skGameSc.height);
                var sclX = self.skGames.x;
                self.skGames.x += (self.skGames.x + self.skGameSc.width);
                game.UIUtils.enterActionCom(self.skGames, sclX, self.skGames.y, 1000, 650 + delay, false, function () {
                    self.skGameSc.mask = null;
                });
                //数字滚动
                var accData = game.dataMgr.accMo.getData();
                if (self._isFristEnter) {
                    self.apiEnterGold();
                    self._isFristEnter = false;
                    if (self.skMoneybag.visible && CONF.balanceGold == 0) {
                        self._balanceDeyTag = TRain.core.addDelayDo(function () {
                            game.gameScene.openPopup(new game.PseudoWallet());
                        }, self, 1600);
                    }
                }
                game.UIUtils.showRollGold1(accData.aid, self.skId, self, 300, delay, "ID:");
                game.UIUtils.showRollGold1(self.getMinutePre(self.getOnlineNumber(true)), self.skPeople, self, 300, 400 + delay, "", TRain.langMgr.getTxt("mainLang" /* mainLang */, 1014 /* onlineLab */));
            }
            else {
                if (self.skBack)
                    self.skBack.visible = !!CONF.homeUrl;
            }
        };
        HomeView.prototype.apiEnterGold = function () {
            var self = this;
            var accData = game.dataMgr.accMo.getData();
            var gold = game.DataFormat.convertYuanString2(accData.gold, false);
            var goldArr = gold.match(/[a-z]/ig);
            var str = "";
            for (var key in goldArr) {
                str += goldArr[key];
            }
            game.UIUtils.showRollGold1(parseFloat(gold), self.skGold, self, 300, 100, "", str);
        };
        HomeView.prototype.onHide = function () {
            _super.prototype.onHide.call(this);
            var self = this;
            if (!isNaN(self._tempGameId)) {
                TRain.actionMgr.rmvActsByTag(self._tempGameId);
                TRain.core.rmvDelayDoByFlag(self._tempGameId);
                self._tempGameId = undefined;
                // self._bubbleTm = self._bubbleCloseTm = 0;
                self._isCanTime = false;
            }
            if (self._tmTag && self._onlineTm <= 0) {
                TRain.core.rmvFrameDoById(self._tmTag);
                self._tmTag = 0;
                self._onLineNumTm = 0;
            }
            if (self._balanceDeyTag) {
                TRain.core.rmvDelayDoByID(self._balanceDeyTag);
                self._balanceDeyTag = 0;
            }
            // if(self._delayTm){
            // 	TRain.core.rmvFrameDoById(self._delayTm);
            // 	self._delayTm = 0;
            // }
            // TRain.core.rmvFrameDo(self, self.randomTxt);
            if (self._isFlashGirl) {
                self._actionLoop.stop();
            }
            self._actIconLoop.stop();
            TRain.core.stage.removeEventListener(egret.TouchEvent.TOUCH_END, self.showArrow, self);
        };
        HomeView.prototype.flipGirlGrp = function () {
            var self = this;
            var action = new TRain.ActionPropTween(3000, 1, { vCenter: { b: 60, r: -10 } });
            action.setEaseFun(game.UIUtils.sin);
            var actionLoop = self._actionLoop = new TRain.ActionLoop(action);
        };
        HomeView.prototype.updateHead = function () {
            var self = this;
            var accModel = game.dataMgr.accMo;
            var accData = accModel.getData();
            //获取当前头像
            if (self.skHeadImg)
                self.skHeadImg.source = game.DataFormat.getHeadIcon(accData.icon_custom);
            if (self.skHeadFrame)
                self.skHeadFrame.source = game.dataMgr.accMo.isApi ? "apiHead@new" /* headframeApi */ : "head@new" /* headframe */ + accData.viplvl;
            if (self.skName)
                self.skName.text = game.DataFormat.formatName(accData.nickname, 12, 12);
            //当前玩家id
            if (self.skId)
                self.skId.text = "ID:" + accData.aid;
            if (self.skGold)
                self.skGold.text = String(game.DataFormat.convertYuanString2(accData.gold, false));
        };
        HomeView.prototype.updateGold = function () {
            var self = this;
            var accMo = game.dataMgr.accMo;
            var accData = accMo.getData();
            if (self.skGold)
                self.skGold.text = game.DataFormat.convertYuanString2(accData.gold, false);
            if (accMo.isApi) {
                self.apiEnterGold();
            }
        };
        //美女说话框弹出和收回动画
        HomeView.prototype.outOrIn = function (isOut, cb) {
            var self = this;
            var duration = 200;
            var temp = isOut ? 1 : 0;
            game.UIUtils.move(self.skGrp, { scaleX: temp, scaleY: temp }, EaseUtil.quadOut, duration, undefined, cb, self._tempGameId);
        };
        // public _flag:number;
        //随机显示美女讲的话
        HomeView.prototype.randomTxt = function () {
            var self = this;
            var temp = game.dataMgr.generalMo.tipConf;
            var len = temp.length;
            var num = Math.floor(Math.random() * len);
            self.skRoleTalk.text = temp[num].txt;
        };
        //显示新游推荐
        HomeView.prototype.showNewGames = function () {
            var self = this;
            if (self.skNewGameGrp) {
                var gameModel = game.dataMgr.gameMo;
                var curSvrList = gameModel.getData();
                for (var i = 0; i < curSvrList.length; i++) {
                    var info = curSvrList[i];
                    var gameConf = info.conf;
                    if (gameConf.isNewGame) {
                        self._newGames.push(gameConf);
                    }
                }
                var newGames = self._newGames;
                if (newGames.length != 0) {
                    newGames.sort(function (a, b) {
                        return a.isNewGame - b.isNewGame;
                    });
                    for (var i = 0; i < newGames.length; i++) {
                        if (i >= 2)
                            break;
                        self['skNewGame' + i].dbNm = "hall_" + newGames[i].file;
                    }
                }
                else {
                    self.skGameImg.visible = false;
                    self.skNewGameGrp.visible = false;
                }
            }
        };
        //游戏分类显示
        HomeView.prototype.showGameClass = function (tag) {
            var self = this;
            var isClickHot = self._isClickHot = tag == 20 /* hot_game */;
            var gameModel = game.dataMgr.gameMo;
            var beginX = self._gamesBeginX;
            var gameSc = self.skGameSc;
            var curSvrList = gameModel.getData();
            var showGames = self._showGames = [];
            var popularGames = self._popularGames = []; //热门游戏menu
            // let loadNms = resMgr.getLoadIcons();
            for (var i = 0; i < curSvrList.length; i++) {
                var info = curSvrList[i];
                var updateData = info.update;
                var gameConf = info.conf;
                var file = gameConf.icon || gameConf.file;
                var conf = { ani: "hall_" + file, tag: gameConf.id, ud: gameConf, hotWg: gameConf.isHot, hot: info.isHot, power: info.isPowerful, handle: self, sort: info.sort, upState: { state: updateData.state, proBar: updateData.progress } };
                if (isClickHot) {
                    if (gameConf.isHot) {
                        popularGames.push(conf);
                    }
                }
                else {
                    if (game.dataMgr.accMo.isApi) {
                        if (((tag == 0 /* all */ && gameConf.class != 7 /* create_room */) || gameConf.class == tag)) {
                            showGames.push(conf);
                        }
                    }
                    else {
                        var isHasConf = gameConf.class2.indexOf(tag) != -1;
                        var isRoomCls = gameConf.class2.indexOf(7 /* create_room */) != -1;
                        if (((tag == 0 /* all */ && !isRoomCls) || isHasConf)) {
                            showGames.push(conf);
                        }
                    }
                }
            }
            var len = showGames.length;
            if (!isClickHot && len == 0) {
                var tip = TRain.langMgr.getTxt("mainLang" /* mainLang */, 836 /* gameNoOpen */);
                game.MsgBox.showTipBox(false, 836 /* gameNoOpen */, "mainLang" /* mainLang */, tip);
            }
            else {
                showGames.sort(self.compList);
                if (len <= 4) {
                    if (tag != 0 /* all */) {
                        for (var j = 0; j < len; j++) {
                            showGames.splice((2 * j + 1), 0, null);
                        }
                    }
                }
                if (isClickHot) {
                    // popularGames.sort(function(a:any, b:any){
                    // 	return a.ud.isHot - b.ud.isHot;
                    // });
                    var hotNum = game.dataMgr.accMo.getApiHotNum();
                    if (popularGames.length >= hotNum) {
                        popularGames = self._popularGames = popularGames.slice(0, hotNum);
                    }
                }
            }
            var scW = gameSc.width;
            var itemWh = self.skGames.layout.itemW;
            var maxNum = Math.ceil(scW / itemWh) + 2;
            if (maxNum % 2 != 0)
                maxNum++; // 计算显示的个数 偶数个
            for (var i = 0, len_3 = showGames.length; i < len_3; i++) {
                var data = showGames[i];
                if (!data)
                    continue;
                var idx = i > maxNum - 1 ? i - maxNum : i;
                var isLook = i < maxNum;
                data.state = { alpha: 1, tm: idx, isClick: isLook };
                if (self._offX.length != 0) {
                    var offX = parseInt(self._offX);
                    if (offX > 0) {
                        if (i % 2 != 0) {
                            data.offX = offX;
                        }
                    }
                    else {
                        if (i % 2 == 0) {
                            data.offX = offX;
                        }
                    }
                }
            }
            TRain.actionMgr.rmvActsByTar(gameSc);
            self.skGames.dataProvider.source = isClickHot ? popularGames : showGames;
            gameSc.x = beginX + 200;
            game.UIUtils.move(gameSc, { x: beginX }, EaseUtil.quadInOut, 300);
            gameSc.setScrollLeft(0, 500); //第一个是坐标，滚动到哪个位置
        };
        // private showLoadBg(loadArr:string[]){
        // 	let self = this;
        // 	let showGames = self._showGames;
        // 	if(self._isClickHot){
        // 		showGames = self._popularGames;
        // 	}
        // 	for(let i = 0,len = showGames.length;i<len;i++ ){
        // 		let showGame = showGames[i];
        // 		for(let j = 0,jLen = loadArr.length;j<jLen;j++){
        // 			let loadBg = loadArr[j];
        // 			let loadBgAfter = loadBg.split("_")[1];
        // 			let loadNm = loadBgAfter.split(".")[0]; //截取出名字
        // 			if(loadNm == showGame.ud.file){
        // 				showGame.loadBg = false;
        // 				self.skGames.dataProvider.itemUpdated(showGame);	
        // 			}
        // 		}
        // 	}
        // }
        HomeView.prototype.compList = function (a, b) {
            if (a.hot) {
                if (!b.hot) {
                    return -1;
                }
            }
            else {
                if (b.hot) {
                    return 1;
                }
            }
            if (a.sort == b.sort) {
                return a.ud.id - b.ud.id;
            }
            else {
                return a.sort - b.sort;
            }
        };
        HomeView.prototype.showClick = function (e) {
            var self = this;
            var timers = egret.getTimer();
            if (timers - 100 > self._clickAniTm) {
                game.ClickMcMgr.showMc(e.stageX, e.stageY);
                self._clickAniTm = timers;
            }
        };
        HomeView.prototype.showArrow = function (e) {
            var self = this;
            //if( !(e && e.target instanceof cui.DataGroup &&  e.target instanceof cui.SimpleButton) ) return;
            if (self.skGames) {
                if (!e && self._loginCount < 1) {
                    self._loginCount++;
                    return;
                }
                var isShow1 = true;
                var isShow2 = true;
                if (self.skGames.scrollH + self.skGames.width + 100 >= self.skGames.contentWidth) {
                    isShow2 = false;
                }
                if (self.skGames.scrollH <= 10) {
                    isShow1 = false;
                }
                if (isShow1) {
                    //self.addChild(self.skLeft);
                    self.skLeft.visible = isShow1;
                }
                else {
                    var index = self.getChildIndex(self.skLeft);
                    if (index > 0)
                        //self.removeChild(self.skLeft);
                        self.skLeft.visible = false;
                }
                if (isShow2) {
                    //self.addChild(self.skRight);
                    self.skRight.visible = isShow2;
                }
                else {
                    var index = self.getChildIndex(self.skRight);
                    if (index > 0)
                        //self.removeChild(self.skRight);
                        self.skRight.visible = false;
                }
            }
            // self.skLeft.visible = isShow1;
            // self.skRight.visible = isShow2;
        };
        //在大厅中打开相关的弹出框
        HomeView.prototype.openFunPop = function (isNotEvt) {
            var self = this;
            var isApi = game.dataMgr.accMo.isApi;
            if (isApi || self.skKfBtn) {
                return;
            }
            //首先判断哪些是在这次里面是需要弹出的
            var gameMo = game.dataMgr.generalMo;
            var hallFunPopConfs = gameMo.getFunPopInfos();
            var i = 0, len = hallFunPopConfs.length;
            var accData = game.dataMgr.accMo.getData();
            var showArr = [];
            for (; i < len; i++) {
                var hallFunPopConf = hallFunPopConfs[i];
                var proBVal = hallFunPopConf.Probability >= 100 || Math.random() < (hallFunPopConf.Probability / 100);
                switch (hallFunPopConf.ID) {
                    case 1 /* limitReward */:
                        if (!!hallFunPopConf.IsShow && gameMo.isOpenLimitRw && proBVal) {
                            showArr.push(hallFunPopConf);
                        }
                        break;
                    case 2 /* bindReward */:
                        if (!!hallFunPopConf.IsShow && proBVal && isNotEvt) {
                            if (!accData.isFormal) {
                                showArr.push(hallFunPopConf);
                            }
                        }
                        break;
                    case 3 /* firstRechange */:
                        break;
                    case 4 /* allAgent */:
                        if (!!hallFunPopConf.IsShow && proBVal) {
                            var createTm = accData.create_time;
                            var svrMsTm = TimeUtil.getSvrMS();
                            var isEqDay = TimeUtil.equalsDay(createTm * 1000, svrMsTm);
                            var list = gameMo.getPerformanceList();
                            var isOpenExt = (accData.flag_agent_status & 1) == 1;
                            if (list && list.length > 0 && !isEqDay && isOpenExt) {
                                showArr.push(hallFunPopConf);
                            }
                        }
                        break;
                    case 5 /* sevenDay */:
                        if (!!hallFunPopConf.IsShow && proBVal) {
                            var day = game.dataMgr.generalMo.curDay;
                            var list = game.dataMgr.generalMo.getTaskByDay(day);
                            if (list && list.length > 0) {
                                var count = 0;
                                for (var i_4 = 0; i_4 < list.length; i_4++) {
                                    var sevenDayData = list[i_4];
                                    if (sevenDayData.count >= sevenDayData.cfg.completeCount && !sevenDayData.received) {
                                        count++;
                                    }
                                }
                                if (count == list.length)
                                    showArr.push(hallFunPopConf);
                            }
                        }
                        break;
                    case 6 /* runWater */:
                        break;
                }
            }
            showArr.sort(function (a, b) {
                if (a.Sort == b.Sort) {
                    return a.ID - b.ID;
                }
                else {
                    return a.Sort - b.Sort;
                }
            });
            var val = 500;
            var _loop_7 = function () {
                var hallFunPopConf = showArr[i];
                var openView = void 0;
                if (hallFunPopConf.ID != 5 /* sevenDay */) {
                    switch (hallFunPopConf.ID) {
                        case 1 /* limitReward */:
                            openView = new game.LimitReward();
                            break;
                        case 2 /* bindReward */:
                            openView = new game.BindGiftDialog();
                            break;
                        case 3 /* firstRechange */:
                            break;
                        case 4 /* allAgent */:
                            openView = new game.ExtensionPop();
                            break;
                        case 6 /* runWater */:
                            break;
                    }
                    if (openView) {
                        openView.pri = val;
                        val -= 10;
                        game.gameScene.openPopup(openView);
                    }
                }
                else {
                    var isLookSDay_1 = game.dataMgr.generalMo.isFunOpen(5 /* sevenDay */); //是否开放七日奖励
                    if (i == 0) {
                        if (isLookSDay_1)
                            game.gameScene.showHallUI(4 /* sevenReward */);
                        // dataMgr.generalMo.sendGetQuestlist(false);
                    }
                    else {
                        gameMo.addListener("close" /* Close */, function () {
                            if (isLookSDay_1)
                                game.gameScene.showHallUI(4 /* sevenReward */);
                            // dataMgr.generalMo.sendGetQuestlist(false);
                        }, self);
                    }
                }
            };
            for (i = 0, len = showArr.length; i < len; i++) {
                _loop_7();
            }
        };
        HomeView.prototype.openRevivePop = function () {
            var isApi = game.dataMgr.accMo.isApi;
            if (isApi) {
                game.gameScene.openPopup(new game.ApiDefeat());
            }
            else {
                //判断当前玩家还有没有救济金可领取 ，还有是否有活动
                var data = game.dataMgr.actMo.getData();
                var reviveList = data.reviveList;
                var count = 6 /* almsMaxCount */ - game.dataMgr.accMo.getData().collected;
                if (count > 0 || !!reviveList) {
                    game.gameScene.openPopup(new game.DefeatGeneral());
                }
                else {
                    game.gameScene.openPopup(new game.DefeatShop());
                }
            }
        };
        //regin 全屏------------------------------------------
        //判断是否支持全屏
        HomeView.prototype.isFullscreenEnabled = function () {
            var cfs = document;
            return cfs.fullscreenEnabled || cfs.mozFullScreenEnabled || cfs.webkitFullscreenEnabled || cfs.msFullscreenEnabled || false;
        };
        //判断是否全屏状态
        HomeView.prototype.checkScreen = function () {
            var cfs = document;
            return cfs.isFullScreen || cfs.mozIsFullScreen || cfs.webkitIsFullScreen || cfs.msFullscreenElement || cfs.fullscreen || false;
        };
        //切换全屏按钮图片
        HomeView.prototype.changeScreenImg = function () {
            var self = this;
            if (self.checkScreen()) {
                self.skWindow.icon = "hall_hall@window1";
            }
            else {
                self.skWindow.icon = "hall_hall@window2";
            }
        };
        //全屏显示
        HomeView.prototype.fullScreen = function () {
            //注：document内会报msRequestFullscreen不是documentElement的属性，所以documentElementg as any使用
            var el = document.documentElement;
            var rfs = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullscreen;
            if (typeof rfs != "undefined" && rfs) {
                rfs.call(el);
            }
            ;
            return;
            // var page = document.getElementById('loadingDiv');
            // var	nav = window.navigator as any;
            // var	ua = nav.userAgent;
            // var	isFullScreen = nav.standalone;
            // if (ua.indexOf('Android') !== -1) {
            // } else if (/iPhone|iPod|iPad/.test(ua)) {
            // 	// 60对应的是Safari导航栏的高度
            // 	page.style.height = window.innerHeight + (isFullScreen ? 0 : 60) + 'px';
            // }
            // setTimeout(scrollTo, 0, 0, 1);
        };
        //退出全屏
        HomeView.prototype.exitScreen = function () {
            var cfs = document;
            if (cfs.exitFullscreen) {
                cfs.exitFullscreen();
            }
            else if (cfs.mozCancelFullScreen) {
                cfs.mozCancelFullScreen();
            }
            else if (cfs.webkitCancelFullScreen) {
                cfs.webkitCancelFullScreen();
            }
            else if (cfs.msExitFullscreen) {
                cfs.msExitFullscreen();
            }
        };
        //endRegin 全屏------------------------------------------
        //regin 在线人数 ------------------------------------------
        //返回 min（包含）～ max（包含）之间的数字
        HomeView.prototype.getRndInteger = function (min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        };
        //显示在线人数 = 子游戏个数 * 513 + 随机数
        HomeView.prototype.getOnlineNumber = function (isFirst) {
            var self = this;
            var curSvrList = game.dataMgr.gameMo.getData();
            var games = curSvrList.length * 513;
            if (isFirst) {
                //首次进入游戏在 400 * 600 之间随机
                return games + self.getRndInteger(400, 600);
            }
            else {
                return games + self.getRndInteger(0, 1000);
            }
        };
        //两分钟刷新一次人数，与上次人数差值大于一百重新随机
        HomeView.prototype.randomOnline = function () {
            var self = this;
            if (self.skPeople) {
                self._onLineNumTm = 0;
                //现在数字是连续的 若分开使用.replace(/[^0-9]/ig,"")取数字
                var oldNum = parseInt(self.skPeople.text);
                var newNum = self.getMinutePre(self.getOnlineNumber(false));
                // while(Math.abs(newNum - oldNum) > 100){
                // 	newNum = self.getMinutePre(self.getOnlineNumber(false));
                // }
                self.skPeople.text = newNum + TRain.langMgr.getTxt("mainLang" /* mainLang */, 1014 /* onlineLab */);
            }
        };
        HomeView.prototype.getMinutePre = function (Number) {
            var self = this;
            var date = new Date();
            var curMinute = date.getHours() * 60 + date.getMinutes();
            var conf = game.dataMgr.generalMo.getOnlineTmConf();
            for (var key in conf) {
                var info = conf[key];
                if (curMinute >= info.time) {
                    var pre = info.pre > 0 ? info.pre : 100;
                    return Math.floor(Number * pre / 100);
                }
            }
            return Number;
        };
        //endRegin 在线人数------------------------------------------
        //regin api入场动画------------------------------------------
        //isX 是否移动x轴       isAdd 是否加距离值
        HomeView.prototype.apiEnterAction = function (item, isX, isAdd, tm, delay) {
            var self = this;
            var x = item.x;
            var y = item.y;
            self.actComPoint(item, isX, isAdd);
            game.UIUtils.enterActionCom(item, x, y, tm, delay);
        };
        HomeView.prototype.enterActionBottom = function (item, moveTime, delay, isCenter, cb) {
            var self = this;
            var moveX = item.vCenter;
            var moveY = item.y;
            item.y += self.skBottomGrp.height;
            var arr = [];
            if (delay) {
                var action1 = new TRain.Action(delay);
                arr.push(action1);
            }
            var action = new TRain.ActionPropDo(0, { visible: true });
            arr.push(action);
            var act = isCenter ? { vCenter: moveX, y: moveY } : { y: moveY };
            var action2 = new TRain.ActionPropTo(moveTime, 1, act);
            action2.setEaseFun(EaseUtil.sineOut);
            arr.push(action2);
            game.UIUtils.startActCB(item, arr, cb);
        };
        HomeView.prototype.actComPoint = function (item, isX, isAdd) {
            if (isX) {
                if (isAdd) {
                    item.x += item.width;
                }
                else {
                    item.x -= (item.x + item.width);
                }
            }
            else {
                if (isAdd) {
                    item.y += item.height;
                }
                else {
                    item.y -= (item.y + item.height);
                }
            }
        };
        return HomeView;
    }(game.UIFullFW));
    game.HomeView = HomeView;
    __reflect(HomeView.prototype, "game.HomeView");
    var XfyItem = (function (_super) {
        __extends(XfyItem, _super);
        function XfyItem() {
            var _this = _super.call(this) || this;
            _this.skinName = "xfItemSkin";
            return _this;
        }
        XfyItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skXfyBtn.setTarget(function () {
                data.handle.xfBtnClick(self);
            }, self);
            self.skXfyBtn.visible = !game.dataMgr.accMo.isApi;
        };
        XfyItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skXfyImg.source = data.imgSrc;
            self.skXfyBtn.icon = data.btnSrc;
        };
        return XfyItem;
    }(cui.DataItem));
    game.XfyItem = XfyItem;
    __reflect(XfyItem.prototype, "game.XfyItem");
})(game || (game = {}));
var game;
(function (game) {
    var LastGameView = (function (_super) {
        __extends(LastGameView, _super);
        function LastGameView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "LastGameSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            self._clickTm = 0;
            return _this;
        }
        LastGameView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self.skClose.sound = "click" /* click */;
            var skList = self.skList;
            skList.itemRender = LastGameItem;
            skList.dataProvider = self._itemPro = new cui.ArrayCollection();
            self.updateGameList();
        };
        LastGameView.prototype.updateGameList = function () {
            var self = this;
            var gameList = game.dataMgr.accMo.getLastGms();
            if (gameList) {
                var showArr = [];
                for (var i = 0; i < gameList.length; i++) {
                    var gameId = gameList[i];
                    var showData = {
                        handle: self,
                        gameId: parseInt(gameId),
                    };
                    showArr.push(showData);
                }
                self._itemPro.source = showArr;
            }
        };
        LastGameView.prototype.click = function (item) {
            var self = this;
            var data = item.data;
            var clickTimers = egret.getTimer();
            if (clickTimers - 2000 /* CLICK_INTERVALTM */ > self._clickTm) {
                TRain.soundMgr.playSFX("click" /* click */);
                game.gameScene.startGame(data.gameId);
                self._clickTm = clickTimers;
            }
        };
        return LastGameView;
    }(game.UIPopup));
    game.LastGameView = LastGameView;
    __reflect(LastGameView.prototype, "game.LastGameView");
    var LastGameItem = (function (_super) {
        __extends(LastGameItem, _super);
        function LastGameItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "lastGameTileSkin";
            return _this;
        }
        LastGameItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skEnter.setTarget(function () {
                data.handle.click(self);
            }, self);
        };
        LastGameItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skNameImg.source = "lastGame@txt_" + data.gameId;
            self.skImg.source = data.gameId <= 100 ? "lastGameIcon1@icon_" + data.gameId : "lastGameIcon2@icon_" + data.gameId;
        };
        return LastGameItem;
    }(cui.DataItem));
    game.LastGameItem = LastGameItem;
    __reflect(LastGameItem.prototype, "game.LastGameItem");
})(game || (game = {}));
var game;
(function (game) {
    var LimitReward = (function (_super) {
        __extends(LimitReward, _super);
        function LimitReward() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "RewardTaskSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        LimitReward.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var list = self.skList;
            list.itemRender = LimitRewardItem;
            list.dataProvider = self._itemPro = new cui.ArrayCollection();
            self.skTips.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 797 /* limitRewardTips */);
            self.skClose.setTarget(function () {
                self.close();
                game.dataMgr.generalMo.postEvent("close" /* Close */);
            }, self);
            self.updateView();
            game.dataMgr.generalMo.addListener("UpdateTaskList" /* UpdateTaskList */, self.updateView, self);
        };
        LimitReward.prototype.updateView = function () {
            var self = this;
            //获取任务列表
            var generalMo = game.dataMgr.generalMo;
            var list = generalMo.getLimitList();
            self._itemPro.source = list;
        };
        LimitReward.prototype.onDispose = function () {
            game.dataMgr.generalMo.rmvListener("UpdateTaskList" /* UpdateTaskList */, this);
            _super.prototype.onDispose.call(this);
        };
        return LimitReward;
    }(game.UIPopup));
    game.LimitReward = LimitReward;
    __reflect(LimitReward.prototype, "game.LimitReward");
    var LimitRewardItem = (function (_super) {
        __extends(LimitRewardItem, _super);
        function LimitRewardItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "RewardItemSkin";
            return _this;
        }
        LimitRewardItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skGo.setTarget(self.BtnClick, self);
            self.skBar.openAni = false;
        };
        LimitRewardItem.prototype.BtnClick = function () {
            var self = this;
            var data = self.data;
            if (self._isGoLink) {
                //前往
                var id = data.cfg.gameID[0];
                game.gameScene.startGame(id);
            }
            else {
                //领取
                game.dataMgr.generalMo.sendGetQuestReward(data.questid);
            }
        };
        LimitRewardItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            var isReceived = data.received;
            self.skOverImg.visible = isReceived;
            //获取配置数量
            var questConf = data.cfg;
            var curCount = questConf.type != 1 ? data.count / 100 : data.count;
            var totalCount = questConf.type != 1 ? questConf.completeCount / 100 : questConf.completeCount;
            var isGoLink = self._isGoLink = curCount < totalCount;
            self.skBar.visible = self.skBarLab.visible = !isReceived;
            self.skGo.visible = game.dataMgr.accMo.gameId == 0 && !isReceived;
            self.skGo.icon = isGoLink ? "reward@txt_go" : "reward@txt_receive";
            if (isReceived) {
                self.skGold.filterNm = self.skBg.filterNm = self.skGoldBg.filterNm = self.skName.filterNm = self.skContent.filterNm = self.skGold.filterNm = "grayCF";
            }
            self.skGold.text = "jl" + (questConf.awardItemCount / 100) + "y";
            self.skName.text = questConf.name;
            self.skContent.text = questConf.desc;
            if (curCount > totalCount)
                curCount = totalCount;
            self.skBarLab.text = curCount + "/" + totalCount;
            self.skBar.setProgressValue(curCount / totalCount, 1000);
        };
        return LimitRewardItem;
    }(cui.DataItem));
    game.LimitRewardItem = LimitRewardItem;
    __reflect(LimitRewardItem.prototype, "game.LimitRewardItem");
})(game || (game = {}));
var game;
(function (game) {
    var LimitReward2 = (function (_super) {
        __extends(LimitReward2, _super);
        function LimitReward2() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "RewardFrameSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        LimitReward2.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var list = self.skList;
            list.itemRender = game.LimitRewardItem;
            list.dataProvider = self._itemPro = new cui.ArrayCollection();
            self.skClose.setTarget(self.close, self);
            self.updateView();
            game.dataMgr.generalMo.addListener("UpdateTaskList" /* UpdateTaskList */, self.updateView, self);
            self._tagTm = TRain.core.addFrameDo(self.updateTm, self, false, 1000);
            self.updateTm();
        };
        LimitReward2.prototype.updateTm = function () {
            var self = this;
            var date = TimeUtil.formatTm();
            var tm = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 660 /* TaskRemainedTimes */), date.day, date.hour, date.min, date.sec);
            self.skTime.textFlow = cui.htmlParser.parser(tm); //温馨提示：xxxxx
        };
        LimitReward2.prototype.updateView = function () {
            var self = this;
            //获取任务列表
            var generalMo = game.dataMgr.generalMo;
            var list = generalMo.getLimitList();
            self._itemPro.source = list;
        };
        LimitReward2.prototype.onDispose = function () {
            game.dataMgr.generalMo.rmvListener("UpdateTaskList" /* UpdateTaskList */, this);
            TRain.core.rmvFrameDoById(this._tagTm);
            _super.prototype.onDispose.call(this);
        };
        return LimitReward2;
    }(game.UIPopup));
    game.LimitReward2 = LimitReward2;
    __reflect(LimitReward2.prototype, "game.LimitReward2");
})(game || (game = {}));
var game;
(function (game) {
    var LimitRwOpen = (function (_super) {
        __extends(LimitRwOpen, _super);
        function LimitRwOpen() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "LimRwOpenSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            self._tm = 11;
            return _this;
        }
        LimitRwOpen.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self._tagTm = TRain.core.addFrameDo(self.updateTm, self, false, 1000);
        };
        LimitRwOpen.prototype.updateTm = function () {
            var self = this;
            var tm = self._tm--;
            if (tm < 1) {
                self.close();
                TRain.core.rmvFrameDo(self._tagTm);
                self._tagTm = 0;
            }
        };
        return LimitRwOpen;
    }(game.UIPopup));
    game.LimitRwOpen = LimitRwOpen;
    __reflect(LimitRwOpen.prototype, "game.LimitRwOpen");
})(game || (game = {}));
var game;
(function (game) {
    var MailView = (function (_super) {
        __extends(MailView, _super);
        function MailView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "mailSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
            //dataMgr.mailMo.askMessage();
        }
        MailView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var mailMo = game.dataMgr.mailMo;
            var mailList = mailMo.list;
            self._arrDate = [];
            if (mailList.length > 0)
                self._pageNum = 1;
            mailMo.addListener("mail_list" /* list */, self.updateView, self);
            mailMo.addListener("mail_delete" /* delete */, self.updateView, self);
            mailMo.addListener("read_mail" /* read */, self.updateView, self);
            self.skClose.setTarget(self.close, self);
            self.skList.itemRender = MailItem;
            var dataPro = self._dataPro = new cui.ArrayCollection();
            self.skList.dataProvider = dataPro;
            self.updateView();
            self.skUpPage.setTarget(function () {
                if (self._pageNum > 1) {
                    self._pageNum--;
                    self.updateView();
                }
            }, self);
            self.skNextPage.setTarget(function () {
                if (self._pageNum * 10 < mailList.length) {
                    self._pageNum++;
                    self.updateView();
                }
            }, self);
            self.skFirstPage.setTarget(function () {
                self._pageNum = 1;
                self.updateView();
            }, self);
            self.skLastPage.setTarget(function () {
                self._pageNum = Math.ceil(mailList.length / 10);
                self.updateView();
            }, self);
        };
        MailView.prototype.updateView = function () {
            var self = this;
            var mailMo = game.dataMgr.mailMo;
            var mailList = mailMo.list;
            self.skNoHaveImg.visible = false;
            self.skScroller.visible = true;
            self.skBtnGrp.visible = true;
            var mailArr = [];
            var length = mailList.length;
            var page = self._pageNum;
            var tempArr = [];
            self.skScroller.setScrollTop(0);
            self.skPage.text = self._pageNum + "/" + Math.ceil(mailList.length / 10);
            mailList.sort(function (a, b) {
                return a.read - b.read;
            });
            if (length > 0) {
                if (page * 10 < mailList.length) {
                    var mailData = mailList.slice((page - 1) * 10, (page - 1) * 10 + 10);
                    self._arrDate = mailData;
                }
                else {
                    var mailData = mailList.slice((page - 1) * 10, length);
                    self._arrDate = mailData;
                }
                for (var i = 0; i < self._arrDate.length; i++) {
                    mailArr.push(self.formatMialItem(self._arrDate[i]));
                }
                mailArr.sort(function (a, b) {
                    if (a.read == b.read)
                        return b.time - a.time;
                    return a.read - b.read;
                });
                self._dataPro.source = mailArr;
            }
            else {
                self.skNoHaveImg.visible = true;
                self.skScroller.visible = false;
                self.skBtnGrp.visible = false;
            }
        };
        MailView.prototype.formatMialItem = function (mailInfo) {
            var self = this;
            var showData = {
                handle: self,
                id: mailInfo.id,
                read: mailInfo.read,
                time: mailInfo.timeValue,
                info: mailInfo.msgInfo,
                items: mailInfo.items,
            };
            return showData;
        };
        MailView.prototype.click = function (item) {
            var self = this;
            var data = item.data;
            //判断当前是否存在附件
            // if(true){
            //     
            //     let tip  = TRain.langMgr.getTxt(LangGrp.mainLang,langConsts.mainLang.ACAccountIsNull); //附件尚未领取，无法删除邮件
            //     TipsMgr.showPrompt(tip);
            // }else{
            game.dataMgr.mailMo.deleteMessage([data.id]);
            // }
        };
        MailView.prototype.readClick = function (item) {
            var self = this;
            var data = item.data;
            var view = new MailDetail(data);
            view.pri = 100 /* layer1 */;
            game.gameScene.openPopup(view);
            if (!data.read)
                game.dataMgr.mailMo.readMessage(data.id);
        };
        MailView.prototype.onDispose = function () {
            _super.prototype.onDispose.call(this);
            var mailMo = game.dataMgr.mailMo;
            mailMo.rmvListener("mail_list" /* list */, self);
            mailMo.rmvListener("mail_delete" /* delete */, self);
            mailMo.rmvListener("read_mail" /* read */, self);
        };
        return MailView;
    }(game.UIPopup));
    game.MailView = MailView;
    __reflect(MailView.prototype, "game.MailView");
    var MailItem = (function (_super) {
        __extends(MailItem, _super);
        function MailItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "mailItemSkin";
            return _this;
        }
        MailItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skRmvMail.setTarget(function () {
                data.handle.click(self);
            }, self);
            self.skReadBtn.setTarget(function () {
                data.handle.readClick(self);
                self.skRmvMail.visible = true;
            }, self);
        };
        MailItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skIcon.source = !!data.read ? "mail@overRead" : "mail@unRead";
            //格式化成当前时间
            var date = new Date(data.time * 1000);
            self.skTime.text = date.toLocaleString();
            self.skInfo.text = data.info;
            self.skRmvMail.visible = !!data.read;
        };
        return MailItem;
    }(cui.DataItem));
    game.MailItem = MailItem;
    __reflect(MailItem.prototype, "game.MailItem");
    var MailDetail = (function (_super) {
        __extends(MailDetail, _super);
        function MailDetail(info) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "mailDetailSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skOverImg.visible = self.skAccessory.visible = false;
            self._info = info;
            return _this;
        }
        MailDetail.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            var langMgr = TRain.langMgr;
            self.skTitle.text = langMgr.getTxt("mainLang" /* mainLang */, 270 /* MailTitle */) + langMgr.getTxt("mainLang" /* mainLang */, 157 /* Mail_Title */);
            self.skSender.text = langMgr.getTxt("mainLang" /* mainLang */, 271 /* MailSendName */) + langMgr.getTxt("mainLang" /* mainLang */, 158 /* Mail_From */);
            self.skContent.text = self._info.info;
            if (self._info.items) {
                if (self._info.items[0].id == 1) {
                    self.skOverImg.visible = self.skAccessory.visible = true;
                    var num = self._info.items[0].count / 100;
                    self.skGold.text = num.toString();
                }
            }
        };
        return MailDetail;
    }(game.UIPopup));
    game.MailDetail = MailDetail;
    __reflect(MailDetail.prototype, "game.MailDetail");
})(game || (game = {}));
var game;
(function (game) {
    var NoticeHall = (function (_super) {
        __extends(NoticeHall, _super);
        function NoticeHall(state, parent) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "noticeHallSkin";
            self._state = state;
            self.vCenter = 0;
            self.hCenter = 0;
            self._parent = parent;
            return _this;
        }
        NoticeHall.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skBtn.setTarget(function () {
                //跳转链接
                var self = this;
                var data = self._showNoticeDatas;
                var url = data[self._curTag].Url;
                URLUtil.outLayOpenUrl(url);
            }, self);
            self.updateView();
        };
        NoticeHall.prototype.setState = function (state) {
            this._state = state;
        };
        /**
         *
         * @param isBack 是否是返回公告
         */
        NoticeHall.prototype.resetView = function (isBack) {
            var self = this;
            if (isBack) {
                if (self._rmvDom) {
                    self.addChild(self._rmvDom);
                }
                self.skMenuNotice.selectTag = 0;
            }
            else {
                var domComp = self.skDom;
                if (domComp.parent) {
                    self._rmvDom = domComp;
                    domComp.parent.removeChild(domComp);
                }
            }
        };
        NoticeHall.prototype.updateView = function () {
            var self = this;
            var noticeList = self._showNoticeDatas = self.getListByState();
            var len = noticeList.length;
            self.skNoticeBg.source = len > 0 ? "activityInnerDB" : "noNoticeDB";
            self.skIcon.visible = len <= 0;
            self.skBtn.visible = self.skMenuNotice.visible = len > 0;
            var imgGrp = self.skMenuNotice;
            var maxHeight = 0;
            var accMo = game.dataMgr.accMo;
            var noticeStr = game.GameUtil.getLocal("NOW_NOTICE" /* NOW_NOTICE */) || "";
            for (var i = 0; i < len; i++) {
                var data = noticeList[i];
                var img = new cui.MenuItemImage();
                img.skinName = "noticeItemSkin";
                img.label = data.Page;
                var isNew = accMo.isNewNotice(String(data.Id));
                var isNoRead = accMo.isNoRead(String(data.Id));
                img.icon = isNew ? "notice@txt_new" : isNoRead ? "notice@txt_noRead" : "";
                img.tag = i;
                img.y = img.height * i;
                if (maxHeight < img.y)
                    maxHeight = img.y;
                imgGrp.addChild(img);
                if (isNew) {
                    noticeStr += "_" + data.Id;
                    game.GameUtil.setLocal("NOW_NOTICE" /* NOW_NOTICE */, noticeStr);
                }
            }
            imgGrp.setContentSize(imgGrp.width, maxHeight + 90);
            imgGrp.setTarget(self.clickMenu, self);
            imgGrp.selectTag = 0;
        };
        NoticeHall.prototype.clickMenu = function (item) {
            var self = this;
            var tag = item.tag;
            if (tag == self._curTag)
                return;
            self._curTag = tag;
            var data = self._showNoticeDatas[tag];
            self.skScr.visible = data.NoticeType == 2;
            self.skTitle1.visible = self.skTitle2.visible = self.skTitle3.visible = (data.NoticeType != 2 && data.NoticeType != 3);
            if (self.skDom.parent)
                self.skDom.parent.removeChild(self.skDom);
            if (data.NoticeType == 2) {
                self.skImg.source = game.resMgr.getYptUrl(data.Notice);
                self.skInGrp.width = self.skGrp.width;
                self.skInGrp.height = self.skImg.height;
                self.skGrp.setContentSize(self.skGrp.width, self.skInGrp.height);
            }
            else if (data.NoticeType == 3) {
                self.addChild(self.skDom);
                self.skDom.src = game.resMgr.getNoticeUrl(data.Notice);
            }
            else {
                self.skTitle1.text = data.Title;
                self.skTitle2.textFlow = cui.htmlParser.parser(data.Notice);
                self.skTitle2.touchEnabled = true;
                self.skTitle2.addEventListener(egret.TextEvent.LINK, function (evt) {
                    URLUtil.outLayOpenUrl(evt.text);
                }, self);
            }
            self.skBtn.visible = !!data.Url;
            var noticeStr = game.GameUtil.getLocal("OVER_NOTICE" /* OVER_READ_NOTICE */) || "";
            var isNoRead = game.dataMgr.accMo.isNoRead(String(data.Id));
            if (isNoRead) {
                noticeStr += "_" + data.Id;
                game.GameUtil.setLocal("OVER_NOTICE" /* OVER_READ_NOTICE */, noticeStr);
            }
            //刷新未读等状态
            self.reflshMenu(tag);
        };
        NoticeHall.prototype.reflshMenu = function (tag) {
            var self = this;
            var child = self.skMenuNotice.getChildAt(tag);
            var accMo = game.dataMgr.accMo;
            var noticeList = self._showNoticeDatas;
            var data = noticeList[tag];
            var isNew = accMo.isNewNotice(String(data.Id));
            var isNoRead = accMo.isNoRead(String(data.Id));
            child.icon = isNew ? "notice@txt_new" : isNoRead ? "notice@txt_noRead" : "";
            if (accMo.gameId == 0 && game.gameScene && game.gameScene.homeUI) {
                game.gameScene.homeUI.showNoticeNum();
            }
            if (self._parent)
                self._parent.changeRedNum(2);
        };
        NoticeHall.prototype.getListByState = function () {
            var self = this;
            var state = self._state;
            var datas = game.dataMgr.accMo.getNoticeDatas();
            var tempDatas = [];
            for (var i = 0, len = datas.length; i < len; i++) {
                var data = datas[i];
                if (state == 0 /* login */) {
                    if (data.ShowStage == 2 /* two */ || data.ShowStage == 102 /* oneToTwo */) {
                        continue;
                    }
                    else {
                        tempDatas.push(data);
                    }
                }
                else if (state == 2 /* hallPop */) {
                    var isOpen_2 = game.GameUtil.getLocal("NOTICE_2" /* NOTICE_2 */);
                    var isOpen_3 = game.GameUtil.getLocal("NOTICE_3" /* NOTICE_3 */);
                    var localSvrTm1 = parseInt(game.GameUtil.getLocal("NOTICE_TM_1" /* NOTICE_TM_1 */));
                    var localSvrTm2 = parseInt(game.GameUtil.getLocal("NOTICE_TM_2" /* NOTICE_TM_2 */));
                    var svrMsTm = TimeUtil.getSvrMS();
                    var isEqual1 = TimeUtil.equalsDay(localSvrTm1, svrMsTm);
                    var isEqual2 = TimeUtil.equalsDay(localSvrTm2, svrMsTm);
                    if (data.ShowStage == 2 /* two */) {
                        if (!isOpen_2) {
                            tempDatas.push(data);
                            game.GameUtil.setLocal("NOTICE_2" /* NOTICE_2 */, true); //已经弹出过了
                        }
                    }
                    else if (data.ShowStage == 3 /* three */) {
                        if (!isOpen_3) {
                            tempDatas.push(data);
                            game.GameUtil.setLocal("NOTICE_3" /* NOTICE_3 */, true);
                        }
                    }
                    else if (data.ShowStage == 102 /* oneToTwo */) {
                        //获取服务器时间
                        if (!isEqual1) {
                            tempDatas.push(data);
                            game.GameUtil.setLocal("NOTICE_TM_1" /* NOTICE_TM_1 */, String(svrMsTm));
                        }
                    }
                    else if (data.ShowStage == 103 /* oneToThree */) {
                        //获取服务器时间
                        if (!isEqual2) {
                            tempDatas.push(data);
                            game.GameUtil.setLocal("NOTICE_TM_2" /* NOTICE_TM_2 */, String(svrMsTm));
                        }
                    }
                    else {
                        tempDatas.push(data);
                    }
                }
                else {
                    tempDatas.push(data);
                }
            }
            // tempDatas = self.deletePack(tempDatas);
            tempDatas.sort(function (a, b) {
                return a.ShowIdx - b.ShowIdx;
            });
            return tempDatas;
        };
        return NoticeHall;
    }(cui.Component));
    game.NoticeHall = NoticeHall;
    __reflect(NoticeHall.prototype, "game.NoticeHall");
})(game || (game = {}));
var game;
(function (game) {
    var NoticeView = (function (_super) {
        __extends(NoticeView, _super);
        function NoticeView(state) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "noticeSkin";
            self._state = state;
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        NoticeView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self.skHall.setState(self._state);
        };
        return NoticeView;
    }(game.UIPopup));
    game.NoticeView = NoticeView;
    __reflect(NoticeView.prototype, "game.NoticeView");
})(game || (game = {}));
var game;
(function (game) {
    var NotifyUI = (function (_super) {
        __extends(NotifyUI, _super);
        // private _sysTm:number;
        function NotifyUI() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.touchEnabled = false;
            self._showing = false;
            self.skinName = "NotifySkin";
            return _this;
        }
        NotifyUI.prototype.onPartAdded = function () {
            _super.prototype.onPartAdded.call(this);
            var self = this;
            // let notifyMo = dataMgr.notifyMo;
            // notifyMo.addListener( NotifyMo_EVT.got_notify, self.showNext, self );
            var accMo = game.dataMgr.accMo;
            accMo.addListener("new" /* got_notify */, self.showNext, self);
        };
        NotifyUI.prototype.rmvParent = function (p) {
            var self = this;
            if (p == self._parent && self.parent) {
                self._parent = null;
                TRain.core.rmvAllDelayDo(self);
                p.removeChild(self);
            }
        };
        NotifyUI.prototype.setParent = function (p, width) {
            var self = this;
            self._parent = p;
            var group = self.skTxt.parent;
            self._stX = group.width - 45;
            width = width || p.width;
            self.skBg.width = width;
            group.mask = new egret.Rectangle(45, 0, width - 45, group.height);
            if (p) {
                p.addChild(self);
                self.skAni.visible = self.skBg.visible = self._showing;
                self.showNext();
            }
            else {
                var oldParent = self.parent;
                if (oldParent)
                    oldParent.removeChild(self);
            }
        };
        NotifyUI.prototype.update = function (tm) {
            var self = this;
            var skTxt = self.skTxt;
            var x = skTxt.x - 1;
            skTxt.x = x;
            if (x + skTxt.width < 0) {
                var curData = self._data;
                if (!curData) {
                    curData = self._sysData;
                    if (!curData)
                        return;
                }
                curData.tm++;
                if ((curData.data.repCount || 1) <= curData.tm) {
                    if (curData.data.notifyType == 200 /* sys */)
                        self._sysData = null;
                    self._data = null;
                    TRain.core.rmvAllDelayDo(self);
                    self.showNext();
                    //if(self._sysTm > 0)TRain.core.rmvAllDelayDo(self._sysTm);
                }
                else {
                    //self.resetTxt();
                    self._sysData = curData;
                    self._data = null;
                    self.setShowing(false);
                    TRain.core.addDelayDo(self.showNext, self, (self._sysData.data.interval * 1000));
                }
            }
        };
        /**
         *
         * @param isNew 是否是服务器发过来的新数据，用作区分延迟跑马灯数据
         */
        NotifyUI.prototype.showNext = function (isNew) {
            var self = this;
            if (!self._parent || self._data)
                return;
            var sysData = self._sysData;
            var nodifyData = game.dataMgr.accMo.popNotify();
            if (!isNew && sysData) {
                self._data = { data: sysData.data, tm: sysData.tm, txt: sysData.txt };
                self.skTxt.textFlow = self._data.txt;
                self.resetTxt();
                self.setShowing(true);
            }
            else {
                if (nodifyData) {
                    var formatText = void 0;
                    if (nodifyData.notifyType == 200 /* sys */) {
                        var ret = [];
                        var txtNum = { text: (nodifyData.talkerNickName + ":") };
                        var propStr = "color=0xffffff";
                        txtNum.style = this.parseProp(propStr);
                        ret.push(txtNum);
                        var txtContent = { text: nodifyData.content };
                        var propStr1 = "color=0xFFFF0000";
                        txtContent.style = this.parseProp(propStr1);
                        ret.push(txtContent);
                        formatText = ret;
                    }
                    else {
                        formatText = self.formatTxt(nodifyData);
                    }
                    self._data = { data: nodifyData, tm: 0, txt: formatText };
                    self.skTxt.textFlow = formatText;
                    self.resetTxt();
                    self.setShowing(true);
                }
                else {
                    self._data = null;
                    self.setShowing(false);
                }
            }
        };
        NotifyUI.prototype.setShowing = function (b) {
            var self = this;
            if (self._showing == b)
                return;
            var parent = self._parent;
            self._showing = b;
            self.skAni.visible = self.skBg.visible = b;
            if (b) {
                TRain.core.addFrameDo(self.update, self, false, 33);
                parent.addChild(self);
            }
            else {
                TRain.core.rmvFrameDo(self);
                if (parent)
                    parent.removeChild(self);
            }
        };
        NotifyUI.prototype.resetTxt = function () {
            var self = this;
            var skTxt = this.skTxt;
            skTxt.x = self._stX;
        };
        NotifyUI.prototype.formatTxt = function (nodifyData) {
            var name = nodifyData.talkerNickName;
            var txt = nodifyData.content;
            var moneyNum = nodifyData.moneyNum;
            var stIdx = txt.indexOf("{");
            var pos = 0;
            var txtLen = txt.length;
            var ret = [];
            var style;
            var txtName = { text: name + ":" };
            var propStr = "color=0xffffff";
            txtName.style = this.parseProp(propStr);
            ret.push(txtName);
            while (stIdx >= 0) {
                var endIdx = txt.indexOf("}", stIdx);
                if (endIdx < 0)
                    break;
                if (pos < stIdx) {
                    var txtEle = { text: txt.substring(pos, stIdx) };
                    if (style)
                        txtEle.style = style;
                    ret.push(txtEle);
                }
                style = null;
                if (endIdx - stIdx > 3) {
                    var propStr_1 = txt.substring(stIdx + 1, endIdx);
                    style = this.parseProp(propStr_1);
                }
                stIdx = txt.indexOf("{", pos);
                pos = endIdx + 1;
            }
            if (pos < txtLen) {
                var tempTxt = txt.substring(pos, txtLen);
                var maxLen = tempTxt.length;
                if (tempTxt.charAt(maxLen - 1) == "1") {
                    tempTxt = tempTxt.substring(0, maxLen - 1);
                }
                var txtEle = { text: tempTxt };
                if (style)
                    txtEle.style = style;
                ret.push(txtEle);
                var goldLab = TRain.langMgr.getTxt("mainLang" /* mainLang */, 265 /* MoneyType1 */);
                var goldNum = game.DataFormat.convertGoldString3(moneyNum);
                var txtNum = { text: goldNum + goldLab };
                var propStr_2 = "color=0xfffc00";
                txtNum.style = this.parseProp(propStr_2);
                ret.push(txtNum);
                var txtTH = { text: "!" };
                var propStr1 = "color=0xffffff";
                txtTH.style = this.parseProp(propStr1);
                ret.push(txtTH);
            }
            return ret;
        };
        NotifyUI.prototype.parseProp = function (propStr) {
            var ret = null;
            var props = propStr.split(",");
            for (var i = 0, len = props.length; i < len; ++i) {
                var prop = props[i];
                var tmps = prop.split("=");
                if (tmps.length == 2) {
                    ret = ret || {};
                    switch (tmps[0]) {
                        case "color":
                            var colorStr = tmps[1];
                            //0xffffffff
                            if (colorStr.length == 10) {
                                ret.textColor = parseInt("0x" + colorStr.substr(4));
                            }
                            else {
                                ret.textColor = parseInt(colorStr);
                            }
                            break;
                    }
                }
            }
            return ret;
        };
        return NotifyUI;
    }(cui.Component));
    game.NotifyUI = NotifyUI;
    __reflect(NotifyUI.prototype, "game.NotifyUI");
})(game || (game = {}));
var game;
(function (game) {
    var ServiceView = (function (_super) {
        __extends(ServiceView, _super);
        function ServiceView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "CustomerServiceSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        ServiceView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skConsultation.setTarget(function () {
            }, self);
            self.skSuggestion.setTarget(function () {
                game.gameScene.openPopup(new Complaints());
                self.close();
            }, self);
            self.skClose.setTarget(self.close, self);
            self.skList.itemRender = ServiceItem;
            var dataPro = self._itemPro = new cui.ArrayCollection();
            self.skList.dataProvider = dataPro;
            var generalMo = game.dataMgr.generalMo;
            generalMo.askFaq();
            generalMo.addListener("GetFaqResult" /* GetFaqResult */, self.updateList, self);
            generalMo.addListener("GetFaqDetailResult" /* GetFaqDetailResult */, self.updateDetailInfo, self);
        };
        //获取规则的名字和内容
        ServiceView.prototype.updateList = function (list) {
            var self = this;
            var showArr = [];
            for (var i = 0; i < list.length; i++) {
                var faqDef = list[i];
                var showData = {
                    handle: self,
                    tag: faqDef.index,
                    titleLab: faqDef.text,
                    content: "",
                    isNotOpen: true,
                };
                showArr.push(showData);
            }
            self._showArr = showArr;
            self._itemPro.source = showArr;
        };
        ServiceView.prototype.click = function (item) {
            var self = this;
            var data = item.data;
            var tag = data.tag;
            game.dataMgr.generalMo.askFaqDetail(tag);
            for (var i = 0; i < self._showArr.length; i++) {
                var itemData = self._showArr[i];
                if (itemData.tag == tag) {
                    itemData.isNotOpen = !data.isNotOpen;
                }
            }
        };
        ServiceView.prototype.updateDetailInfo = function (data) {
            var self = this;
            for (var i = 0; i < self._showArr.length; i++) {
                var itemData = self._showArr[i];
                if (itemData.tag == data.index) {
                    itemData.content = data.text;
                }
            }
            self._itemPro.source = self._showArr;
        };
        ServiceView.prototype.onDispose = function () {
            game.dataMgr.generalMo.rmvListener("GetFaqResult" /* GetFaqResult */, self);
            game.dataMgr.generalMo.rmvListener("GetFaqDetailResult" /* GetFaqDetailResult */, self);
            _super.prototype.onDispose.call(this);
        };
        return ServiceView;
    }(game.UIPopup));
    game.ServiceView = ServiceView;
    __reflect(ServiceView.prototype, "game.ServiceView");
    var ServiceItem = (function (_super) {
        __extends(ServiceItem, _super);
        function ServiceItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "serviceItemSKin";
            return _this;
        }
        ServiceItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skBtn.setTarget(function () {
                data.handle.click(self);
            }, self);
        };
        ServiceItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skBtn.icon = data.isNotOpen ? "kefu@btn_more" : "kefu@btn_down";
            self.skTitleLab.text = data.titleLab;
            var contentLab = self.skGroup.getChildAt(1);
            contentLab.text = data.content;
            self.skGroup.visible = !data.isNotOpen;
            self.height = data.isNotOpen ? self.skImg.height : self.skGroup.height;
        };
        return ServiceItem;
    }(cui.DataItem));
    game.ServiceItem = ServiceItem;
    __reflect(ServiceItem.prototype, "game.ServiceItem");
    var ComplaintsItem = (function (_super) {
        __extends(ComplaintsItem, _super);
        function ComplaintsItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "ComplaintItemSkin";
            return _this;
        }
        ComplaintsItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
        };
        ComplaintsItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            var date = new Date(data.time * 1000);
            self.skTime.text = date.toLocaleString();
            self.skReturn.text = data.info;
            self.skAdvice.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 700 /* CustomerFeedback */);
        };
        return ComplaintsItem;
    }(cui.DataItem));
    game.ComplaintsItem = ComplaintsItem;
    __reflect(ComplaintsItem.prototype, "game.ComplaintsItem");
    var Complaints = (function (_super) {
        __extends(Complaints, _super);
        function Complaints() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "ComplaintsSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        Complaints.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(function () {
                self.close();
            }, self);
            self.skMenuGrp.setTarget(self.menuClick, self);
            self.skMenuGrp.selectTag = 0;
            self.skAdvice.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 639 /* AdviseTip */);
            self.skSubmission.setTarget(function () {
                if (self.skAdvice.text.length == 0) {
                    var tips = TRain.langMgr.getTxt("mainLang" /* mainLang */, 397 /* SendContentNotNull */);
                    // TipsMgr.showPrompt(tips,game.UIColor.white);
                    game.MsgBox.showTipBox(false, 397 /* SendContentNotNull */, "mainLang" /* mainLang */, tips);
                }
                else {
                    game.dataMgr.generalMo.sendAdviceReq(self.skAdvice.text);
                    game.dataMgr.generalMo.adviceListReq();
                    var tips = TRain.langMgr.getTxt("mainLang" /* mainLang */, 272 /* SendSuc */);
                    // TipsMgr.showPrompt(tips,game.UIColor.white);
                    game.MsgBox.showTipBox(false, 397 /* SendContentNotNull */, "mainLang" /* mainLang */, tips);
                    self.skAdvice.text = "";
                }
            }, self);
            self.skList.itemRender = ComplaintsItem;
            var dataPro = self._itemPro = new cui.ArrayCollection();
            self.skList.dataProvider = dataPro;
            var generalMo = game.dataMgr.generalMo;
            generalMo.addListener("GetadviceListResult" /* GetadviceListResult */, self.updateView, self);
            //let generalMo = dataMgr.generalMo;
        };
        Complaints.prototype.menuClick = function (item) {
            var self = this;
            var tag = item.tag;
            if (tag == 0) {
                //self.skList.visible = false;
                self.skSubmission.visible = true;
                self.skHandImage.visible = true;
                self.skAdvice.visible = true;
                self.skScroller.visible = false;
            }
            else if (tag == 1) {
                game.dataMgr.generalMo.adviceListReq();
                self.skSubmission.visible = false;
                self.skHandImage.visible = false;
                self.skAdvice.visible = false;
                self.skScroller.visible = true;
            }
        };
        Complaints.prototype.updateView = function (list) {
            var self = this;
            var complaintsArr = [];
            for (var i = 0; i < list.length; i++) {
                var suggest = list[i];
                var showData = {
                    time: suggest.time,
                    info: suggest.text,
                };
                complaintsArr.push(showData);
            }
            self._listArr = complaintsArr;
            self._itemPro.source = complaintsArr;
        };
        Complaints.prototype.onDispose = function () {
            game.dataMgr.generalMo.rmvListener("GetadviceListResult" /* GetadviceListResult */, self);
            _super.prototype.onDispose.call(this);
        };
        return Complaints;
    }(game.UIPopup));
    game.Complaints = Complaints;
    __reflect(Complaints.prototype, "game.Complaints");
})(game || (game = {}));
var game;
(function (game) {
    var SettingView = (function (_super) {
        __extends(SettingView, _super);
        function SettingView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "SettingSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        SettingView.prototype.childrenCreated = function () {
            var self = this;
            self.skClose.setTarget(function () {
                self.close();
            }, self);
            var soundMgr = TRain.soundMgr;
            self.skMusic.setTarget(function () {
                var tempMcState = soundMgr.musicState;
                game.GameUtil.setLocal("MUSIC_STATUS" /* MUSIC_STATUS */, !tempMcState);
                soundMgr.musicState = !tempMcState;
                self.updateMcAndSd();
            }, self);
            self.skSound.setTarget(function () {
                var tempSdState = soundMgr.sfxState;
                game.GameUtil.setLocal("SFX_STATUS" /* SFX_STATUS */, !tempSdState);
                soundMgr.sfxState = !tempSdState;
                self.updateMcAndSd();
            }, self);
            var generalMo = game.dataMgr.generalMo;
            // generalMo.addListener(General_EVT.GetVipInfoResult, function(vipexp:number, viplv:number){
            //     self.skHeadFrame.source = confConsts.ComResTp.oldFrame + viplv;
            // }, self);
            var accModel = game.dataMgr.accMo;
            var accData = accModel.getData();
            self.updateMcAndSd();
            self.updateHead();
            self.skBinding.icon = "setting@" /* setting */ + (accData.isFormal ? "txt_binded" : "txt_phoneBinding");
            self.skBinding.setTarget(function () {
                if (accData.isFormal)
                    return;
                var view = new game.Registered();
                view.setData(true);
                game.gameScene.openPopup(view);
                self.close();
            }, self);
            self.skSwitch.setTarget(function () {
                game.MsgBox.showBoxCB("mainLang" /* mainLang */, 330 /* LoginOutConfirm */, function (tag) {
                    if (tag == 1) {
                        //登出
                        //location.reload(); 
                        game.GameUtil.gameReload(true);
                    }
                }, self);
            }, self);
            self.skBinding.visible = generalMo.isFunOpen(10 /* activity */);
            self.skSwitch.visible = generalMo.isFunOpen(11 /* changeAcc */);
            if (self.skBack) {
                self.skBack.visible = false;
                // let homeUrl = CONF.homeUrl ;
                // self.skBack.visible = dataMgr.accMo.isApi && homeUrl != "" ;
                // self.skBack.setTarget(function(){
                //     // if(!homeUrl){
                //     //     MsgBox.showTipBox(false,langConsts.mainLang.addLinks,LangGrp.mainLang);
                //     // }else{
                //         URLUtil.changeWebURL(homeUrl);
                //     // }
                // },self);
            }
        };
        SettingView.prototype.updateHead = function () {
            var self = this;
            var accModel = game.dataMgr.accMo;
            var accData = accModel.getData();
            //获取当前头像
            self.skHead.source = game.DataFormat.getHeadIcon(accData.icon_custom);
            self.skHeadFrame.source = game.dataMgr.accMo.isApi ? "apiHead@old" /* oldFrameApi */ : "head@old" /* oldFrame */ + accData.viplvl;
            //当前玩家名字
            self.skName.text = accData.nickname;
            //当前玩家id
            self.skId.text = "ID:" + accData.aid;
        };
        SettingView.prototype.updateMcAndSd = function () {
            var self = this;
            var soundMgr = TRain.soundMgr;
            self.skMusic.icon = "setting@" /* setting */ + (soundMgr.musicState ? "open" : "close");
            self.skSound.icon = "setting@" /* setting */ + (soundMgr.sfxState ? "open" : "close");
            if (soundMgr.musicState) {
                game.dataMgr.soundMo.playMusic();
            }
            else {
                soundMgr.stopMusic();
            }
            if (!soundMgr.sfxState)
                soundMgr.stopAllSFX();
        };
        return SettingView;
    }(game.UIPopup));
    game.SettingView = SettingView;
    __reflect(SettingView.prototype, "game.SettingView");
})(game || (game = {}));
var game;
(function (game) {
    var VersionUI = (function () {
        function VersionUI() {
            this._gameVer = new cui.Label();
            this._gameVer.size = 26;
        }
        VersionUI.getInst = function () {
            if (!VersionUI._inst) {
                VersionUI._inst = new VersionUI();
            }
            return VersionUI._inst;
        };
        VersionUI.prototype.setParent = function (p) {
            var gameVer = this._gameVer;
            if (p) {
                p.addChild(gameVer);
            }
            else {
                var oldParent = gameVer.parent;
                if (oldParent)
                    oldParent.removeChild(gameVer);
            }
        };
        VersionUI.prototype.setVer = function (ver) {
            this._gameVer.text = ver;
        };
        return VersionUI;
    }());
    game.VersionUI = VersionUI;
    __reflect(VersionUI.prototype, "game.VersionUI");
})(game || (game = {}));
var game;
(function (game) {
    var BoxMgr;
    (function (BoxMgr) {
        var _parent; //父窗口
        var _delegate;
        var _boxGp;
        var _warmGp;
        var _easyWarmGp;
        var _txt;
        function setParent(parent, layerDelegate) {
            if (_parent && _boxGp) {
                if (_boxGp.parent) {
                    _boxGp.parent.removeChild(_boxGp);
                }
                close();
            }
            if (_parent && _warmGp) {
                if (_warmGp.parent) {
                    _warmGp.parent.removeChild(_warmGp);
                }
                close();
            }
            if (_parent && _easyWarmGp) {
                if (_easyWarmGp.parent) {
                    _easyWarmGp.parent.removeChild(_easyWarmGp);
                }
                close();
            }
            _parent = parent;
            _delegate = layerDelegate;
            if (parent && _boxGp && _txt) {
                parent.addChild(_boxGp);
                show();
            }
            // if( parent && _warmGp ){
            //     parent.addChild( _warmGp );
            //     show();
            // }
            // if( parent && _easyWarmGp ){
            //     parent.addChild( _easyWarmGp );
            //     show();
            // }
        }
        BoxMgr.setParent = setParent;
        function close() {
            if (_parent.parent) {
                _delegate.hideLayer(_parent);
                _txt = null;
            }
        }
        function show() {
            if (!_parent.parent) {
                _delegate.showLayer(_parent);
            }
        }
        //--------------------------------- prompt -------------------------------------
        function showBox(txt, cb, tar, isNotOk) {
            if (!_parent)
                return;
            _parent.removeChildren();
            if (!_boxGp) {
                _boxGp = new game.BoxUI();
            }
            _boxGp.setData(txt, function (tag) {
                close();
                if (cb != null)
                    cb.call(tar, tag);
            }, BoxMgr, isNotOk);
            _parent.addChild(_boxGp);
            _txt = txt;
            show();
        }
        BoxMgr.showBox = showBox;
        function showWarmBox(txt) {
            if (!_parent)
                return;
            _parent.removeChildren();
            if (!_warmGp) {
                _warmGp = new game.WarmUI();
            }
            _warmGp.setData(txt, function () {
                close();
            }, BoxMgr);
            _parent.addChild(_warmGp);
            _txt = txt;
            show();
        }
        BoxMgr.showWarmBox = showWarmBox;
        function showEasyWarmBox(txt) {
            if (!_parent)
                return;
            _parent.removeChildren();
            if (!_easyWarmGp) {
                _easyWarmGp = new game.EasyWarmUI();
            }
            _easyWarmGp.setData(txt, function () {
                close();
            }, BoxMgr);
            _txt = txt;
            _parent.addChild(_easyWarmGp);
            show();
        }
        BoxMgr.showEasyWarmBox = showEasyWarmBox;
    })(BoxMgr = game.BoxMgr || (game.BoxMgr = {}));
})(game || (game = {}));
var game;
(function (game) {
    var BoxUI = (function (_super) {
        __extends(BoxUI, _super);
        function BoxUI() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "MsgboxSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        BoxUI.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.tag = 0;
            self.skOk.tag = 1;
            var cb = function (ctrl) {
                var cbData = self._data;
                self.dispose();
                if (cbData.fun) {
                    self._data = null;
                    cbData.fun.call(cbData.tar, ctrl.tag);
                }
            };
            self.skClose.setTarget(cb, self);
            self.skOk.setTarget(cb, self);
            var data = self._data;
            if (data) {
                self.skTxt.textFlow = cui.htmlParser.parse(data.txt);
            }
        };
        BoxUI.prototype.setData = function (txt, cb, tar, isNotOk) {
            var self = this;
            if (self._txt) {
                self.skTxt.textFlow = cui.htmlParser.parse(txt);
                self._data = { fun: cb, tar: tar };
            }
            else {
                self._txt = txt;
                self._data = { fun: cb, tar: tar, txt: txt };
            }
            self.skOk.visible = !isNotOk;
            var ani = self.getOpenAniSelf();
            if (ani)
                self.startAniSelf(ani);
        };
        BoxUI.prototype.getOpenAniSelf = function () {
            var self = this;
            var ani = self._openAniSelf;
            if (!ani) {
                ani = self._openAniSelf = new game.OpenFWAni(self.skGrp);
            }
            return ani;
        };
        BoxUI.prototype.startAniSelf = function (ani, fin, tar) {
            var self = this;
            var wrapper = self._aniWrapSelf;
            if (wrapper) {
                if (wrapper)
                    wrapper.stop();
            }
            else {
                wrapper = self._aniWrapSelf = TRain.WrapperMgr.getWrapper();
            }
            wrapper.ani = ani;
            wrapper.start(fin, tar);
        };
        BoxUI.prototype.dispose = function () {
            var self = this;
            var aniWrap = self._aniWrapSelf;
            if (aniWrap) {
                TRain.WrapperMgr.freeWrapper(aniWrap);
                self._aniWrapSelf = null;
            }
        };
        return BoxUI;
    }(game.UIFullFW));
    game.BoxUI = BoxUI;
    __reflect(BoxUI.prototype, "game.BoxUI");
})(game || (game = {}));
var game;
(function (game) {
    var EasyWarmUI = (function (_super) {
        __extends(EasyWarmUI, _super);
        function EasyWarmUI() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "WarmPrompt1Skin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        EasyWarmUI.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var cb = function (ctrl) {
                var cbData = self._data;
                if (cbData.fun) {
                    self._data = null;
                    cbData.fun.call(cbData.tar);
                }
            };
            self.skTitle.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 905 /* dearPlayer */);
            self.skNotarize.setTarget(cb, self);
            var data = self._data;
            if (data) {
                self.skContent.textFlow = cui.htmlParser.parse(data.txt);
            }
        };
        EasyWarmUI.prototype.setData = function (txt, cb, tar) {
            var self = this;
            if (self._txt) {
                self.skContent.textFlow = cui.htmlParser.parse(txt);
                self._data = { fun: cb, tar: tar };
            }
            else {
                self._txt = txt;
                self._data = { fun: cb, tar: tar, txt: txt };
            }
        };
        return EasyWarmUI;
    }(game.UIFullFW));
    game.EasyWarmUI = EasyWarmUI;
    __reflect(EasyWarmUI.prototype, "game.EasyWarmUI");
})(game || (game = {}));
var game;
(function (game) {
    // type PromptData = {
    //     tp:PropmtShowType,
    //     txt:string,
    //     tm:number,
    //     cantTouch:boolean;
    // }
    var TipsMgr;
    (function (TipsMgr) {
        var _parent; //父窗口
        var _delegate;
        //let _data:PromptData;
        var _promptGp;
        var _timerId;
        var _waitTimeId;
        var _cantTouch;
        var _tm;
        var _txt;
        var _color;
        function init() {
            _timerId = 0;
            _waitTimeId = 0;
            _promptGp = new cui.Component();
            _promptGp.skinName = "TipPromptSkin";
            _promptGp.vCenter = 0;
            _promptGp.hCenter = 0;
            var label = _promptGp.skTxt;
            _color = label.textColor;
        }
        TipsMgr.init = init;
        function setParent(parent, layerDelegate) {
            if (_parent) {
                _parent.removeChild(_promptGp);
                close();
            }
            _parent = parent;
            _delegate = layerDelegate;
            if (parent) {
                parent.addChild(_promptGp);
                if (_txt)
                    show();
            }
        }
        TipsMgr.setParent = setParent;
        function close() {
            _txt = null;
            if (_delegate) {
                _parent.touchEnabled = false;
                _delegate.hideLayer(_parent);
            }
        }
        function show() {
            if (_parent) {
                _parent.touchEnabled = !!_cantTouch;
                if (!_parent.parent)
                    _delegate.showLayer(_parent);
            }
        }
        //--------------------------------- prompt -------------------------------------
        function clear() {
            if (_timerId) {
                TRain.core.rmvDelayDoByID(_timerId);
                _timerId = 0;
            }
            close();
        }
        TipsMgr.clear = clear;
        function clearWait() {
            if (_waitTimeId) {
                TRain.core.rmvFrameDoById(_waitTimeId);
                _waitTimeId = 0;
            }
            close();
        }
        TipsMgr.clearWait = clearWait;
        function updateTm() {
            _tm--;
            if (_tm >= 0) {
                var label = _promptGp.skTxt;
                var str = StringUtil.printf(_txt, _tm);
                label.textFlow = cui.htmlParser.parser(str);
                // label.textColor = UIColor.white;
            }
            else {
                clearWait();
            }
        }
        /**
         *
         * @param txt 文本
         * @param tm 延迟多久关闭
         * @param cantTouch 是否接受用的触摸事件
         */
        function waitPrompt(txt, tm, cantTouch) {
            _cantTouch = cantTouch;
            _tm = tm;
            _txt = txt;
            var label = _promptGp.skTxt;
            label.textColor = _color != 16777215 /* white */ ? _color : 16777215 /* white */;
            if (!_waitTimeId && !!tm) {
                TRain.core.rmvFrameDo(TipsMgr, updateTm);
                var str = StringUtil.printf(_txt, _tm);
                label.textFlow = cui.htmlParser.parser(str);
                _waitTimeId = TRain.core.addFrameDo(updateTm, TipsMgr, false, 1000);
            }
            else {
                label.text = txt;
            }
            show();
        }
        TipsMgr.waitPrompt = waitPrompt;
        function showPrompt(txt, color, tm, cantTouch, size) {
            _cantTouch = cantTouch;
            tm = tm || 5000 /* showTm */;
            _txt = txt;
            if (!_timerId) {
                _timerId = TRain.core.addDelayDo(function () {
                    close();
                    _timerId = 0;
                }, TipsMgr, tm);
            }
            else {
                TRain.core.adjustDelayTmByID(_timerId, tm);
            }
            var label = _promptGp.skTxt;
            if (!color) {
                color = _color != 16777215 /* white */ ? _color : 16777215 /* white */;
            }
            label.size = size || 40;
            label.text = txt;
            label.textColor = color;
            show();
        }
        TipsMgr.showPrompt = showPrompt;
    })(TipsMgr = game.TipsMgr || (game.TipsMgr = {}));
})(game || (game = {}));
var game;
(function (game) {
    var UpDateVer = (function (_super) {
        __extends(UpDateVer, _super);
        function UpDateVer() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "UpdateBoxSkin";
            self.hCenter = 0;
            self.vCenter = 0;
            return _this;
        }
        UpDateVer.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self.skNotUp.setTarget(self.close, self);
            self.skUpdate.setTarget(function () {
                var url = CONF.erweima + CONF.channelId + "/";
                URLUtil.outLayOpenUrl(url);
            }, self);
            var txt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 816 /* UpdateNewVer */);
            self.skTxt.textFlow = cui.htmlParser.parse(txt);
        };
        return UpDateVer;
    }(game.UIPopup));
    game.UpDateVer = UpDateVer;
    __reflect(UpDateVer.prototype, "game.UpDateVer");
})(game || (game = {}));
var game;
(function (game) {
    var WarmUI = (function (_super) {
        __extends(WarmUI, _super);
        function WarmUI() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "WarmPromptSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        WarmUI.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var cb = function (ctrl) {
                var cbData = self._data;
                if (cbData.fun) {
                    self._data = null;
                    cbData.fun.call(cbData.tar);
                }
            };
            self.skTitle.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 905 /* dearPlayer */);
            self.skNotarize.setTarget(cb, self);
            var data = self._data;
            if (data) {
                self.skContent.textFlow = cui.htmlParser.parse(data.txt);
            }
        };
        WarmUI.prototype.setData = function (txt, cb, tar) {
            var self = this;
            if (self._txt) {
                self.skContent.textFlow = cui.htmlParser.parse(txt);
                self._data = { fun: cb, tar: tar };
            }
            else {
                self._txt = txt;
                self._data = { fun: cb, tar: tar, txt: txt };
            }
        };
        return WarmUI;
    }(game.UIFullFW));
    game.WarmUI = WarmUI;
    __reflect(WarmUI.prototype, "game.WarmUI");
})(game || (game = {}));
var game;
(function (game) {
    var NetworkDelay = (function (_super) {
        __extends(NetworkDelay, _super);
        function NetworkDelay() {
            return _super.call(this) || this;
        }
        NetworkDelay.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            game.notifiCenter.addListener("NetWorkDelay" /* NETWORK_DELAY */, self.setNetDelay, self);
            self.setNetDelay(game.dataMgr.networkDelay);
            self.setScOffX();
        };
        //网络延迟
        NetworkDelay.prototype.setNetDelay = function (delay, isRoll) {
            if (isRoll === void 0) { isRoll = false; }
            var self = this;
            var source = "delay@delay5";
            var color = 0xff0000;
            if (delay <= 100) {
                source = "delay@delay1";
                color = 0xffffff;
            }
            else if (delay <= 200) {
                source = "delay@delay2";
                color = 0xffff00;
            }
            else if (delay <= 300) {
                source = "delay@delay3";
                color = 0xff7f00;
            }
            else if (delay <= 3000) {
                source = "delay@delay4";
            }
            self.skDelay.source = source;
            self.skDelayNum.textColor = color;
            if (delay > 3000) {
                self.skDelayNum.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1015 /* timeOutLab */);
            }
            else {
                if (isRoll)
                    game.UIUtils.showRollGold1(delay, self.skDelayNum, self, 300, 600, "", "ms");
                else
                    self.skDelayNum.text = delay + "ms";
            }
        };
        NetworkDelay.prototype.setScOffX = function () {
            var self = this;
            var scOffX = CONF.scOffx;
            if (self.right) {
                self.right += scOffX;
            }
            else {
                self.left += scOffX;
            }
        };
        return NetworkDelay;
    }(cui.Component));
    game.NetworkDelay = NetworkDelay;
    __reflect(NetworkDelay.prototype, "game.NetworkDelay");
})(game || (game = {}));
var game;
(function (game) {
    var ModName = (function (_super) {
        __extends(ModName, _super);
        function ModName() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "modNameSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            self.hideBg = false;
            return _this;
        }
        ModName.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skBack.setTarget(function () {
                self.close();
            }, self);
            self.skCancel.setTarget(function () {
                self.close();
            }, self);
            var accMo = game.dataMgr.accMo;
            var count = accMo.getVal("updateNicknameCount");
            var nickname = accMo.getVal("nickname");
            //self.skName.prompt = accData.nickname;
            self.skName.addEventListener(egret.Event.CHANGE, self.OnAccount, self);
            self.skName.maxChars = 6;
            self.skName.addEventListener(egret.Event.FOCUS_IN, self.onFocus1, self);
            self.skFirstLab.visible = count <= 0;
            self.skSecondGp.visible = count > 0;
            self.skGold.text = game.DataFormat.convertYuanString(500 /* modifyNicknameCost */, true);
            self.skName.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 298 /* ChangeNameTip */);
            self.skSure.setTarget(function () {
                var name = self.skName.text;
                if (name.length == 0) {
                    var view = new game.PersonCenter();
                    game.gameScene.openPopup(view);
                    self.close();
                    var tips = TRain.langMgr.getTxt("mainLang" /* mainLang */, 299 /* NameNotNull */);
                    // TipsMgr.showPrompt(tips);
                    game.MsgBox.showTipBox(false, 299 /* NameNotNull */, "mainLang" /* mainLang */, tips);
                }
                else if (name == nickname) {
                    var tips = TRain.langMgr.getTxt("mainLang" /* mainLang */, 701 /* TwoNameSame */); //新名字与旧名字相同
                    // TipsMgr.showPrompt(tips);
                    game.MsgBox.showTipBox(false, 701 /* TwoNameSame */, "mainLang" /* mainLang */, tips);
                }
                else {
                    var count_1 = accMo.getData().updateNicknameCount;
                    var curGold = accMo.getData().gold;
                    if (count_1 == 0) {
                        game.dataMgr.accMo.changeNickName(name);
                    }
                    else if (curGold < 500 /* modifyNicknameCost */) {
                        var tip = TRain.langMgr.getTxt("mainLang" /* mainLang */, 515 /* GoldIsNotEnough */);
                        // TipsMgr.showPrompt(tip); 
                        game.MsgBox.showTipBox(false, 515 /* GoldIsNotEnough */, "mainLang" /* mainLang */, tip);
                    }
                    else {
                        game.dataMgr.accMo.changeNickName(name);
                    }
                }
                self.close();
            }, self);
        };
        ModName.prototype.onFocus1 = function (e) {
            this.skName.text = "";
        };
        ModName.prototype.OnAccount = function (e) {
            var self = this;
            var inputText = e.target.text;
            //  let str = game.DataFormat.CheckStringLength(inputText);
            //  let len = str[0];
            //  let chaLen = str[1] > 6 ? 6: str[1];
            //  if(len > 12){
            // let firstIdx:number = 12 - chaLen;
            //inputText = inputText.substring(0,6);
            //   }
            self.skName.text = inputText;
        };
        return ModName;
    }(game.UIPopup));
    game.ModName = ModName;
    __reflect(ModName.prototype, "game.ModName");
})(game || (game = {}));
var game;
(function (game) {
    var PersonCenter = (function (_super) {
        __extends(PersonCenter, _super);
        function PersonCenter(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.bgClose = true;
            self.hideBg = false;
            self.skinName = "pCenterSkin";
            self._iconArr = ["limit_nan_s1", "limit_nv_s1", "nan_1", "nan_2", "nan_3", "nan_4", "nan_5",
                "nv_1", "nv_2", "nv_3", "nv_4", "nv_5"];
            self._dataArr = [];
            self._isHaveTag = false;
            self._index = 0;
            self._cenOpenData = data;
            return _this;
        }
        PersonCenter.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skBack.setTarget(function () {
                self.close();
            }, self);
            var accMo = game.dataMgr.accMo;
            var accData = accMo.getData();
            if (accData.acctype == "wechat" /* wechat */) {
                self._iconArr.push(accData.wechat_headimg);
            }
            accMo.addPropListener("icon_custom", self.updateHead, self);
            accMo.addPropListener("viplvl", self.updateHead, self);
            // if(accData.nickname.length > 12){
            //     self.skName.text = accData.nickname.substr(0,12) + "...";
            // }else{
            //     self.skName.text = accData.nickname;
            // }
            self.skName.text = game.DataFormat.formatName(accData.nickname, 12, 12);
            self.skId.text = accData.aid.toString();
            self.skGold.text = game.DataFormat.convertYuanString2(accData.gold, true);
            self.skUpCode.icon = accData.isFormal ? "pCenter@upCode1" : "pCenter@upCode";
            self.skUpCode.touchEnabled = !accData.isFormal;
            if (accData.isFormal) {
                // self.skUpCode.icon = "pCenter@upCode1";
                if (accData.bindphone) {
                    self.skCode.text = accData.bindphone;
                }
                else {
                    self.skCode.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 898 /* bindAccount */);
                }
            }
            else {
                // self.skUpCode.visible = true;
                self.skCode.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 897 /* touristAccount */);
            }
            //去掉运营商
            var ip = accData.ipinfo.split(" ")[0];
            self.skAddresss.text = ip;
            self.skIconFrame.source = game.dataMgr.accMo.isApi ? "apiHead@old" /* oldFrameApi */ : "head@old" /* oldFrame */ + accData.viplvl;
            var curIcon = self._curIcon = accData.icon_custom;
            self.skIconImg.source = game.DataFormat.getHeadIcon(curIcon);
            self.skMenuBtn.setTarget(self.menuClick, self);
            self.skMenuBtn.selectTag = self._cenOpenData ? self._cenOpenData.type : 0;
            self.skLeftbtn.setTarget(self.clickBtn, self);
            self.skRightbtn.setTarget(self.clickBtn, self);
            if (!game.dataMgr.accMo.isApi) {
                self.skMod.setTarget(function () {
                    game.gameScene.openPopup(new game.ModName());
                    self.close();
                }, self);
            }
            else {
                self.skMod.visible = false;
            }
            self.skHelp.setTarget(function () {
                self.openHelp(1);
            }, self);
            self.skHelp.visible = !game.dataMgr.accMo.isApi;
            self.skInfoRule.setTarget(function () {
                self.openHelp(2);
            }, self);
            self.skCopyId.setTarget(function () {
                var tip = TRain.langMgr.getTxt("mainLang" /* mainLang */, 539 /* CopySuccess */);
                // TipsMgr.showPrompt(tip, UIColor.orange);
                game.MsgBox.showTipBox(false, 539 /* CopySuccess */, "mainLang" /* mainLang */, tip, 15648323 /* orange */);
                URLUtil.copyText(String(accData.aid));
            }, self);
            self.skUpCode.setTarget(function () {
                var view = new game.Registered();
                view.setData(true);
                game.gameScene.openPopup(view);
                self.close();
            }, self);
            self.skAdd.setTarget(function () {
                if (game.dataMgr.generalMo.isFunOpen(7 /* shop */)) {
                    game.gameScene.showHallUI(2 /* shop */);
                    self.close();
                }
            }, self);
            var list = self.skList;
            list.itemRender = game.HeadTile;
            list.itemSkinName = "pcItemSkin";
            list.dataProvider = self._dataPro = new cui.ArrayCollection();
            list.addEventListener("item_tap" /* ITEM_TAP */, function (e) {
                var icon = e.data.ud;
                var curMk = e.data.data.mk;
                if (!icon || icon == self._curIcon) {
                    var tips = TRain.langMgr.getTxt("mainLang" /* mainLang */, 544 /* NeedNewHead */);
                    // TipsMgr.showPrompt(tips);
                    game.MsgBox.showTipBox(false, 544 /* NeedNewHead */, "mainLang" /* mainLang */, tips);
                    return;
                }
                if (curMk)
                    return;
                game.dataMgr.accMo.changeHead(icon);
            }, self);
            var actList = self.skActs;
            actList.itemRender = ActItemView;
            actList.dataProvider = self._actPro = new cui.ArrayCollection();
            var infoList = self.skInfos;
            infoList.itemRender = InfoItemView;
            infoList.dataProvider = self._reawrdPro = new cui.ArrayCollection();
            self.initConf();
            //let generalMo = dataMgr.generalMo;
            game.dataMgr.accMo.addListener("GetVipInfoResult" /* GetVipInfoResult */, self.vipInfoResult, self);
            game.dataMgr.accMo.addListener("GetVipActivityResult" /* GetVipActivityResult */, self.updateVipActivity, self);
            //dataMgr.accMo.addListener(AccountMo_EVT.update_ip_info, self.updateIpInfo, self);
            if (accMo.isApi)
                self.showApiBtn();
        };
        PersonCenter.prototype.showApiBtn = function () {
            var self = this;
            var accMo = game.dataMgr.accMo;
            var generalMo = game.dataMgr.generalMo;
            var isApi = accMo.isApi;
            if (isApi) {
                self.skAdd.visible = generalMo.isFunOpen(7 /* shop */);
                var isActOpen = generalMo.isFunOpen(10 /* activity */);
                self.skUpCode.visible = self.skVipScr.visible = isActOpen;
                self.skLeftbtn.visible = self.skRightbtn.visible = isActOpen;
                var menuBtn = self.skMenuBtn;
                if (!isActOpen) {
                    var vipChild = menuBtn.getChildAt(1);
                    var infoChild = menuBtn.getChildAt(3); //账户信息
                    var headChild = menuBtn.getChildAt(2); //头像
                    headChild.y = vipChild.y;
                    vipChild.visible = infoChild.visible = isActOpen;
                }
            }
        };
        PersonCenter.prototype.clickBtn = function (item) {
            var self = this;
            var tag = item.tag;
            //获取当前的值
            var curIdx = self._index;
            var maxIdx = self._actPro.source.length - 3;
            if (tag == 0) {
                if (curIdx > 0) {
                    curIdx--;
                    self._index = curIdx;
                    self.skVipScr.showTableInViewStart(curIdx, false);
                }
            }
            else {
                if (curIdx < maxIdx) {
                    curIdx++;
                    self._index = curIdx;
                    self.skVipScr.showTableInViewStart(curIdx, false);
                }
            }
        };
        // public updateIpInfo(ipInfo:string){
        //     this.skAddresss.text = ipInfo;
        // }
        PersonCenter.prototype.initConf = function () {
            var self = this;
            var mgr = TRain.langMgr;
            var lang = "mainLang" /* mainLang */;
            for (var i = 0; i < 7; i++) {
                var langCnt = 798 /* vipRewardTip1 */ + i;
                (self["skTxt" + (i + 1)]).text = mgr.getTxt(lang, langCnt);
            }
        };
        PersonCenter.prototype.openHelp = function (rid) {
            var self = this;
            game.GameUtil.playClickSound();
            var view = self._helpView;
            if (view == undefined) {
                view = new helpView();
            }
            view.updateRule(rid);
            game.gameScene.openPopup(view, null, true);
        };
        // public getMainMutiTxt(index: langConsts.mainLang): string {
        // 	return TRain.langMgr.getTxt(LangGrp.mainLang, index);
        // }
        PersonCenter.prototype.updateHead = function () {
            var self = this;
            var accModel = game.dataMgr.accMo;
            var accData = accModel.getData();
            var icon = self._curIcon = accData.icon_custom;
            //获取当前头像
            self.skIconImg.source = game.DataFormat.getHeadIcon(icon);
            self.skIconFrame.source = game.dataMgr.accMo.isApi ? "apiHead@old" /* oldFrameApi */ : "head@old" /* oldFrame */ + accData.viplvl;
            for (var i = 0; i < self._dataArr.length; i++) {
                var data = self._dataArr[i];
                data.sel = data.ud == icon;
            }
            self._dataPro.source = self._dataArr;
        };
        PersonCenter.prototype.initIcons = function () {
            var self = this;
            var iconArr = self._dataArr = [];
            var iconStrs = self._iconArr;
            var accMo = game.dataMgr.accMo;
            var isApi = accMo.isApi;
            var icon = accMo.getData().icon_custom;
            for (var i = 0, len = iconStrs.length; i < len; i++) {
                var iconStr = iconStrs[i];
                if (isApi && (iconStr == "limit_nan_s1" || iconStr == "limit_nv_s1")) {
                    self._isHaveTag = true;
                    continue;
                }
                var data = { sel: false, mk: false, lab: "" };
                if (iconStr.indexOf("http") != -1) {
                    data.icon = game.resMgr.getNoHomeUrl(iconStr);
                    data.ud = iconStr;
                }
                else {
                    data.icon = "head@" /* head */ + iconStr;
                    data.ud = "head_" + iconStr + ".png";
                }
                data.tag = i;
                if (self.isLock(iconStr)) {
                    data.mk = true;
                    data.lab = TRain.langMgr.getTxt("mainLang" /* mainLang */, 686 /* shareOpenLock */);
                }
                else {
                    if (i == 0 || i == 1) {
                        var time1 = game.dataMgr.accMo.getData().limit_time_photo;
                        var time2 = TimeUtil.getSvrSec();
                        var countTime = (time1 - time2) * 1000;
                        var dataTm = TimeUtil.getHourMinSec(countTime);
                        data.lab = dataTm.hour + ":" + dataTm.min + ":" + dataTm.sec;
                    }
                    if (!self._isHaveTag) {
                        self._tagTm = TRain.core.addFrameDo(self.showIcontTxt, self, false, 1000);
                        self._isHaveTag = true;
                    }
                }
                data.ud = "head_" + iconStr + ".png";
                if (icon == data.ud)
                    data.sel = true;
                iconArr.push(data);
            }
            self._dataPro.source = iconArr;
        };
        PersonCenter.prototype.showIcontTxt = function () {
            var self = this;
            var dataArr = self._dataArr;
            for (var i = 0, len = dataArr.length; i < len; i++) {
                var data = dataArr[i];
                if (i == 0 || i == 1) {
                    var time1 = game.dataMgr.accMo.getData().limit_time_photo;
                    var time2 = TimeUtil.getSvrSec();
                    var countTime = (time1 - time2) * 1000;
                    var dataTm = TimeUtil.getHourMinSec(countTime);
                    data.lab = dataTm.hour + ":" + dataTm.min + ":" + dataTm.sec;
                    var icon = game.dataMgr.accMo.getData().icon_custom;
                    if (countTime <= 0) {
                        // if (icon == "head_limit_nan_s1" || icon == "head_limit_nv_s1") {
                        //     dataMgr.accMo.changeHead(icon);
                        // }
                        data.sel = false;
                        data.mk = true;
                        data.lab = TRain.langMgr.getTxt("mainLang" /* mainLang */, 686 /* shareOpenLock */);
                        TRain.core.rmvFrameDoById(self._tagTm);
                    }
                }
                self._dataPro.itemUpdated(data);
            }
        };
        PersonCenter.prototype.isLock = function (iconStr) {
            var accModel = game.dataMgr.accMo;
            var accData = accModel.getData();
            var limitTime = accData.limit_time_photo;
            //拿到当前时间戳 和 服务器时间戳去进行比较 
            var tm = TimeUtil.getSvrSec();
            if (iconStr == "limit_nan_s1" || iconStr == "limit_nv_s1") {
                return tm > limitTime;
            }
            else {
                return false;
            }
        };
        PersonCenter.prototype.menuClick = function (item) {
            var self = this;
            game.GameUtil.playClickSound();
            var tag = item.tag;
            var bg = self.skInfoBG;
            if (tag == 0) {
                self.skVipGroup.visible = false;
                self.skHeadScr.visible = false;
                if (self.skHeadInfoBg)
                    self.skHeadInfoBg.visible = false;
                self.skInfoGrp.visible = false;
                self.skUserGrp.visible = true;
            }
            else if (tag == 1) {
                bg.source = "pCenterbg1";
                self.skVipGroup.visible = true;
                self.skHeadScr.visible = false;
                if (self.skHeadInfoBg)
                    self.skHeadInfoBg.visible = false;
                self.skInfoGrp.visible = false;
                self.skUserGrp.visible = false;
                game.dataMgr.accMo.askVipInfo();
                game.dataMgr.accMo.askVipAcInfo();
            }
            else if (tag == 2) {
                bg.source = "pCenterbg2";
                self.skVipGroup.visible = false;
                self.skHeadScr.visible = true;
                if (self.skHeadInfoBg)
                    self.skHeadInfoBg.visible = true;
                self.skInfoGrp.visible = false;
                self.skUserGrp.visible = false;
                self.initIcons();
            }
            else if (tag == 3) {
                bg.source = "pCenterbg2";
                self.skVipGroup.visible = false;
                self.skHeadScr.visible = false;
                if (self.skHeadInfoBg)
                    self.skHeadInfoBg.visible = false;
                self.skInfoGrp.visible = true;
                self.skUserGrp.visible = false;
                game.dataMgr.accMo.askRewardInfo();
            }
        };
        PersonCenter.prototype.vipInfoResult = function (data, isVip) {
            var self = this;
            if (isVip) {
                self.updataVipInfo(data);
            }
            else {
                self.updateVipReawrd(data);
            }
        };
        PersonCenter.prototype.updataVipInfo = function (data) {
            var self = this;
            var vipexp = data.vipexp;
            var viplv = data.viplv;
            self.skLeftlab.text = viplv.toString();
            self.skRightlab.text = (viplv + 1).toString();
            var vipAllExp = 0;
            var faq = game.dataMgr.generalMo.getVipProfit();
            for (var i in faq) {
                if (faq[i].VipLv == viplv) {
                    vipAllExp = faq[i].VipExp;
                }
            }
            // self.skIconFrame.source = confConsts.ComResTp.oldFrame + viplv;
            // let accData = dataMgr.accMo.getData();
            //    self.skIconFrame.source = confConsts.ComResTp.oldFrame + accData.viplvl;
            self.skBarLabel.text = Math.floor(vipexp / 100) + "/" + vipAllExp / 100;
            if (vipAllExp / vipexp >= 10 && vipexp != 0) {
                self.skBar.setProgressValue(1 / 10, 1000);
            }
            else {
                self.skBar.setProgressValue(vipexp / vipAllExp, 1000);
            }
        };
        PersonCenter.prototype.updateVipActivity = function (data) {
            var self = this;
            var actData = [];
            var lists = data.ac_list;
            if (lists) {
                lists.sort(function (a, b) {
                    return b.indexSort - a.indexSort;
                });
            }
            if (lists && lists.length > 2) {
                for (var _i = 0, lists_1 = lists; _i < lists_1.length; _i++) {
                    var key = lists_1[_i];
                    actData.push({ parent: self, data: key });
                }
            }
            else {
                for (var i = 0; i < 3; i++) {
                    if (lists && lists[i]) {
                        actData[i] = { parent: self, data: lists[i] };
                    }
                    else {
                        var info = {
                            Uid: -1,
                            Tid: -1,
                            Title: ""
                        };
                        actData.push({ parent: self, data: info });
                    }
                }
            }
            self._actPro.source = actData;
        };
        PersonCenter.prototype.updateVipReawrd = function (data) {
            var self = this;
            self.skInfoSc.visible = false;
            self.skInfoNone.visible = true;
            if (data) {
                self.skAllAward.text = game.DataFormat.convertYuanString2(data.ac_reward, true);
                self.skAllGold.text = game.DataFormat.convertYuanString2(data.ac_per, true);
                if (!data.ac_per_cur || data.ac_per_cur <= 0) {
                    self.skCurGold.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 806 /* vipExpCanPop */);
                }
                else {
                    self.skCurGold.text = game.DataFormat.convertYuanString4(data.ac_per_cur, 10000, true);
                }
                if (data.log_list) {
                    var obj = [];
                    for (var i = 0; i < data.log_list.length; i++) {
                        var reward = data.log_list[i];
                        obj.push({ index: i, data: reward, tm: reward.ts });
                    }
                    obj.sort(function (a, b) {
                        return b.tm - a.tm;
                    });
                    self._reawrdPro.source = obj;
                    if (obj.length > 0) {
                        self.skInfoSc.visible = true;
                        self.skInfoNone.visible = false;
                    }
                }
            }
        };
        PersonCenter.prototype.onDispose = function () {
            _super.prototype.onDispose.call(this);
            game.dataMgr.generalMo.rmvListener("GetVipInfoResult" /* GetVipInfoResult */, self);
        };
        return PersonCenter;
    }(game.UIPopup));
    game.PersonCenter = PersonCenter;
    __reflect(PersonCenter.prototype, "game.PersonCenter");
    var helpView = (function (_super) {
        __extends(helpView, _super);
        function helpView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "helpViewSkin";
            return _this;
        }
        helpView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
        };
        helpView.prototype.updateRule = function (rid) {
            var self = this;
            var helpConfs = game.dataMgr.generalMo.getHelpView();
            var maxHeight = 0;
            self.skTitle.source = "pCenter@txt_help" + rid;
            self.skGrp.removeChildren();
            for (var key in helpConfs) {
                var helpConf = helpConfs[key];
                if (helpConf.rid == rid) {
                    if (helpConf.isImage) {
                        var img = new cui.Image();
                        img.source = helpConf.text;
                        img.x = helpConf.x;
                        img.y = helpConf.y;
                        self.skGrp.addChild(img);
                        if (maxHeight < img.y)
                            maxHeight = img.y;
                    }
                    else {
                        var lab = new cui.Label();
                        lab.textFlow = cui.htmlParser.parser(helpConf.text);
                        lab.x = helpConf.x;
                        lab.y = helpConf.y;
                        var size = lab.size = helpConf.size;
                        self.skGrp.addChild(lab);
                        if (maxHeight < lab.y)
                            maxHeight = lab.y;
                    }
                }
            }
            self.skGrp.setContentSize(self.skGrp.width, maxHeight + 40);
        };
        return helpView;
    }(game.UIPopup));
    game.helpView = helpView;
    __reflect(helpView.prototype, "game.helpView");
    var ActItemView = (function (_super) {
        __extends(ActItemView, _super);
        function ActItemView() {
            var _this = _super.call(this) || this;
            _this.skinName = "pcVipItemSkin";
            return _this;
        }
        ActItemView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
        };
        ActItemView.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var parent = self.data.parent;
            var data = self.data.data;
            if (data.Tid == -1) {
                self.skNone.visible = true;
                self.skWait.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 805 /* vipExpWaitTip */);
                self.skGrp.visible = false;
            }
            else {
                self.skNone.visible = false;
                self.skGrp.visible = true;
                self.skImg.source = "pCenter@txt_act" + data.Tid;
                self.skName.text = data.Title;
                self.skEnter.setTarget(function () {
                    game.GameUtil.playClickSound();
                    game.gameScene.showHallUI(8 /* activity */, { tp: 0, state: 1 /* hall */, uid: data.Uid });
                    parent.close();
                }, self);
            }
        };
        return ActItemView;
    }(cui.DataItem));
    __reflect(ActItemView.prototype, "ActItemView");
    var InfoItemView = (function (_super) {
        __extends(InfoItemView, _super);
        function InfoItemView() {
            var _this = _super.call(this) || this;
            _this.skinName = "infoItemSkin";
            return _this;
        }
        InfoItemView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
        };
        InfoItemView.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var index = self.data.index;
            if (index % 2 == 0) {
                self.skBg.visible = false;
            }
            else {
                self.skBg.visible = true;
            }
            var data = self.data.data;
            self.skTs.text = TimeUtil.formatTsStr(data.ts);
            self.skGame.text = data.Title;
            self.skAward.text = game.DataFormat.convertYuanString2(data.reward, true);
            self.skGold.text = game.DataFormat.convertYuanString2(data.per, true);
        };
        return InfoItemView;
    }(cui.DataItem));
    __reflect(InfoItemView.prototype, "InfoItemView");
})(game || (game = {}));
var game;
(function (game) {
    var Chat = (function (_super) {
        __extends(Chat, _super);
        function Chat() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.isMsgOpen = false;
            // self.skinName = "ChatSkin";
            self._messAges = [];
            self._soundOpen = false;
            self._receiverOpen = false;
            self._sendState = false;
            self._recvState = false;
            self._sendNum = 0;
            self._recvNum = 0;
            return _this;
        }
        Chat.prototype.initChatSys = function (data) {
            var self = this;
            self._headGrp = data.headGrp;
            self._curPlayId = data.playId;
            ChatClient.init(data.chatUrl, data.playId, data.roomId, data.sign);
            if (MediaClient.isSupport()) {
                MediaClient.init(data.mediaUrl, data.playId, data.roomId, data.sign);
            }
        };
        Chat.prototype.closeChatSys = function () {
            ChatClient.close();
            if (MediaClient.isSupport()) {
                MediaClient.close();
            }
        };
        Chat.prototype.addHeadGrp = function (head) {
            var self = this;
            self._headGrp.push(head);
        };
        Chat.prototype.rmvHeadGrp = function (head) {
            var self = this;
            for (var i = 0, len = self._headGrp.length; i < len; i++) {
                var curHead = self._headGrp[i];
                if (curHead.playid == head.playid) {
                    self._headGrp.splice(i, 1);
                    break;
                }
            }
        };
        Chat.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skGrpChat.visible = false;
            self.touchEnabled = true;
            self.touchThrough = true;
            var emojiList = self.skEmojiList;
            emojiList.itemRender = game.ItemTile;
            emojiList.itemSkinName = "ChatEmojiSkin";
            emojiList.dataProvider = self._emojiPro = new cui.ArrayCollection();
            var textList = self.skTextList;
            textList.itemRender = game.HeadTile;
            textList.itemSkinName = "ChatTextSkin";
            textList.dataProvider = self._textPro = new cui.ArrayCollection();
            var hisList = self.skHisList;
            hisList.itemRender = ChatHisItem;
            hisList.dataProvider = self._hisPro = new cui.ArrayCollection();
            self.skInputMsg.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1004 /* chatLimitNum */);
            self.skInputMsg.maxChars = 20;
            self.initEmoji();
            self.initText();
            self.skBtnMsg.setTarget(self.onClickMsg, self);
            self.skBtnSend.setTarget(self.onSendMsg, self);
            self.skGrp.setTarget(self.setMenuBtn, self);
            self.skGrp.selectTag = 0;
            // chatClient.on(chatClient.ChatEventType.Send,self.sendTextBack,self);
            ChatClient.on(ChatClient.ChatEventType.Message, self.messAgeBack, self);
            MediaClient.on(MediaClient.MediaEventType.ConnectStatus, self.upMediaState, self);
            self.skSoundBtn.setTarget(self.updateState, self);
            self.skReceiver.setTarget(self.updateState, self);
            self.skSoundBtn.icon = self._soundOpen ? "gameChat@sound" : "gameChat@no_sound";
            self.skReceiver.icon = self._receiverOpen ? "gameChat@receiver" : "gameChat@no_receiver";
            var isSupport = MediaClient.isSupport();
            self.skSendImg.source = (isSupport && self._sendState) ? "gameChat@greenPoint" : "gameChat@redPoint";
            self.skRecImg.source = (isSupport && self._recvState) ? "gameChat@greenPoint" : "gameChat@redPoint";
        };
        Chat.prototype.updateState = function (item) {
            var self = this;
            var tag = item.tag;
            var isSupport = MediaClient.isSupport();
            if (tag == 0) {
                var curSound = self._soundOpen;
                self.skSoundBtn.icon = !curSound ? "gameChat@sound" : "gameChat@no_sound";
                self._soundOpen = !curSound;
                if (isSupport) {
                    MediaClient.setEnableMic(self._soundOpen);
                }
                else {
                    game.MsgBox.showTipBox(false, 1017 /* noSupportEquipMent */, "mainLang" /* mainLang */);
                }
                if (self._sendTag) {
                    TRain.core.rmvFrameDoById(self._sendTag);
                    self._sendTag = 0;
                    self._sendNum = 0;
                }
                self._sendTag = TRain.core.addFrameDo(function () {
                    if (self._sendNum > 2) {
                        TRain.core.rmvFrameDoById(self._sendTag);
                        self._sendTag = 0;
                        self._sendNum = 0;
                    }
                    else {
                        game.UIUtils.flashAni(self.skSendImg, 0, 150);
                        self._sendNum++;
                    }
                }, self, false, 300);
            }
            else {
                var curReceiver = self._receiverOpen;
                self.skReceiver.icon = !curReceiver ? "gameChat@receiver" : "gameChat@no_receiver";
                self._receiverOpen = !curReceiver;
                if (isSupport) {
                    MediaClient.setEnableAudio(self._receiverOpen);
                }
                else {
                    game.MsgBox.showTipBox(false, 1017 /* noSupportEquipMent */, "mainLang" /* mainLang */);
                }
                if (self._recvTag) {
                    TRain.core.rmvFrameDoById(self._recvTag);
                    self._recvTag = 0;
                    self._recvNum = 0;
                }
                self._recvTag = TRain.core.addFrameDo(function () {
                    if (self._recvNum > 2) {
                        TRain.core.rmvFrameDoById(self._recvTag);
                        self._recvTag = 0;
                        self._recvNum = 0;
                    }
                    else {
                        game.UIUtils.flashAni(self.skRecImg, 0, 150);
                        self._recvNum++;
                    }
                }, self, false, 300);
            }
        };
        Chat.prototype.upMediaState = function (name, status) {
            var self = this;
            if (name == "init" /* sendinit */ && status == "error" /* senderror */) {
                var jsAppVer = CONF.appVer;
                if (CONF.isNative && jsAppVer <= 1020071) {
                    game.MsgBox.showTipBox(false, 1026 /* inatallNewProgram */, "mainLang" /* mainLang */);
                    return;
                }
            }
            if (name == "send" /* send */) {
                self._sendState = status == "connected" /* conn */ || status == "completed" /* completed */;
                self.skSendImg.source = self._sendState ? "gameChat@greenPoint" : "gameChat@redPoint";
            }
            else if (name == "recv" /* recv */) {
                self._recvState = status == "connected" /* conn */ || status == "completed" /* completed */;
                self.skRecImg.source = self._recvState ? "gameChat@greenPoint" : "gameChat@redPoint";
            }
        };
        Chat.prototype.messAgeBack = function (messages) {
            var self = this;
            self._messAges = self._messAges.concat(messages);
            if (messages.length == 1) {
                var message = messages[0];
                if (message.info.indexOf('@') != -1) {
                    game.notifiCenter.postEvent("send_emoji" /* SEND_EMOJI */, message);
                }
                else {
                    game.notifiCenter.postEvent("send_text" /* SEND_TEXT */, message);
                }
            }
            self.updateMsg();
        };
        Chat.prototype.updateMsg = function () {
            var self = this;
            var messAges = self._messAges;
            var messageArr = [];
            for (var i = 0, len = messAges.length; i < len; i++) {
                var messAge = messAges[i];
                var curHeadGrp = self.getHeadData(messAge.senderId);
                if (curHeadGrp) {
                    var showData = {
                        isSelfId: self._curPlayId == messAge.senderId,
                        head: curHeadGrp.head,
                        info: messAge.info,
                    };
                    messageArr.push(showData);
                }
            }
            self._hisPro.source = messageArr;
            self.skScroll2.showTableInViewStart(messageArr.length - 1, false);
        };
        Chat.prototype.getHeadData = function (playId) {
            var self = this;
            if (self._headGrp) {
                for (var i = 0, len = self._headGrp.length; i < len; i++) {
                    var headGrp = self._headGrp[i];
                    if (headGrp.playid == playId) {
                        return headGrp;
                    }
                }
            }
        };
        Chat.prototype.initEmoji = function () {
            var self = this;
            var showArr = [];
            for (var i = 1; i < 30 /* max */; i++) {
                showArr.push({ icon: "emoticon@" /* emoji */ + i, handle: self, tag: i });
            }
            self._emojiPro.source = showArr;
        };
        Chat.prototype.initText = function () {
            var self = this;
            var showArr = [];
            for (var i = 1005 /* chatLab0 */; i <= 1012 /* chatLab7 */; i++) {
                var txt = TRain.langMgr.getTxt("mainLang" /* mainLang */, i);
                showArr.push({ lab: txt, handle: self, tag: i });
            }
            self._textPro.source = showArr;
        };
        Chat.prototype.clickBtn = function (item) {
            var self = this;
            var tag = item.tag;
            if (tag > 30 /* max */) {
                ChatClient.sendTextMessage(item.skLab.text);
            }
            else {
                ChatClient.sendTextMessage("emoticon@" /* emoji */ + tag);
            }
            self.onClickMsg();
        };
        Chat.prototype.setMenuBtn = function (item) {
            var self = this;
            var tag = item.tag;
            if (true)
                console.log('tag=' + tag);
            for (var i = 0; i < 3; i++) {
                if (tag == i) {
                    self['skScroll' + i].visible = true;
                }
                else {
                    self['skScroll' + i].visible = false;
                }
            }
            if (tag == 2) {
                self.updateMsg();
            }
        };
        Chat.prototype.onClickMsg = function () {
            var self = this;
            self.skGrpChat.visible = !self.isMsgOpen;
            self.isMsgOpen = !self.isMsgOpen;
            self.skInputMsg.text = "";
        };
        Chat.prototype.onSendMsg = function () {
            var self = this;
            var text = self.skInputMsg.text;
            if (text != "") {
                if (true) {
                    console.log('msg=' + text);
                }
                ChatClient.sendTextMessage(text);
            }
            self.onClickMsg();
        };
        Chat.prototype.dispose = function () {
            var self = this;
            if (self._sendTag) {
                TRain.core.rmvFrameDoById(self._sendTag);
                self._sendTag = 0;
                self._sendNum = 0;
            }
            if (self._recvTag) {
                TRain.core.rmvFrameDoById(self._recvTag);
                self._recvTag = 0;
                self._recvNum = 0;
            }
            _super.prototype.dispose.call(this);
        };
        return Chat;
    }(cui.Component));
    game.Chat = Chat;
    __reflect(Chat.prototype, "game.Chat");
    var ChatHisItem = (function (_super) {
        __extends(ChatHisItem, _super);
        function ChatHisItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "ChatHisSkin";
            return _this;
        }
        ChatHisItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            var isSelfId = data.isSelfId;
            self.skLeftGrp.visible = !isSelfId;
            self.skRightGrp.visible = isSelfId;
            var info = data.info;
            var head = game.DataFormat.getHeadIcon(data.head);
            var isEmoji = info.indexOf("@") != -1;
            if (isSelfId) {
                self.skRightHead.source = head;
                self.skRightEmoji.visible = isEmoji;
                self.skRightLabGrp.visible = !isEmoji;
                if (isEmoji) {
                    self.skRightEmoji.source = info;
                }
                else {
                    self.skRightLab.text = info;
                }
            }
            else {
                self.skLeftHead.source = head;
                self.skLeftEmoji.visible = isEmoji;
                self.skLeftLabGrp.visible = !isEmoji;
                if (isEmoji) {
                    self.skLeftEmoji.source = info;
                }
                else {
                    self.skLeftLab.text = info;
                }
            }
        };
        return ChatHisItem;
    }(cui.DataItem));
    game.ChatHisItem = ChatHisItem;
    __reflect(ChatHisItem.prototype, "game.ChatHisItem");
})(game || (game = {}));
var ChatClient;
(function (ChatClient) {
    var ChatEventType;
    (function (ChatEventType) {
        ChatEventType[ChatEventType["Send"] = 0] = "Send";
        ChatEventType[ChatEventType["StartRecord"] = 1] = "StartRecord";
        ChatEventType[ChatEventType["FinishRecord"] = 2] = "FinishRecord";
        ChatEventType[ChatEventType["Message"] = 3] = "Message";
    })(ChatEventType = ChatClient.ChatEventType || (ChatClient.ChatEventType = {}));
    var _connectUrl;
    var _autoConnected = false;
    var _socket;
    var _lastClientId = 0;
    var _lastServerId = 0;
    var _handles = {};
    var _sendTasks = new Array();
    var _curTask;
    var _sendTar;
    var _sendCb;
    var _messageTar;
    var _messageCb;
    var _startRecordTar;
    var _startRecordCb;
    var _saveRecordDatas = [];
    var _finishRecordTar;
    var _finishRecordCb;
    var _playRecordTask;
    var _webUserMediaInited = false;
    var _webRecording = false;
    var _webSoundDuration = 0;
    var _webAudioContext;
    var _webSoundSource;
    var _webSoundProcessor;
    var _webMp3Encoder = null;
    var _webSoundChunks = [];
    function init(hostName, playerId, roomId, sign) {
        if (!_socket) {
            _socket = new egret.WebSocket();
            _socket.type = egret.WebSocket.TYPE_STRING;
            _socket.addEventListener(egret.Event.CONNECT, onConnected, this);
            _socket.addEventListener(egret.Event.CLOSE, onClose, this);
            _socket.addEventListener(egret.ProgressEvent.SOCKET_DATA, onData, this);
            addHandle(chatProtocols.type.s2cSendMessageResultType, s2cSendMessageResultHandler);
            addHandle(chatProtocols.type.s2cFillMessageResultType, s2cFillMessageResultHandler);
            addHandle(chatProtocols.type.s2cBcMessageType, s2cBcMessageHandler);
        }
        _lastClientId = 0;
        _lastServerId = 0;
        _connectUrl = hostName + "?playerId=" + playerId + "&roomId=" + roomId + "&sign=" + sign;
        _autoConnected = true;
        if (_socket.connected) {
            _socket.close();
        }
        else {
            startConnect();
        }
    }
    ChatClient.init = init;
    function close() {
        _autoConnected = false;
        _sendTasks = [];
        _handles = {};
        if (_socket) {
            _socket.close();
            _socket = null;
        }
    }
    ChatClient.close = close;
    function sendTextMessage(info) {
        var task = new ChatClient.SendTask();
        var clientId = getClientId();
        task.init(clientId, info);
        _sendTasks.push(task);
        runTask();
        return clientId;
    }
    ChatClient.sendTextMessage = sendTextMessage;
    function sendRecordMessage(recordId) {
        var task = new ChatClient.SendTask();
        var clientId = getClientId();
        var recordData = findRecordData(recordId);
        task.initRecord(clientId, recordData.data, recordData.length);
        _sendTasks.push(task);
        runTask();
        return clientId;
    }
    ChatClient.sendRecordMessage = sendRecordMessage;
    function playRecord(url) {
        if (_playRecordTask) {
            _playRecordTask.stop();
            _playRecordTask = null;
        }
        _playRecordTask = new ChatClient.PlayRecordTask(url);
        _playRecordTask.play();
    }
    ChatClient.playRecord = playRecord;
    function on(eventType, callback, tar) {
        switch (eventType) {
            case ChatEventType.Send:
                {
                    _sendTar = tar;
                    _sendCb = callback;
                }
                break;
            case ChatEventType.StartRecord:
                {
                    _startRecordTar = tar;
                    _startRecordCb = callback;
                }
                break;
            case ChatEventType.FinishRecord:
                {
                    _finishRecordTar = tar;
                    _finishRecordCb = callback;
                }
                break;
            case ChatEventType.Message:
                {
                    _messageTar = tar;
                    _messageCb = callback;
                }
                break;
        }
    }
    ChatClient.on = on;
    function onSend(clientId, message) {
        if (_sendCb && _sendTar) {
            _sendCb.call(_sendTar, clientId, message);
        }
    }
    function onStartRecord(success) {
        if (_startRecordCb && _startRecordTar) {
            _startRecordCb.call(_startRecordTar, success);
        }
    }
    function onfinishRecord(recordData) {
        var success = false;
        var recordId = -1;
        if (recordData && recordData.data) {
            success = true;
            recordId = getClientId();
            var saveRecordData = {
                recordId: recordId,
                recordData: recordData,
            };
            _saveRecordDatas.push(saveRecordData);
        }
        if (_finishRecordCb && _finishRecordTar) {
            _finishRecordCb.call(_finishRecordTar, success, recordId);
        }
    }
    function onMessage(messages) {
        if (_messageCb && _messageTar) {
            _messageCb.call(_messageTar, messages);
        }
    }
    function findRecordData(recordId) {
        var index = -1;
        for (var i = 0; i < _saveRecordDatas.length; i++) {
            if (_saveRecordDatas[i].recordId == recordId) {
                index = i;
                break;
            }
        }
        if (index > -1) {
            var tempRecordData = _saveRecordDatas[index];
            _saveRecordDatas[index] = _saveRecordDatas[_saveRecordDatas.length - 1];
            _saveRecordDatas.pop();
            return tempRecordData.recordData;
        }
        else {
            return null;
        }
    }
    function startRecord() {
        if (URLUtil.hasNativeHandler('startRecord')) {
            URLUtil.nativeHandler('startRecord', null, function (success) {
                onStartRecord(success);
            });
        }
        else {
            var canInited = initUserMedia();
            if (canInited) {
                startWebRecord();
                onStartRecord(true);
            }
            else {
                onStartRecord(false);
            }
        }
    }
    ChatClient.startRecord = startRecord;
    function finishRecord(cancel) {
        if (URLUtil.hasNativeHandler('finishRecord')) {
            URLUtil.nativeHandler('finishRecord', cancel, function (recordData) {
                onfinishRecord(recordData);
            });
        }
        else {
            stopWebRecord();
            if (cancel) {
                onfinishRecord(null);
                return;
            }
            if (_webSoundChunks.length == 0) {
                onfinishRecord(null);
                return;
            }
            var totalLength = 0;
            for (var i = 0; i < _webSoundChunks.length; i++) {
                totalLength += _webSoundChunks[i].length;
            }
            if (totalLength == 0) {
                onfinishRecord(null);
                return;
            }
            var arrayBuffer = new ArrayBuffer(totalLength);
            var outArray = new Uint8Array(arrayBuffer);
            var offset = 0;
            for (var _i = 0, _webSoundChunks_1 = _webSoundChunks; _i < _webSoundChunks_1.length; _i++) {
                var arr = _webSoundChunks_1[_i];
                outArray.set(arr, offset);
                offset += arr.length;
            }
            var soundData = arrayBufferToBase64(outArray);
            var recordData = {
                data: soundData,
                length: _webSoundDuration,
            };
            onfinishRecord(recordData);
        }
    }
    ChatClient.finishRecord = finishRecord;
    function arrayBufferToBase64(buffer) {
        var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var output = '';
        var i = 0;
        while (i < buffer.length) {
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            if (i + 2 < buffer.length) {
                chr1 = buffer[i++];
                chr2 = buffer[i++];
                chr3 = buffer[i++];
                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;
            }
            else if (i + 1 < buffer.length) {
                chr1 = buffer[i++];
                chr2 = buffer[i++];
                chr3 = 0;
                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = 64;
            }
            else {
                chr1 = buffer[i++];
                chr2 = 0;
                chr3 = 0;
                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = 64;
                enc4 = 64;
            }
            output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
        }
        return output;
    }
    function startWebRecord() {
        if (true)
            console.log('start record');
        _webSoundChunks = [];
        _webSoundDuration = 0;
        _webRecording = true;
        if (_webSoundSource && _webSoundProcessor) {
            _webSoundSource.connect(_webSoundProcessor);
            _webSoundProcessor.connect(_webAudioContext.destination);
        }
    }
    function stopWebRecord() {
        if (true)
            console.log('stop record');
        _webRecording = false;
        if (_webSoundSource && _webSoundProcessor) {
            _webSoundSource.disconnect();
            _webSoundProcessor.disconnect();
        }
    }
    function initUserMedia() {
        if (!_webUserMediaInited) {
            var constraints = { audio: true, video: false };
            if (navigator.mediaDevices === undefined) {
                // 首先，如果有getUserMedia的话，就获得它
                var getUserMedia = navigator.getUserMedia;
                // 一些浏览器根本没实现它
                if (!getUserMedia) {
                    if (true)
                        console.log('not support');
                    return false;
                }
                getUserMedia(constraints, onUserMediaSuccess, onUserMediaError);
                _webUserMediaInited = true;
                return true;
            }
            else {
                navigator.mediaDevices.getUserMedia(constraints).then(onUserMediaSuccess, onUserMediaError);
                _webUserMediaInited = true;
                return true;
            }
        }
        else {
            return true;
        }
    }
    function onUserMediaSuccess(stream) {
        //创建一个音频环境对像
        _webAudioContext = new AudioContext();
        _webSoundSource = _webAudioContext.createMediaStreamSource(stream);
        _webSoundProcessor = _webAudioContext.createScriptProcessor(0, 1, 1);
        _webMp3Encoder = new lamejs.Mp3Encoder(1, _webAudioContext.sampleRate, 23);
        _webSoundProcessor.onaudioprocess = function (event) {
            //边录音边转换
            _webSoundDuration += event.inputBuffer.duration;
            var arrayBuffer = event.inputBuffer.getChannelData(0);
            var samplesMono = convertBuffer(arrayBuffer);
            var mp3buf = _webMp3Encoder.encodeBuffer(samplesMono);
            _webSoundChunks.push(mp3buf);
        };
        if (_webRecording) {
            _webSoundSource.connect(_webSoundProcessor);
            _webSoundProcessor.connect(_webAudioContext.destination);
        }
    }
    function onUserMediaError(err) {
        if (true)
            console.log(err);
    }
    function floatTo16BitPCM(input, output) {
        //var offset = 0;
        for (var i = 0; i < input.length; i++) {
            var s = Math.max(-1, Math.min(1, input[i]));
            output[i] = (s < 0 ? s * 0x8000 : s * 0x7FFF);
        }
    }
    function convertBuffer(arrayBuffer) {
        var data = new Float32Array(arrayBuffer);
        var out = new Int16Array(arrayBuffer.length);
        floatTo16BitPCM(data, out);
        return out;
    }
    function initMessage() {
        var msg = {
            serverId: _lastServerId
        };
        var sendData = {
            method: chatProtocols.type.c2sFillMessageType,
            data: msg,
        };
        sendMsg(JSON.stringify(sendData));
    }
    function addHandle(method, handler) {
        _handles[method] = { fun: handler };
    }
    function removeHandle(method) {
        delete _handles[method];
    }
    function getClientId() {
        var clientId = new Date().getTime();
        if (clientId <= _lastClientId) {
            clientId = _lastClientId + 1;
        }
        _lastClientId = clientId;
        return clientId;
    }
    function sendMsg(data) {
        if (_socket == null)
            return;
        if (!_socket.connected)
            return;
        _socket.writeUTF(data);
    }
    ChatClient.sendMsg = sendMsg;
    function runTask() {
        if (_curTask) {
            _curTask.run();
            return;
        }
        if (_sendTasks.length > 0) {
            _curTask = _sendTasks.shift();
            _curTask.run();
        }
    }
    function startConnect() {
        if (!_autoConnected)
            return;
        if (true)
            if (true)
                console.log("chatClient startConnect " + _connectUrl);
        _socket.connectByUrl(_connectUrl);
    }
    function onConnected() {
        if (true)
            console.log('chatClient onConnected');
        initMessage();
        runTask();
    }
    function onClose() {
        if (true)
            console.log('chatClient onClose');
        if (_autoConnected) {
            TRain.core.addDelayDo(startConnect, this, 3000);
        }
    }
    function onData() {
        var data = _socket.readUTF();
        while (data) {
            processData(data);
            data = _socket.readUTF();
        }
    }
    function processData(data) {
        var object;
        try {
            object = JSON.parse(data);
        }
        catch (error) {
            if (true)
                console.log("chatClient parse error " + data);
            return;
        }
        if (typeof object.method !== 'string') {
            if (true)
                console.log('chatClient method error');
            return;
        }
        try {
            var handler = _handles[object.method];
            handler.fun(object.data);
        }
        catch (error) {
            if (true)
                console.log("chatClient process error " + object.method + " " + error);
            return;
        }
    }
    function s2cSendMessageResultHandler(data) {
        onSend(data.clientId, data.message);
        if (_curTask.clientId == data.clientId) {
            _curTask = null;
        }
        runTask();
    }
    function s2cFillMessageResultHandler(data) {
        if (data.messages) {
            for (var i = 0; i < data.messages.length; i++) {
                if (data.messages[i].serverId > _lastServerId) {
                    _lastServerId = data.messages[i].serverId;
                }
            }
        }
        onMessage(data.messages);
    }
    function s2cBcMessageHandler(data) {
        if (data.message.serverId > _lastServerId) {
            _lastServerId = data.message.serverId;
        }
        onMessage([data.message]);
    }
})(ChatClient || (ChatClient = {}));
var ChatClient;
(function (ChatClient) {
    var SendTask = (function () {
        function SendTask() {
        }
        SendTask.prototype.init = function (clientId, info) {
            this.clientId = clientId;
            var msg = {
                clientId: this.clientId,
                type: 1,
                info: info,
            };
            var sendMsg = {
                method: chatProtocols.type.c2sSendMessageType,
                data: msg,
            };
            this.sendData = JSON.stringify(sendMsg);
        };
        SendTask.prototype.initRecord = function (clientId, info, soundLength) {
            this.clientId = clientId;
            var msg = {
                clientId: this.clientId,
                type: 3,
                info: '',
                recordData: info,
                recordLength: soundLength,
                recordSize: info.length,
            };
            var sendMsg = {
                method: chatProtocols.type.c2sSendMessageType,
                data: msg,
            };
            this.sendData = JSON.stringify(sendMsg);
        };
        SendTask.prototype.run = function () {
            ChatClient.sendMsg(this.sendData);
        };
        return SendTask;
    }());
    ChatClient.SendTask = SendTask;
    __reflect(SendTask.prototype, "ChatClient.SendTask");
    var PlayRecordTask = (function () {
        function PlayRecordTask(url) {
            this._soundUrl = url;
            this._isStop = false;
        }
        PlayRecordTask.prototype.play = function () {
            this._sound = new egret.Sound();
            this._sound.load(this._soundUrl);
            this._sound.addEventListener(egret.Event.COMPLETE, this.loadComplete, this);
        };
        PlayRecordTask.prototype.loadComplete = function () {
            if (!this._isStop) {
                this._soundChannel = this._sound.play(0, 1);
            }
        };
        PlayRecordTask.prototype.stop = function () {
            this._isStop = true;
            if (this._soundChannel) {
                this._soundChannel.stop();
            }
        };
        return PlayRecordTask;
    }());
    ChatClient.PlayRecordTask = PlayRecordTask;
    __reflect(PlayRecordTask.prototype, "ChatClient.PlayRecordTask");
})(ChatClient || (ChatClient = {}));
var MediaClient;
(function (MediaClient) {
    var _init = false;
    var _mediaMain;
    function init(hostName, playerId, roomId, sign) {
        if (_init) {
            console.error('mediaClient is inited');
            return;
        }
        var strPlayerId = "" + playerId;
        if (URLUtil.hasNativeHandler('mediaClientInit')) {
            URLUtil.nativeHandler('mediaClientInit', { hostName: hostName, playerId: strPlayerId, roomId: roomId, sign: sign, fun: 'MediaClient.onConnectStatus' });
        }
        else {
            if (_mediaMain == null) {
                _mediaMain = new media.MediaMain(hostName, strPlayerId, roomId, sign);
                _mediaMain.init();
                _mediaMain.onConnectStatus(onConnectStatus, this);
            }
        }
        TRain.core.stage.addEventListener(egret.Event.ACTIVATE, resume, this);
        TRain.core.stage.addEventListener(egret.Event.DEACTIVATE, pause, this);
        _init = true;
    }
    MediaClient.init = init;
    function pause() {
        if (_mediaMain) {
            _mediaMain.pause();
        }
    }
    function resume() {
        if (_mediaMain) {
            _mediaMain.resume();
        }
    }
    function isSupport() {
        if (URLUtil.hasNativeHandler('mediaClientInit')) {
            return true;
        }
        else {
            if (media == null) {
                return false;
            }
            else {
                return media.MediaMain.isSupport();
            }
        }
    }
    MediaClient.isSupport = isSupport;
    function close() {
        _init = false;
        TRain.core.stage.removeEventListener(egret.Event.ACTIVATE, resume, this);
        TRain.core.stage.removeEventListener(egret.Event.DEACTIVATE, pause, this);
        if (URLUtil.hasNativeHandler('mediaClientClose')) {
            URLUtil.nativeHandler('mediaClientClose');
        }
        else {
            _mediaMain.close();
            _mediaMain = null;
        }
    }
    MediaClient.close = close;
    function setEnableMic(enable) {
        if (URLUtil.hasNativeHandler('mediaClientMic')) {
            URLUtil.nativeHandler('mediaClientMic', enable);
        }
        else {
            _mediaMain.setEnableMic(enable);
        }
    }
    MediaClient.setEnableMic = setEnableMic;
    function setEnableAudio(enable) {
        if (URLUtil.hasNativeHandler('mediaClientAudio')) {
            URLUtil.nativeHandler('mediaClientAudio', enable);
        }
        else {
            _mediaMain.setEnableAudio(enable);
        }
    }
    MediaClient.setEnableAudio = setEnableAudio;
    var MediaEventType;
    (function (MediaEventType) {
        MediaEventType[MediaEventType["ConnectStatus"] = 0] = "ConnectStatus";
    })(MediaEventType = MediaClient.MediaEventType || (MediaClient.MediaEventType = {}));
    var _connectStatusTar;
    var _connectStatusCb;
    function on(eventType, callback, tar) {
        switch (eventType) {
            case MediaEventType.ConnectStatus:
                {
                    _connectStatusTar = tar;
                    _connectStatusCb = callback;
                }
                break;
        }
    }
    MediaClient.on = on;
    function onConnectStatus(name, status) {
        if (true)
            console.log(name + ":" + status);
        if (_connectStatusCb && _connectStatusTar) {
            _connectStatusCb.call(_connectStatusTar, name, status);
        }
    }
    MediaClient.onConnectStatus = onConnectStatus;
})(MediaClient || (MediaClient = {}));
var game;
(function (game) {
    var ChipComp = (function (_super) {
        __extends(ChipComp, _super);
        function ChipComp() {
            var _this = _super.call(this) || this;
            _this._indexY = [];
            return _this;
        }
        ChipComp.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            for (var i = 1; i <= 5; i++) {
                var chip = self.getChildAt(i - 1);
                self._indexY.push(chip.y);
                if (i == 1)
                    chip.y = chip.y - 10;
            }
        };
        ChipComp.prototype.setFont = function (fontArr) {
            var self = this;
            self._fontArr = fontArr;
            self.updateChip();
        };
        ChipComp.prototype.updateChip = function () {
            var self = this;
            for (var i = 1; i <= 5; i++) {
                var chip = self.getChildAt(i - 1);
                chip.tag = i;
                chip.icon = "chip@" /* Chip */ + i;
                var fontStr = game.DataFormat.convertGoldString4(self._fontArr[i - 1]);
                chip.font = fontStr;
                chip.sel = i == 1;
                chip.setTarget(self.clickChip, self);
            }
        };
        ChipComp.prototype.clickChip = function (tile) {
            var self = this;
            for (var i = 1; i <= 5; i++) {
                var chip = self.getChildAt(i - 1);
                chip.sel = false;
                chip.y = self._indexY[i - 1];
            }
            var ChipTile = tile;
            ChipTile.sel = true;
            ChipTile.y = ChipTile.y - 10;
            // self.dispatchEvent();
        };
        return ChipComp;
    }(cui.Component));
    game.ChipComp = ChipComp;
    __reflect(ChipComp.prototype, "game.ChipComp");
})(game || (game = {}));
var game;
(function (game) {
    var CustomChipView = (function (_super) {
        __extends(CustomChipView, _super);
        function CustomChipView(id, initData, choosData) {
            var _this = _super.call(this) || this;
            var self = _this;
            var data = self._chooseData = choosData || {};
            self.skinName = data.skinNm || "CustomSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            self._id = id;
            self._checkTags = [];
            self._initData = initData;
            return _this;
        }
        CustomChipView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var list = self.skList;
            var data = self._initData;
            list.itemRender = game.CustomTile;
            list.itemSkinName = self._chooseData.itemSkinNm || "customTileSkin";
            var tmpList = list.dataProvider = self._itemPro = new cui.ArrayCollection();
            var confChips = data.customConfArr;
            var showArrs = self._showArrs = [];
            for (var i = 0, len = confChips.length; i < len; i++) {
                var confChip = confChips[i];
                showArrs.push(self.formatChip(i, confChip));
            }
            tmpList.source = showArrs;
            self.skClose.setTarget(self.close, self);
            self.skSure.setTarget(self.checkSure, self);
        };
        CustomChipView.prototype.formatChip = function (idx, chipNum) {
            var self = this;
            var chipId = game.DataFormat.convertGoldString4(chipNum);
            var chipTp = self._chooseData.chipTp;
            var id = self._id;
            var data = self._initData;
            var checkChips = data.checkConfArr;
            var generalMo = game.dataMgr.generalMo;
            var chips = generalMo.getCustomChips(id, data.roomId);
            var showData = {
                tag: idx,
                bg: (chipTp ? chipTp : "custom@" /* customChip */) + game.GameUtil.getCustomIdx(idx),
                lab: chipId,
                sel: false,
                handle: self,
            };
            if (chips.length > 0) {
                if (chips.indexOf(chipNum) != -1) {
                    showData.sel = true;
                    self._checkTags.push(idx);
                }
            }
            else {
                if (checkChips.indexOf(chipNum) != -1) {
                    showData.sel = true;
                    self._checkTags.push(idx);
                }
            }
            return showData;
        };
        CustomChipView.prototype.checkSure = function () {
            var self = this;
            var id = self._id;
            var checkTags = self._checkTags;
            if (checkTags.length >= 5) {
                //将勾选的添加进数组
                var chips = [];
                var data = self._initData;
                var confChips = data.customConfArr;
                for (var i = 0, len = checkTags.length; i < len; i++) {
                    var tag = checkTags[i];
                    chips.push(confChips[tag]);
                }
                chips.sort(function (a, b) {
                    return a - b;
                });
                game.dataMgr.generalMo.setCustomChips(id, data.roomId, chips);
                //派发事件通知
                game.notifiCenter.postEvent("custom_chip" /* CUSTOM_CHIP */);
                self.close();
            }
            else {
                //提示不满5个
                game.MsgBox.showTipBox(false, 842 /* customChipErr1 */, "mainLang" /* mainLang */);
            }
        };
        CustomChipView.prototype.clickBtn = function (item) {
            var self = this;
            var tag = item.tag;
            var isSel = item.skSel.visible;
            var checkTags = self._checkTags;
            var idx = checkTags.indexOf(tag);
            var showData = self._showArrs[tag];
            if (idx > -1) {
                showData.sel = !isSel;
                self._itemPro.itemUpdated(showData);
                self._checkTags.splice(idx, 1);
            }
            else {
                if (checkTags.length >= 5) {
                    game.MsgBox.showTipBox(false, 843 /* customChipErr2 */, "mainLang" /* mainLang */);
                }
                else {
                    showData.sel = !isSel;
                    self._itemPro.itemUpdated(showData);
                    self._checkTags.push(tag);
                }
            }
        };
        return CustomChipView;
    }(game.UIPopup));
    game.CustomChipView = CustomChipView;
    __reflect(CustomChipView.prototype, "game.CustomChipView");
})(game || (game = {}));
var game;
(function (game) {
    var ApiDefeat = (function (_super) {
        __extends(ApiDefeat, _super);
        function ApiDefeat() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "ApiDefeatSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            self.pri = 10000 /* top */;
            self.bgClose = true;
            return _this;
        }
        ApiDefeat.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
        };
        return ApiDefeat;
    }(game.UIPopup));
    game.ApiDefeat = ApiDefeat;
    __reflect(ApiDefeat.prototype, "game.ApiDefeat");
})(game || (game = {}));
var LoadingUI = (function (_super) {
    __extends(LoadingUI, _super);
    function LoadingUI() {
        var _this = _super.call(this) || this;
        _this.createdView();
        return _this;
    }
    LoadingUI.prototype.createdView = function () {
        var self = this;
        var textCtrl = new egret.TextField();
        self.textField = textCtrl;
        self.addChild(textCtrl);
        textCtrl.y = 300;
        textCtrl.width = 1280;
        textCtrl.height = 100;
        textCtrl.textAlign = "center";
    };
    LoadingUI.prototype.setProgress = function (current, total) {
        //this.textField.text = "Loading..." + current + "/" + total;
    };
    return LoadingUI;
}(egret.Sprite));
__reflect(LoadingUI.prototype, "LoadingUI");
var game;
(function (game) {
    var DefeatShop = (function (_super) {
        __extends(DefeatShop, _super);
        function DefeatShop() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "DefeatShopSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            self.pri = 10000 /* top */;
            return _this;
        }
        DefeatShop.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skShop.setTarget(function () {
                self.close();
                if (game.dataMgr.generalMo.isFunOpen(7 /* shop */)) {
                    game.gameScene.showHallUI(2 /* shop */);
                }
            }, self);
            self.skClose.setTarget(function () {
                TRain.soundMgr.playSFX("click" /* click */);
                self.close();
            }, self);
        };
        return DefeatShop;
    }(game.UIPopup));
    game.DefeatShop = DefeatShop;
    __reflect(DefeatShop.prototype, "game.DefeatShop");
})(game || (game = {}));
var game;
(function (game) {
    var ChildGMRecord = (function (_super) {
        __extends(ChildGMRecord, _super);
        function ChildGMRecord() {
            return _super.call(this) || this;
        }
        ChildGMRecord.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var curGameId = game.dataMgr.accMo.gameId;
            self.skBtn.setTarget(function () {
                game.gameScene.openPopup(new game.GameRecord(curGameId));
            }, self);
        };
        return ChildGMRecord;
    }(cui.Component));
    game.ChildGMRecord = ChildGMRecord;
    __reflect(ChildGMRecord.prototype, "game.ChildGMRecord");
})(game || (game = {}));
var game;
(function (game) {
    var GameAllRecord = (function (_super) {
        __extends(GameAllRecord, _super);
        function GameAllRecord() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "gameRecordSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        GameAllRecord.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self.skTip.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1023 /* gameRecordTip */);
            var skList = self.skList;
            skList.itemRender = GameAllRecordItem;
            skList.dataProvider = self._itemPro = new cui.ArrayCollection();
            game.dataMgr.generalMo.addListener("GetGameRecordList" /* GetGameRecordList */, self.updateRecordList, self);
            self.skMenuGame.setTarget(self.clickBtn, self);
            self.initGameList();
        };
        GameAllRecord.prototype.initGameList = function () {
            var self = this;
            var gameList = game.dataMgr.gameMo.getData();
            var maxHeight = 0;
            var idx = 0;
            var showGm = [];
            var tmpGames = JSON.parse(JSON.stringify(gameList)); //深拷贝
            var lastGms = game.dataMgr.accMo.getLastGms();
            var lastGmArrs = [];
            if (lastGms) {
                for (var i = tmpGames.length - 1; i >= 0; i--) {
                    var curGame = tmpGames[i];
                    var idx_2 = lastGms.indexOf(String(curGame.gameid));
                    if (idx_2 != -1) {
                        tmpGames.splice(i, 1);
                        lastGmArrs[idx_2] = curGame;
                    }
                }
            }
            tmpGames = lastGmArrs.concat(tmpGames);
            for (var i = 0, len = tmpGames.length; i < len; i++) {
                var curGame = tmpGames[i];
                if (curGame && curGame.conf.class2.indexOf(7 /* create_room */) == -1 && curGame.conf.id != 8830 /* legsea */ && curGame.conf.id != 8829 /* legvr */) {
                    var menuItem = new cui.MenuItemImage();
                    menuItem.skinName = "gameNameItemSkin";
                    menuItem.label = curGame.conf.nm;
                    menuItem.icon = "";
                    menuItem.tag = curGame.gameid;
                    menuItem.y = idx * menuItem.height;
                    if (menuItem.y > maxHeight) {
                        maxHeight = menuItem.y;
                    }
                    self.skMenuGame.addChild(menuItem);
                    idx++;
                    showGm.push(curGame);
                }
            }
            self.skMenuGame.setContentSize(self.skMenuGame.width, maxHeight + 90);
            self.skMenuGame.selectTag = self._selTag = showGm[0].gameid;
        };
        GameAllRecord.prototype.click = function (item) {
            var data = item.data;
            var tip = TRain.langMgr.getTxt("mainLang" /* mainLang */, 539 /* CopySuccess */);
            game.MsgBox.showTipBox(false, 539 /* CopySuccess */, "mainLang" /* mainLang */, tip, 15648323 /* orange */);
            URLUtil.copyText(data.login_Id);
        };
        GameAllRecord.prototype.updateRecordList = function (data) {
            var self = this;
            var record_list = data.record_list;
            self.skNoRecord.visible = !record_list;
            self.updateMenu(record_list);
            if (record_list) {
                var showArr = [];
                for (var i = 0, len = record_list.length; i < len; i++) {
                    var recordData = record_list[i];
                    var showData = {
                        handle: self,
                        idx: i + 1,
                        login_Id: recordData.log_id,
                        room_id_txt: recordData.room_id_txt,
                        bet_gold: recordData.bet_gold,
                        new_gold: recordData.new_gold,
                        add_gold: recordData.add_gold,
                        log_time: recordData.log_time,
                        reason: recordData.reason,
                        room_name_type: recordData.room_name_type,
                    };
                    showArr.push(showData);
                }
                showArr.sort(function (a, b) {
                    return b.log_time - a.log_time;
                });
                self._itemPro.source = showArr;
            }
        };
        GameAllRecord.prototype.updateMenu = function (list) {
            var self = this;
            var lastId = game.dataMgr.accMo.lastId;
            var curMenu = self.skMenuGame.getChildByTag(self._selTag);
            curMenu.icon = (lastId == self._selTag && list && list.length > 0) ? "notice@txt_new" : "";
        };
        GameAllRecord.prototype.clickBtn = function (item) {
            var self = this;
            var gameid = self._selTag = item.tag;
            for (var i = 0, len = self.skMenuGame.numChildren; i < len; i++) {
                var menuChild = self.skMenuGame.getChildAt(i);
                menuChild.selected = false;
            }
            item.selected = true;
            self._itemPro.source = [];
            game.dataMgr.generalMo.askRecordList(gameid);
        };
        GameAllRecord.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.generalMo.rmvListener("GetGameRecordList" /* GetGameRecordList */, self);
            _super.prototype.onDispose.call(this);
        };
        return GameAllRecord;
    }(game.UIPopup));
    game.GameAllRecord = GameAllRecord;
    __reflect(GameAllRecord.prototype, "game.GameAllRecord");
    var GameAllRecordItem = (function (_super) {
        __extends(GameAllRecordItem, _super);
        function GameAllRecordItem() {
            var _this = _super.call(this) || this;
            _this._roomNmTps = [];
            var self = _this;
            self.skinName = "gameRecordItemSkin";
            for (var i = 1028 /* pingminchang */; i <= 1031 /* huangjiachang */; i++) {
                self._roomNmTps.push(i);
            }
            return _this;
        }
        GameAllRecordItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            if (self.skCopyBtn) {
                self.skCopyBtn.setTarget(function () {
                    data.handle.click(self);
                }, self);
            }
        };
        GameAllRecordItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skId.text = String(data.idx);
            self.skNum.text = data.login_Id;
            self.skBg.visible = data.idx % 2 == 0;
            var roomNm;
            if (data.room_name_type > 0) {
                var roomNmLang = self._roomNmTps[data.room_name_type - 2];
                roomNm = TRain.langMgr.getTxt("mainLang" /* mainLang */, roomNmLang);
            }
            else {
                roomNm = "";
            }
            self.skRoomId.text = roomNm + data.room_id_txt;
            self.skBetNum.text = game.DataFormat.convertYuanString2(data.bet_gold, true);
            self.skProfit.text = game.DataFormat.convertYuanString2(data.add_gold, true);
            if (self.skBalanceLab)
                self.skBalanceLab.text = game.DataFormat.convertYuanString2(data.new_gold, true);
            self.skTime.text = TimeUtil.formatHmsTime(data.log_time);
            self.skBanker.visible = data.reason == 54;
        };
        return GameAllRecordItem;
    }(cui.DataItem));
    game.GameAllRecordItem = GameAllRecordItem;
    __reflect(GameAllRecordItem.prototype, "game.GameAllRecordItem");
})(game || (game = {}));
var game;
(function (game) {
    var GameRecord = (function (_super) {
        __extends(GameRecord, _super);
        function GameRecord(id) {
            var _this = _super.call(this) || this;
            var self = _this;
            self._gameId = id;
            self.skinName = "gameInnerRecordSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        GameRecord.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            game.dataMgr.generalMo.askRecordList(self._gameId);
            var skList = self.skList;
            skList.itemRender = GameRecordItem;
            skList.dataProvider = self._itemPro = new cui.ArrayCollection();
            game.dataMgr.generalMo.addListener("GetGameRecordList" /* GetGameRecordList */, self.updateRecordList, self);
            self.skTip.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1023 /* gameRecordTip */);
        };
        GameRecord.prototype.click = function (item) {
            var data = item.data;
            var tip = TRain.langMgr.getTxt("mainLang" /* mainLang */, 539 /* CopySuccess */);
            game.MsgBox.showTipBox(false, 539 /* CopySuccess */, "mainLang" /* mainLang */, tip, 15648323 /* orange */);
            URLUtil.copyText(data.login_Id);
        };
        GameRecord.prototype.updateRecordList = function (data) {
            var self = this;
            var record_list = data.record_list;
            self.skNoRecord.visible = !record_list;
            if (record_list) {
                var showArr = [];
                for (var i = 0, len = record_list.length; i < len; i++) {
                    var recordData = record_list[i];
                    var showData = {
                        handle: self,
                        idx: i + 1,
                        login_Id: recordData.log_id,
                        room_id_txt: recordData.room_id_txt,
                        bet_gold: recordData.bet_gold,
                        new_gold: recordData.new_gold,
                        add_gold: recordData.add_gold,
                        log_time: recordData.log_time,
                        reason: recordData.reason,
                        room_name_type: recordData.room_name_type,
                    };
                    showArr.push(showData);
                }
                showArr.sort(function (a, b) {
                    return b.log_time - a.log_time;
                });
                self._itemPro.source = showArr;
            }
        };
        GameRecord.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.generalMo.rmvListener("GetGameRecordList" /* GetGameRecordList */, self);
            _super.prototype.onDispose.call(this);
        };
        return GameRecord;
    }(game.UIPopup));
    game.GameRecord = GameRecord;
    __reflect(GameRecord.prototype, "game.GameRecord");
    var GameRecordItem = (function (_super) {
        __extends(GameRecordItem, _super);
        function GameRecordItem() {
            var _this = _super.call(this) || this;
            _this._roomNmTps = [];
            var self = _this;
            self.skinName = "gameInnerRecordItemSkin";
            for (var i = 1028 /* pingminchang */; i <= 1031 /* huangjiachang */; i++) {
                self._roomNmTps.push(i);
            }
            return _this;
        }
        GameRecordItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skNumTitle.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1018 /* gameNumber */);
            self.skRoomTitle.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1019 /* room */);
            self.skBettitle.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1020 /* effectiveBet */);
            self.skProfitTitle.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1021 /* profit */);
            self.skTimeTitle.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1022 /* endTime */);
            self.skBalanceTitle.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1040 /* balance */);
            if (self.skCopyBtn) {
                self.skCopyBtn.setTarget(function () {
                    data.handle.click(self);
                }, self);
            }
        };
        GameRecordItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skId.text = String(data.idx);
            self.skNum.text = data.login_Id;
            var roomNm;
            if (data.room_name_type > 0) {
                var roomNmLang = self._roomNmTps[data.room_name_type - 2];
                roomNm = TRain.langMgr.getTxt("mainLang" /* mainLang */, roomNmLang);
            }
            else {
                roomNm = "";
            }
            self.skRoom.text = roomNm + data.room_id_txt;
            self.skBet.text = game.DataFormat.convertYuanString2(data.bet_gold, true);
            self.skProfit.text = game.DataFormat.convertYuanString2(data.add_gold, true);
            if (self.skBalanceLab)
                self.skBalanceLab.text = game.DataFormat.convertYuanString2(data.new_gold, true);
            self.skTime.text = TimeUtil.formatHmsTime(data.log_time);
            self.skBanker.visible = data.reason == 54;
        };
        return GameRecordItem;
    }(cui.DataItem));
    game.GameRecordItem = GameRecordItem;
    __reflect(GameRecordItem.prototype, "game.GameRecordItem");
})(game || (game = {}));
var game;
(function (game) {
    var GoodRdView = (function (_super) {
        __extends(GoodRdView, _super);
        function GoodRdView(goodRdConf) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "ScreenSetSkin";
            self._chooseTag = [];
            self._itemArr = [];
            self._isAllChoose = false;
            self._tempGoodRdData = goodRdConf;
            return _this;
        }
        GoodRdView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self.skSure.setTarget(self.setSure, self);
            self.skAll.setTarget(self.allChoose, self);
            self.updateView();
        };
        GoodRdView.prototype.updateView = function () {
            var self = this;
            var data = self._tempGoodRdData;
            var chooseArr = game.dataMgr.generalMo.getGoodRd();
            for (var key in data) {
                var item = self["skTile" + key];
                var i = Number(key);
                if (item) {
                    item.tag = i;
                    item.bg = data[key].source;
                    item.lab = data[key].text;
                    item.sel = false;
                    item.setTarget(self.itemClick, self);
                    if (chooseArr) {
                        var len = chooseArr.length;
                        if (len == 10) {
                            self.skAll.icon = "goodRd@bigGou";
                            self._isAllChoose = true;
                        }
                        for (var j = 0; j < len; j++) {
                            if (i == chooseArr[j]) {
                                item.sel = true;
                                self._chooseTag.push(i);
                            }
                        }
                    }
                    self._itemArr.push(item);
                }
            }
        };
        GoodRdView.prototype.itemClick = function (item) {
            var self = this;
            var tag = item.tag;
            var isSel = item.skSel.visible;
            var chooseTag = self._chooseTag;
            var idx = chooseTag.indexOf(tag);
            if (idx > -1) {
                item.sel = !isSel;
                self._chooseTag.splice(idx, 1);
                if (self._isAllChoose) {
                    self.skAll.icon = "goodRd@bigkuang";
                    self._isAllChoose = !self._isAllChoose;
                }
            }
            else {
                item.sel = !isSel;
                self._chooseTag.push(tag);
                if (self._chooseTag.length == 10) {
                    self.skAll.icon = "goodRd@bigGou";
                    self._isAllChoose = true;
                }
            }
        };
        GoodRdView.prototype.allChoose = function () {
            var self = this;
            self._chooseTag = [];
            var data = self._tempGoodRdData;
            var itemArr = self._itemArr;
            var len = itemArr.length;
            if (!self._isAllChoose) {
                self.skAll.icon = "goodRd@bigGou";
                for (var i = 0; i < len; i++) {
                    itemArr[i].sel = true;
                    self._chooseTag.push(i + 1);
                }
            }
            else {
                for (var j = 0; j < len; j++) {
                    itemArr[j].sel = false;
                }
                self.skAll.icon = "goodRd@bigkuang";
            }
            self._isAllChoose = !self._isAllChoose;
        };
        GoodRdView.prototype.setSure = function () {
            var self = this;
            var chooseData = [];
            for (var i = 0; i < self._chooseTag.length; i++) {
                var idx = self._chooseTag[i].toString();
                chooseData.push(idx);
            }
            game.dataMgr.generalMo.setGoodRd(chooseData);
            //派发事件通知
            game.notifiCenter.postEvent("good_road" /* GOOD_ROAD */);
            self.close();
        };
        return GoodRdView;
    }(game.UIPopup));
    game.GoodRdView = GoodRdView;
    __reflect(GoodRdView.prototype, "game.GoodRdView");
})(game || (game = {}));
var game;
(function (game) {
    game.ROOM_TYPE_NAME = [-1, -1, 1028 /* pingminchang */, 1029 /* guizuchang */, 1030 /* fuhaochang */, 1031 /* huangjiachang */];
    var GoodRoadView = (function (_super) {
        __extends(GoodRoadView, _super);
        function GoodRoadView(gameid, roomid, roadListConf, roadSetConf, skinName, skinItem) {
            var _this = _super.call(this) || this;
            _this._roomCfgs = []; //房间配置
            var self = _this;
            self.skinName = skinName || "goodRoadSkin";
            self.left = 0;
            self.vCenter = 0;
            self.hideBg = true;
            self.bgClose = true;
            self._gameid = gameid;
            self._roomid = roomid;
            self._roomCfgs = game.dataMgr.gsMo.getRoomCfg(gameid).room_cfg;
            self._roadListData = roadListConf;
            self._roadSetData = roadSetConf;
            self.skinItem = skinItem;
            return _this;
        }
        GoodRoadView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            if (self.skinItem) {
                self.skDataGrpRoad.itemRender = self.skinItem;
            }
            else {
                self.skDataGrpRoad.itemRender = GoodRoadItem;
            }
            self.skDataGrpRoad.dataProvider = self._itemPro = new cui.ArrayCollection();
            self.skNotRecommend.visible = true;
            self.updateGoodRoad();
            game.dataMgr.gsMo.addListener("road_all" /* ROAD_ALL */, self.updateGoodRoad, self);
            game.dataMgr.gsMo.addListener("road_append" /* ROAD_APPEND */, self.updateGoodRoad, self);
            game.notifiCenter.addListener("good_road" /* GOOD_ROAD */ + "", function () {
                self.updateGoodRoad();
            }, self);
            game.notifiCenter.addListener("change_room_result" /* CHANGE_ROOM_RESULT */ + "", function (id) {
                self._roomid = id;
                self.updateGoodRoad();
            }, self);
            if (self.skYiWen) {
                self.skYiWen.setTarget(function () {
                    TRain.soundMgr.playSFX("click" /* click */);
                    game.gameScene.openPopup(new game.RoadListView(self._roadListData), null, true);
                }, self);
            }
            if (self.skSheZhi) {
                self.skSheZhi.setTarget(function () {
                    TRain.soundMgr.playSFX("click" /* click */);
                    game.gameScene.openPopup(new game.RoadSetView(self._roadSetData), null, true);
                }, self);
            }
        };
        GoodRoadView.prototype.click = function (item) {
            var data = item.data;
        };
        GoodRoadView.prototype.updateGoodRoad = function () {
            var self = this;
            var goodRoadCfgs = game.dataMgr.gsMo.getGoodRoadCfgs();
            var goodRdSet = game.dataMgr.generalMo.getGoodRd();
            var data = self._roadSetData;
            var roomCfgs = self._roomCfgs;
            if (goodRoadCfgs) {
                var showArr = [];
                for (var _i = 0, goodRoadCfgs_1 = goodRoadCfgs; _i < goodRoadCfgs_1.length; _i++) {
                    var index = goodRoadCfgs_1[_i];
                    if (index.gameid == self._gameid && index.roomid != self._roomid && index.haolu_type != 0 /* none */) {
                        // let GoodRoadData = dataMgr.generalMo.getRouteRoad();
                        // let road: game.RouteModel = new game.RouteModel;
                        // for(let i = 0; i < GoodRoadData.length; i++) {
                        //     if(GoodRoadData[i].roomid == index.roomid && GoodRoadData[i].handicapid == index.handicapid ) {
                        //         road = GoodRoadData[i].route;
                        //         break;
                        //     }
                        // }
                        var road = self.getRoadRoute(index.roomid, index.handicapid);
                        // let roomNmType = ROOM_TYPE.shiwan;
                        // let roomIDTxt = "";
                        // if(roomCfgs) {
                        //     for(let idx in roomCfgs) {
                        //         if(roomCfgs[idx].RoomID == index.roomid) {
                        //             roomNmType = roomCfgs[idx].RoomNmType;
                        //             roomIDTxt = roomCfgs[idx].RoomIDTxt;
                        //             break;
                        //         }
                        //     }
                        // }
                        var type = self.getNmTypeAndIDTxt(index.roomid);
                        var roomNmType = type.NmType;
                        var roomIDTxt = type.IDTxt;
                        if (roomNmType != 1 /* shiwan */) {
                            for (var _a = 0, goodRdSet_1 = goodRdSet; _a < goodRdSet_1.length; _a++) {
                                var i = goodRdSet_1[_a];
                                if (index.haolu_type == i) {
                                    var showData = {
                                        handle: self,
                                        gameid: index.gameid,
                                        roomid: index.roomid,
                                        handicapid: index.handicapid,
                                        haolu_type: index.haolu_type,
                                        gdType: data[index.haolu_type].text,
                                        road: road,
                                        roomNmType: roomNmType,
                                        roomIDTxt: roomIDTxt,
                                    };
                                    showArr.push(showData);
                                    break;
                                }
                            }
                        }
                    }
                }
                showArr.sort(function (a, b) { return a.roomid - b.roomid; });
                showArr.sort(function (a, b) { return a.roomNmType - b.roomNmType; });
                self._itemPro.source = showArr;
                if (showArr.length > 0) {
                    self.skNotRecommend.visible = false;
                }
                else {
                    self.skNotRecommend.visible = true;
                }
            }
            else {
                self.skNotRecommend.visible = true;
            }
        };
        GoodRoadView.prototype.getRoadRoute = function (roomid, handicapid) {
            var self = this;
            var GoodRoadData = game.dataMgr.generalMo.getRouteRoad();
            var road = new game.RouteModel;
            for (var i = 0; i < GoodRoadData.length; i++) {
                if (GoodRoadData[i].roomid == roomid && GoodRoadData[i].handicapid == handicapid) {
                    road = GoodRoadData[i].route;
                    break;
                }
            }
            return road;
        };
        GoodRoadView.prototype.getNmTypeAndIDTxt = function (roomid) {
            var self = this;
            var roomCfgs = self._roomCfgs;
            var roomNmType = 1 /* shiwan */;
            var roomIDTxt = "";
            if (roomCfgs) {
                for (var idx in roomCfgs) {
                    if (roomCfgs[idx].RoomID == roomid) {
                        roomNmType = roomCfgs[idx].RoomNmType;
                        roomIDTxt = roomCfgs[idx].RoomIDTxt;
                        break;
                    }
                }
            }
            return { NmType: roomNmType, IDTxt: roomIDTxt };
        };
        GoodRoadView.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.gsMo.rmvListener("road_all" /* ROAD_ALL */, self);
            game.dataMgr.gsMo.rmvListener("road_append" /* ROAD_APPEND */, self);
            game.notifiCenter.rmvListener("good_road" /* GOOD_ROAD */, self);
            game.notifiCenter.rmvListener("change_room_result" /* CHANGE_ROOM_RESULT */, self);
            _super.prototype.onDispose.call(this);
        };
        return GoodRoadView;
    }(game.UIPopup));
    game.GoodRoadView = GoodRoadView;
    __reflect(GoodRoadView.prototype, "game.GoodRoadView");
    var GoodRoadItem = (function (_super) {
        __extends(GoodRoadItem, _super);
        function GoodRoadItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "goodRoadItemSkin";
            return _this;
        }
        GoodRoadItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
        };
        GoodRoadItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.roomId = data.roomid;
            self.skGame.text = game.dataMgr.gameMo.getGmdConf(data.gameid).nm;
            self.skChang.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, game.ROOM_TYPE_NAME[data.roomNmType]) + data.roomIDTxt;
            self.skNameBg.visible = data.haolu_type > 0 /* none */;
            self.skName.text = data.gdType;
            var road = data.road;
            self._uiRouteList = [];
            self._uiRouteList.push(self.skPaiLu.getChildAt(0));
            self.skPaiLu.removeChildren();
            var tempList = [];
            var childRoute = self._uiRouteList[0];
            childRoute.removeChildren();
            self.skPaiLu.addChild(childRoute);
            tempList.push({ route: road });
            childRoute.init(tempList, goodRoadRoute);
            self.skEnter.setTarget(function () {
                //派发事件通知
                game.notifiCenter.postEvent("change_room" /* CHANGE_ROOM */, data.roomid);
            }, self);
            self.skBtnItem.setTarget(function () {
                //派发事件通知
                game.notifiCenter.postEvent("change_room" /* CHANGE_ROOM */, data.roomid);
            }, self);
        };
        GoodRoadItem.prototype.getRoomId = function () {
            var self = this;
            return self.roomId;
        };
        return GoodRoadItem;
    }(cui.DataItem));
    game.GoodRoadItem = GoodRoadItem;
    __reflect(GoodRoadItem.prototype, "game.GoodRoadItem");
    var goodRoadRoute = (function (_super) {
        __extends(goodRoadRoute, _super);
        function goodRoadRoute() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "goodRoadRouteSkin";
            return _this;
        }
        return goodRoadRoute;
    }(game.RouteItemBase));
    game.goodRoadRoute = goodRoadRoute;
    __reflect(goodRoadRoute.prototype, "game.goodRoadRoute");
})(game || (game = {}));
// TypeScript file
var game;
(function (game) {
    var RoadListView = (function (_super) {
        __extends(RoadListView, _super);
        function RoadListView(goodRdConf) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.hCenter = 0;
            self.vCenter = 0;
            self.skinName = "RoadListSkin";
            self._tempRoadData = goodRdConf;
            return _this;
        }
        RoadListView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self._arr = new cui.ArrayCollection();
            self.skBtnClose.setTarget(self.close, self);
            self.skDataGrp.dataProvider = self._arr;
            self.skDataGrp.itemRender = RoadListItem;
            self.updateList();
        };
        RoadListView.prototype.updateList = function () {
            var self = this;
            var temp = [];
            var listArr = self._tempRoadData;
            if (listArr) {
                for (var idx in listArr) {
                    temp.push(listArr[idx]);
                }
                self._arr.source = temp;
            }
        };
        return RoadListView;
    }(game.UIPopup));
    game.RoadListView = RoadListView;
    __reflect(RoadListView.prototype, "game.RoadListView");
    var RoadListItem = (function (_super) {
        __extends(RoadListItem, _super);
        function RoadListItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "RoadListItemSkin";
            return _this;
        }
        RoadListItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skName.text = data.RoadName;
            self.skExample.source = data.RoadExample + "";
            self.skDefinition.text = data.RoadDefinition;
        };
        return RoadListItem;
    }(cui.DataItem));
    game.RoadListItem = RoadListItem;
    __reflect(RoadListItem.prototype, "game.RoadListItem");
})(game || (game = {}));
var game;
(function (game) {
    var RoadSetView = (function (_super) {
        __extends(RoadSetView, _super);
        function RoadSetView(goodRdConf) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "ScreenSetSkin";
            self._chooseTag = [];
            self._itemArr = [];
            self._isAllChoose = false;
            self._tempGoodRdData = goodRdConf;
            return _this;
        }
        RoadSetView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            game.dataMgr.generalMo.askHaoLuFilteGet();
            game.dataMgr.generalMo.addListener("FilteGet" /* FilteGet */, self.getFilte, self);
            game.dataMgr.generalMo.addListener("FilteSet" /* FilteSet */, self.getFilte, self);
            self.skClose.setTarget(self.close, self);
            self.skSure.setTarget(self.setSure, self);
            self.skAll.setTarget(self.allChoose, self);
            self.updateView();
        };
        RoadSetView.prototype.getFilte = function (filtes) {
            var self = this;
            var chooseData = [];
            var filte = filtes;
            var temp = [];
            var i = 0;
            while (i <= 9) {
                var r = (filte >> 1 * i) & 1;
                if (!r) {
                    temp.push(i + 1);
                }
                i++;
            }
            for (var i_5 = 0; i_5 < temp.length; i_5++) {
                var idx = temp[i_5].toString();
                chooseData.push(idx);
            }
            game.dataMgr.generalMo.setGoodRd(chooseData);
        };
        RoadSetView.prototype.updateView = function () {
            var self = this;
            var data = self._tempGoodRdData;
            var chooseArr = game.dataMgr.generalMo.getGoodRd();
            for (var key in data) {
                var item = self["skTile" + key];
                var i = Number(key);
                if (item) {
                    item.tag = i;
                    item.bg = data[key].source;
                    item.lab = data[key].text;
                    item.sel = false;
                    item.setTarget(self.itemClick, self);
                    if (chooseArr) {
                        var len = chooseArr.length;
                        if (len == 10) {
                            self.skAll.icon = "goodRd@bigGou";
                            self._isAllChoose = true;
                        }
                        for (var j = 0; j < len; j++) {
                            if (i == chooseArr[j]) {
                                item.sel = true;
                                self._chooseTag.push(i);
                            }
                        }
                    }
                    self._itemArr.push(item);
                }
            }
        };
        RoadSetView.prototype.itemClick = function (item) {
            var self = this;
            var tag = item.tag;
            var isSel = item.skSel.visible;
            var chooseTag = self._chooseTag;
            var idx = chooseTag.indexOf(tag);
            if (idx > -1) {
                item.sel = !isSel;
                self._chooseTag.splice(idx, 1);
                if (self._isAllChoose) {
                    self.skAll.icon = "goodRd@bigkuang";
                    self._isAllChoose = !self._isAllChoose;
                }
            }
            else {
                item.sel = !isSel;
                self._chooseTag.push(tag);
                if (self._chooseTag.length == 10) {
                    self.skAll.icon = "goodRd@bigGou";
                    self._isAllChoose = true;
                }
            }
        };
        RoadSetView.prototype.allChoose = function () {
            var self = this;
            self._chooseTag = [];
            var data = self._tempGoodRdData;
            var itemArr = self._itemArr;
            var len = itemArr.length;
            if (!self._isAllChoose) {
                self.skAll.icon = "goodRd@bigGou";
                for (var i = 0; i < len; i++) {
                    itemArr[i].sel = true;
                    self._chooseTag.push(i + 1);
                }
            }
            else {
                for (var j = 0; j < len; j++) {
                    itemArr[j].sel = false;
                }
                self.skAll.icon = "goodRd@bigkuang";
            }
            self._isAllChoose = !self._isAllChoose;
        };
        RoadSetView.prototype.setSure = function () {
            var self = this;
            var chooseData = [];
            for (var i = 0; i < self._chooseTag.length; i++) {
                var idx = self._chooseTag[i].toString();
                chooseData.push(idx);
            }
            var temp = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
            for (var j = 0; j < self._chooseTag.length; j++) {
                temp[self._chooseTag[j] - 1] = 0;
            }
            temp.reverse();
            var str = "";
            for (var t = 0; t < temp.length; t++) {
                var str1 = temp[t].toString();
                str = str + str1;
            }
            var filte = parseInt(str, 2);
            game.dataMgr.generalMo.askHaoLuFilteSet(filte);
            game.dataMgr.generalMo.setGoodRd(chooseData);
            //派发事件通知
            game.notifiCenter.postEvent("good_road" /* GOOD_ROAD */);
            self.close();
        };
        return RoadSetView;
    }(game.UIPopup));
    game.RoadSetView = RoadSetView;
    __reflect(RoadSetView.prototype, "game.RoadSetView");
})(game || (game = {}));
var game;
(function (game) {
    var RouteIntroduction = (function (_super) {
        __extends(RouteIntroduction, _super);
        function RouteIntroduction(routeInConfs, skin, menuItemSkinNm) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.useOnce = false;
            self.skinName = skin || "RouteIntroSkin";
            self._routeInConfs = routeInConfs;
            self.vCenter = 0;
            self.hCenter = 0;
            self.hideBg = false;
            self._menuItemSkinNm = menuItemSkinNm || "menuItemSkin";
            return _this;
        }
        RouteIntroduction.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(function () {
                game.GameUtil.playClickSound();
                self.close();
            }, self);
            var routeConfs = self._routeInConfs;
            self.skLeftBtn.visible = self.skRightBtn.visible = routeConfs.length != 1;
            self.skLeftBtn.setTarget(self.btnClick, self);
            self.skRightBtn.setTarget(self.btnClick, self);
            self._curTg = 0; //默认是第一页
            var len = routeConfs.length;
            self._maxTg = len - 1;
            var imgGrp = self.skImgGrp;
            for (var i = 0; i < len; i++) {
                var img = new cui.MenuItemImage();
                img.skinName = self._menuItemSkinNm;
                img.tag = i;
                img.x = i * 29;
                imgGrp.addChild(img);
            }
            imgGrp.width = 19 * len + 10 * (len - 1);
            imgGrp.hCenter = 0 - 19;
            imgGrp.setTarget(self.clickMenu, self);
            imgGrp.selectTag = self._curTg;
            self.updateView();
        };
        RouteIntroduction.prototype.rmvInGrp = function () {
            var innerGrp = this.skInGrp;
            for (var i = 0; i < innerGrp.numChildren; i++) {
                innerGrp.getChildAt(i).dispose();
            }
            innerGrp.removeChildren();
        };
        RouteIntroduction.prototype.btnClick = function (item) {
            var self = this;
            var tag = item.tag;
            var curTg = self._curTg;
            if (tag == 0) {
                if (curTg != 0) {
                    self._curTg--;
                    self.rmvInGrp();
                }
            }
            else {
                if (curTg != self._maxTg) {
                    self._curTg++;
                    self.rmvInGrp();
                }
            }
            self.skImgGrp.selectTag = self._curTg;
        };
        RouteIntroduction.prototype.clickMenu = function (item) {
            var self = this;
            self.rmvInGrp();
            self._curTg = item.tag;
            self.updateView();
        };
        RouteIntroduction.prototype.updateView = function () {
            var self = this;
            var curTg = self._curTg;
            var routeInConf = self._routeInConfs[curTg];
            for (var key in routeInConf) {
                var ruleConf = routeInConf[key];
                if (ruleConf.isImg) {
                    var img = new cui.Image();
                    img.source = ruleConf.text;
                    img.x = ruleConf.x;
                    img.y = ruleConf.y;
                    self.skInGrp.addChild(img);
                }
                else {
                    var lab = new cui.Label();
                    lab.textFlow = cui.htmlParser.parser(ruleConf.text);
                    lab.x = ruleConf.x;
                    lab.y = ruleConf.y;
                    lab.lineSpacing = 5;
                    lab.textColor = ruleConf.color || 0xe0d5bd;
                    lab.size = ruleConf.size || 24;
                    self.skInGrp.addChild(lab);
                }
            }
        };
        return RouteIntroduction;
    }(game.UIPopup));
    game.RouteIntroduction = RouteIntroduction;
    __reflect(RouteIntroduction.prototype, "game.RouteIntroduction");
})(game || (game = {}));
var game;
(function (game) {
    var Room1 = (function (_super) {
        __extends(Room1, _super);
        function Room1(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            _this.skinName = "newMomentSkin";
            _this._closeDoorData = data || {};
            if (self.skConfGrp) {
                self._tag = self.skConfGrp.tag;
                self.removeChild(self.skConfGrp);
            }
            self.setScOffX();
            return _this;
        }
        Room1.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var accMo = game.dataMgr.accMo;
            // if(self.skRecordBtn)self.skRecordBtn.visible = accMo.isApi;
            // let curGameId = accMo.gameId;
            // let gameConf = dataMgr.gameMo.getGmdConf(curGameId);
            // if(self.skRecordBtn)self.skRecordBtn.visible = accMo.isApi;
            var closeDoorWrapper;
            if (!self._closeDoorWrapper) {
                closeDoorWrapper = self._closeDoorWrapper = TRain.WrapperMgr.getWrapper();
                closeDoorWrapper.ani = new game.CloseDoorAni(self.skImg, self.skScroller, 300, self._closeDoorData, false, true);
            }
            closeDoorWrapper.start();
            self.skList.dataProvider = self._itemPro = new cui.ArrayCollection();
            game.VersionUI.getInst().setParent(self.skVerGrp);
            self.skNoCfg.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 899 /* gettingRoomCfg */);
        };
        Room1.prototype.setScOffX = function () {
            var self = this;
            var scOffx = CONF.scOffx;
            if (self._tag == 1) {
                self.skScrGrp.x += scOffx;
                self.skGroup.right += scOffx;
                self.skQuickStart.x += scOffx;
            }
            else {
                self.skGroup.left += scOffx;
            }
        };
        Room1.prototype.setTitle = function (value, girlDb) {
            var self = this;
            self.skTitle.source = value;
            self.skImg.dbNm = girlDb || "renwu";
        };
        Room1.prototype.setData = function (item, listArr) {
            var self = this;
            self.skList.itemRender = item;
            self._itemPro.source = listArr;
        };
        Room1.prototype.onDispose = function () {
            var self = this;
            if (self._closeDoorWrapper)
                TRain.WrapperMgr.freeWrapper(self._closeDoorWrapper);
            _super.prototype.onDispose.call(this);
        };
        return Room1;
    }(game.UIFullFW));
    game.Room1 = Room1;
    __reflect(Room1.prototype, "game.Room1");
    var Room2 = (function (_super) {
        __extends(Room2, _super);
        function Room2() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "newMoment1Skin";
            game.VersionUI.getInst().setParent(self.skVerGrp);
            self.skNoCfg.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 899 /* gettingRoomCfg */);
            return _this;
            // if(self.skRecordBtn)self.skRecordBtn.visible = dataMgr.accMo.isApi;
        }
        Room2.prototype.setTitle = function (value) {
            this.skTitle.source = value;
        };
        return Room2;
    }(game.UIFullFW));
    game.Room2 = Room2;
    __reflect(Room2.prototype, "game.Room2");
    var Room3 = (function (_super) {
        __extends(Room3, _super);
        function Room3() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "newMoment2Skin";
            game.VersionUI.getInst().setParent(self.skVerGrp);
            self.skNoCfg.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 899 /* gettingRoomCfg */);
            return _this;
            // if(self.skRecordBtn)self.skRecordBtn.visible = dataMgr.accMo.isApi;
        }
        Room3.prototype.setTitle = function (value) {
            this.skTitle.source = value;
        };
        return Room3;
    }(game.UIFullFW));
    game.Room3 = Room3;
    __reflect(Room3.prototype, "game.Room3");
    var Room4 = (function (_super) {
        __extends(Room4, _super);
        function Room4() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "newMoment3Skin";
            // self.setScOffX();
            game.VersionUI.getInst().setParent(self.skVerGrp);
            self.skNoCfg.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 899 /* gettingRoomCfg */);
            return _this;
            // if(self.skRecordBtn)self.skRecordBtn.visible = dataMgr.accMo.isApi;
        }
        // private setScOffX(){
        //     let self = this;
        //     let scOffx = CONF.scOffx;
        //     self.skGroup.left += scOffx;
        // }
        Room4.prototype.setTitle = function (value, girlDb) {
            var self = this;
            this.skTitle.source = value;
            self.skGirlDb.dbNm = girlDb || "sssGirl";
        };
        Room4.prototype.setDbImg = function (imgV) {
            var self = this;
            if (self.skImg) {
                self.skImg.visible = imgV;
            }
        };
        return Room4;
    }(game.UIFullFW));
    game.Room4 = Room4;
    __reflect(Room4.prototype, "game.Room4");
})(game || (game = {}));
// module game{
//     export class RouteList extends cui.Component{
//         public skList:cui.DataGroup;
//         public skImg:cui.Image;
//         public itemSkinName:string;
//         private _imgLen:number;
//         private _itemPro:cui.ArrayCollection;
//         constructor(){
//             super();
//         }
//         public childrenCreated():void{
//             let self = this;
//             let list = self.skList;
//             list.itemRender = RouteStateTile;
//             list.itemSkinName = self.itemSkinName;
//             list.dataProvider = self._itemPro = new cui.ArrayCollection();
//             self._imgLen = self.skList.width / self.skImg.width;
//         }
//         /**
//          * 
//          * @param data {格式化后的数据，item的皮肤名}
//          */
//         public setData(routeList:any[]){
//             let self = this;
//             let showTile = [];
//             for(let i = 0 ;i < routeList.length;i++){
//                 showTile.push(routeList[i]);
//             }
//             self._itemPro.source = showTile;
//             let tmpLen = routeList.length / colTp.six ;
//             if(tmpLen <= self._imgLen){
//                 self.skImg.width = self.skList.width;
//             }else{
//                 self.skImg.width = self.skImg.width * Math.ceil(tmpLen);
//             }
//         }
//     }
// }
var game;
(function (game) {
    var RoutePop = (function (_super) {
        __extends(RoutePop, _super);
        function RoutePop() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "routePopSkin";
            return _this;
        }
        RoutePop.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
        };
        RoutePop.prototype.setImg = function (value) {
            this.skImg.source = value;
        };
        return RoutePop;
    }(game.UIPopup));
    game.RoutePop = RoutePop;
    __reflect(RoutePop.prototype, "game.RoutePop");
})(game || (game = {}));
var game;
(function (game) {
    var ParticleAni = (function () {
        function ParticleAni(parent, particleNm) {
            var self = this;
            self._p = parent;
            var sys = self._sys = game.UIUtils.createParticle(particleNm);
            sys.addEventListener("play_fin" /* EVT_PLAY_FIN */, self.onFin, self);
        }
        ParticleAni.prototype.start = function () {
            var self = this;
            var sys = self._sys;
            if (!sys.parent) {
                self._p.addChild(sys);
            }
            sys.start();
        };
        ParticleAni.prototype.stop = function () {
            var self = this;
            var sys = self._sys;
            sys.stop(true);
            self.onFin();
        };
        ParticleAni.prototype.dispose = function () {
            var self = this;
            self.onFin();
            self._sys.dispose();
        };
        ParticleAni.prototype.onFin = function () {
            var sys = this._sys;
            var p = sys.parent;
            if (p)
                p.removeChild(sys);
        };
        return ParticleAni;
    }());
    game.ParticleAni = ParticleAni;
    __reflect(ParticleAni.prototype, "game.ParticleAni");
})(game || (game = {}));
var game;
(function (game) {
    var UIRouteList2 = (function (_super) {
        __extends(UIRouteList2, _super);
        function UIRouteList2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @param datas
         * @param itemCls 必须继承RouteItemBase2
         */
        UIRouteList2.prototype.init = function (datas, itemCls, haveDbRow) {
            var self = this;
            self._items = [];
            var item;
            var itemW;
            var itemH;
            for (var i = 0, len = datas.length; i < len; ++i) {
                item = new itemCls();
                item.init(datas[i].route, haveDbRow);
                var w = itemW = item.width;
                var h = itemH = item.height;
                var row_2 = Math.floor(i / 2);
                var col = i - row_2 * 2;
                item.x = w * col;
                item.y = h * row_2;
                self.addChild(item);
                self._items[i] = item;
            }
            var row = Math.ceil(datas.length / 2);
            self.setContentSize(itemW * 2, itemH * row);
        };
        UIRouteList2.prototype.updateRoom = function (datas) {
            var self = this;
            for (var i = 0; i < datas.length; i++) {
                var data = datas[i];
                var item = self._items[i];
                item.updateRoom(data);
            }
        };
        return UIRouteList2;
    }(cui.Group));
    game.UIRouteList2 = UIRouteList2;
    __reflect(UIRouteList2.prototype, "game.UIRouteList2");
    var RouteItemBase2 = (function (_super) {
        __extends(RouteItemBase2, _super);
        function RouteItemBase2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        // private _winStr: string;
        // private _win1Str: string;
        // private _win2Str: string;
        RouteItemBase2.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            // if (self.skWin0) {
            //     self.skWin0.visible = false;
            //     self._winStr = self.skWin0.source.split("_")[0];
            // }
            // if (self.skWin1) {
            //     self.skWin1.visible = false;
            //     self._win1Str = self.skWin1.source.split("_")[0];
            // }
            // if (self.skWin2) {
            //     self.skWin2.visible = false;
            //     self._win2Str = self.skWin2.source.split("_")[0];
            // }
            // if (self.skLose0) self.skLose0.visible = false;
            // if (self.skLose1) self.skLose1.visible = false;
            // if (self.skLose2) self.skLose2.visible = false;
        };
        RouteItemBase2.prototype.init = function (data, haveDbRow) {
            var self = this;
            self._data = data;
            // if (self.skZPL) self.skZPL.setModel(RouteTp.zhupanlu, data);
            // if (self.skDL) self.skDL.setModel(RouteTp.dalu, data);
            // if (self.skDYZL) self.skDYZL.setModel(RouteTp.dayanzailu, data);
            // if (self.skXL) self.skXL.setModel(RouteTp.xiaolu, data);
            // if (self.skXQL) self.skXQL.setModel(RouteTp.xiaoqianglu, data);
            if (self.skDONG)
                self.skDONG.setModel(0 /* zhupanlu */, data, haveDbRow);
            if (self.skNAN)
                self.skNAN.setModel(1 /* dalu */, data, haveDbRow);
            if (self.skXI)
                self.skXI.setModel(2 /* dayanzailu */, data, haveDbRow);
            if (self.skBEI)
                self.skBEI.setModel(3 /* xiaolu */, data, haveDbRow);
        };
        RouteItemBase2.prototype.updateRoom = function (data) {
            var self = this;
            // let resultTp: GameResultTp[][] = self._data.getForecast();
            // let winTp: GameResultTp[] = resultTp[0];
            // let loseTp: GameResultTp[] = resultTp[1];
            // if (winTp[0] > 0) {
            //     self.skWin0.visible = true;
            //     self.skWin0.source = self._winStr + "_" + winTp[0];
            // }
            // if (winTp[1] > 0) {
            //     self.skWin1.visible = true;
            //     self.skWin1.source = self._win1Str + "_" + winTp[1];
            // }
            // if (winTp[2] > 0) {
            //     self.skWin2.visible = true;
            //     self.skWin2.source = self._win2Str + "_" + winTp[2];
            // }
            // if (loseTp[0] > 0) {
            //     self.skLose0.visible = true;
            //     self.skLose0.source = self._winStr + "_" + loseTp[0];
            // }
            // if (loseTp[1] > 0) {
            //     self.skLose1.visible = true;
            //     self.skLose1.source = self._win1Str + "_" + loseTp[1];
            // }
            // if (loseTp[2] > 0) {
            //     self.skLose2.visible = true;
            //     self.skLose2.source = self._win2Str + "_" + loseTp[2];
        };
        return RouteItemBase2;
    }(cui.Component));
    game.RouteItemBase2 = RouteItemBase2;
    __reflect(RouteItemBase2.prototype, "game.RouteItemBase2");
})(game || (game = {}));
var game;
(function (game) {
    //
    var UIRouteList3 = (function (_super) {
        __extends(UIRouteList3, _super);
        function UIRouteList3() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         *
         * @param datas
         * @param itemCls 必须继承RouteItemBase3
         */
        UIRouteList3.prototype.init = function (datas, itemCls) {
            var self = this;
            self._items = [];
            var item;
            var itemW;
            var itemH;
            for (var i = 0, len = datas.length; i < len; ++i) {
                item = new itemCls();
                item.init(datas[i].route);
                var w = itemW = item.width;
                var h = itemH = item.height;
                var row_3 = Math.floor(i / 2);
                var col = i - row_3 * 2;
                item.x = w * col + 5;
                item.y = h * row_3;
                self.addChild(item);
                self._items[i] = item;
            }
            var row = Math.ceil(datas.length / 2);
            self.setContentSize(itemW * 2, itemH * row);
        };
        UIRouteList3.prototype.initNew = function (datas, itemCls) {
            var self = this;
            self._items = [];
            var item;
            var itemW;
            var itemH;
            for (var i = 0, len = datas.length; i < len; ++i) {
                item = new itemCls();
                item.init(datas[i].route);
                var w = itemW = item.width;
                var h = itemH = item.height;
                item.x = 0;
                item.y = h * i;
                self.addChild(item);
                self._items[i] = item;
            }
            self.setContentSize(itemW * 2, itemH * datas.length);
        };
        UIRouteList3.prototype.updateRoom = function (datas) {
            var self = this;
            for (var i = 0; i < datas.length; i++) {
                var data = datas[i];
                var item = self._items[i];
                item.updateRoom(data);
            }
        };
        return UIRouteList3;
    }(cui.Group));
    game.UIRouteList3 = UIRouteList3;
    __reflect(UIRouteList3.prototype, "game.UIRouteList3");
    var RouteItemBase3 = (function (_super) {
        __extends(RouteItemBase3, _super);
        function RouteItemBase3() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        //private _data:game.RouteSsqModel;
        RouteItemBase3.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
        };
        RouteItemBase3.prototype.init = function (data) {
            var self = this;
            // self._data = data;
            if (self.skZPL)
                self.skZPL.setModel(0 /* zhupanlu */, data);
            if (self.skDL)
                self.skDL.setModel(1 /* dalu */, data);
            if (self.skDYZL)
                self.skDYZL.setModel(2 /* dayanzailu */, data);
            if (self.skXl)
                self.skXl.setModel(data);
        };
        RouteItemBase3.prototype.updateRoom = function (data) {
        };
        return RouteItemBase3;
    }(cui.Component));
    game.RouteItemBase3 = RouteItemBase3;
    __reflect(RouteItemBase3.prototype, "game.RouteItemBase3");
    var RouteCom2 = (function (_super) {
        __extends(RouteCom2, _super);
        function RouteCom2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RouteCom2.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var list = self.skList;
            list.itemRender = game.RouteStateTile;
            list.itemSkinName = self.itemSkinName;
            list.dataProvider = self._itemPro = new cui.ArrayCollection();
            if (self.skImg) {
                self._imgLen = self.skList.width / self.skImg.width;
                self._imgW = self.skImg.width;
                self._oldW = self.skList.width;
            }
            if (self._mo) {
                self.updateResult();
            }
        };
        RouteCom2.prototype.setModel = function (tp, mo) {
            //注册事件
            var self = this;
            self._tp = tp;
            self._mo = mo;
            mo.addListener("d_change" /* DATA_CHANGE */, self.updateResult, self);
            mo.addListener("d_update" /* DATA_UPDATE */, function () {
                self.updateResult(true);
            }, self);
            if (self._inited)
                self.updateResult();
        };
        RouteCom2.prototype.updateResult = function (noclear) {
            var self = this;
            var tp = self._tp;
            var routeList = self._mo.getRouteData(tp);
            var itemPro = self._itemPro;
            var len = routeList.length;
            var notInit = itemPro.source.length > 0;
            if (notInit) {
                if (!self._flashTag) {
                    self._flashTag = TRain.core.addFrameDo(self.updateTile, self, false, 300);
                }
                else {
                    self.endFlash();
                }
                var lastIdx = self._mo.getRouteLastIdx(tp);
                self._flashData = { idx: lastIdx, data: routeList[lastIdx], cnt: 0 };
            }
            itemPro.source = routeList.slice(0);
            self.skTbScroller.showTableInViewStart(itemPro.source.length - 1, false);
            var colLen = tp == 0 /* zhupanlu */ ? 4 /* zplMaxCnt */ : 2 /* dlMaxCnt */;
            if (self.skImg) {
                var tmpLen = routeList.length / colLen;
                if (tmpLen <= self._imgLen) {
                    self.skImg.width = self.skList.width + self._imgW * 15;
                }
                else {
                    var delLen = Math.ceil(tmpLen - (self._oldW / self._imgW));
                    self.skImg.width = self._oldW + self._imgW * (delLen + 15);
                    self._oldW = self.skImg.width;
                }
            }
        };
        RouteCom2.prototype.updateTile = function () {
            var self = this;
            var flashData = self._flashData;
            flashData.cnt++;
            if (flashData.cnt > 10) {
                self.endFlash();
            }
            else {
                var itemPro = self._itemPro;
                var idx = flashData.idx;
                itemPro.source[idx] = itemPro.getItemAt(idx) ? null : flashData.data;
                itemPro.updateItemAt(idx);
            }
        };
        RouteCom2.prototype.endFlash = function () {
            var self = this;
            var flashData = self._flashData;
            TRain.core.rmvFrameDoById(self._flashTag);
            self._flashTag = 0;
            var itemPro = self._itemPro;
            var idx = flashData.idx;
            itemPro.source[idx] = flashData.data;
            itemPro.updateItemAt(idx);
        };
        RouteCom2.prototype.dispose = function () {
            var self = this;
            if (self._flashTag)
                TRain.core.rmvFrameDoById(self._flashTag);
            if (self._mo)
                self._mo.rmvAllListener(self);
            _super.prototype.dispose.call(this);
        };
        return RouteCom2;
    }(cui.Component));
    game.RouteCom2 = RouteCom2;
    __reflect(RouteCom2.prototype, "game.RouteCom2");
    var RouteCom3 = (function (_super) {
        __extends(RouteCom3, _super);
        function RouteCom3() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RouteCom3.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var list = self.skList1;
            list.itemRender = SsqRouteStateTile;
            list.itemSkinName = self.itemSkinName;
            list.dataProvider = self._itemPro = new cui.ArrayCollection();
            if (self._mo) {
                self.updateResult();
            }
        };
        RouteCom3.prototype.setModel = function (mo) {
            //注册事件
            var self = this;
            self._mo = mo;
            mo.addListener("d_change" /* DATA_CHANGE */, self.updateResult, self);
            mo.addListener("d_update" /* DATA_UPDATE */, function () {
                self.updateResult(true);
            }, self);
            if (self._inited)
                self.updateResult();
        };
        RouteCom3.prototype.updateResult = function (noclear) {
            var self = this;
            var routeList = self._mo.hits;
            var tps = self._mo._tps;
            var itemPro = self._itemPro;
            var listLen = routeList.length;
            var itemW = self.skList1.layout.itemW;
            var imgLen = self.skTbScroller.width / itemW;
            if (!noclear) {
                var firstIdx = listLen - imgLen;
                var routeDatas = routeList.slice(firstIdx);
                var tpsDatas = tps.slice(firstIdx);
                var stateDatas = [];
                for (var i = 0, listLen_1 = routeDatas.length; i < listLen_1; i++) {
                    var tempData = {};
                    tempData.tp = tpsDatas[i];
                    tempData.list = routeDatas[i];
                    stateDatas.push(tempData);
                }
                itemPro.source = stateDatas;
            }
            else {
                itemPro.source.shift();
                var tempData = {};
                tempData.tp = tps[listLen - 1];
                tempData.list = routeList[listLen - 1];
                itemPro.addItem(tempData);
            }
            self.skTbScroller.showTableInViewStart(itemPro.source.length, false);
        };
        RouteCom3.prototype.dispose = function () {
            var self = this;
            if (self._mo)
                self._mo.rmvAllListener(self);
            _super.prototype.dispose.call(this);
        };
        return RouteCom3;
    }(cui.Component));
    game.RouteCom3 = RouteCom3;
    __reflect(RouteCom3.prototype, "game.RouteCom3");
    var SsqRouteStateTile = (function (_super) {
        __extends(SsqRouteStateTile, _super);
        function SsqRouteStateTile(skinName) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = skinName;
            self.visible = false;
            return _this;
        }
        SsqRouteStateTile.prototype.dataChanged = function () {
            var self = this;
            if (self._data) {
                var datas = self._data.list;
                var tp = self._data.tp;
                self.visible = true;
                for (var i = 0; i < datas.length; i++) {
                    var lab = self["skLab" + i];
                    lab.visible = true;
                    var val = datas[i];
                    lab.font = i == tp ? "ssqLabW" : "benzChoose";
                    lab.text = val;
                }
            }
            else {
                self.visible = false;
            }
        };
        return SsqRouteStateTile;
    }(cui.DataItem));
    game.SsqRouteStateTile = SsqRouteStateTile;
    __reflect(SsqRouteStateTile.prototype, "game.SsqRouteStateTile");
})(game || (game = {}));
var game;
(function (game) {
    var FifthGuide = (function (_super) {
        __extends(FifthGuide, _super);
        function FifthGuide() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "gameGuide5Skin";
            return _this;
        }
        FifthGuide.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.clickNext, self);
            self.skSure.setTarget(self.clickNext, self);
            self.skLab.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 827 /* gameGuideTip10 */);
        };
        FifthGuide.prototype.clickNext = function () {
            var accMo = game.dataMgr.accMo;
            accMo.setVal("gold", accMo.firstGold);
            game.GuideMgr.clear();
            game.dataMgr.generalMo.postEvent("guide" /* NewGuide */);
        };
        return FifthGuide;
    }(game.UIFullFW));
    game.FifthGuide = FifthGuide;
    __reflect(FifthGuide.prototype, "game.FifthGuide");
})(game || (game = {}));
var game;
(function (game) {
    var FirstGuide = (function (_super) {
        __extends(FirstGuide, _super);
        function FirstGuide() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "gameGuide1Skin";
            return _this;
        }
        FirstGuide.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.clickNext, self);
            self.skSure.setTarget(self.clickNext, self);
            var accMo = game.dataMgr.accMo;
            self.skPass.setTarget(function () {
                accMo.setVal("gold", accMo.firstGold);
                game.GuideMgr.clear();
                game.dataMgr.generalMo.postEvent("guide" /* NewGuide */);
            }, self);
            self.skLab.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 818 /* gameGuideTip1 */);
        };
        FirstGuide.prototype.clickNext = function () {
            game.GuideMgr.guideState(1 /* second */);
        };
        return FirstGuide;
    }(game.UIFullFW));
    game.FirstGuide = FirstGuide;
    __reflect(FirstGuide.prototype, "game.FirstGuide");
})(game || (game = {}));
var game;
(function (game) {
    var FourthGuide = (function (_super) {
        __extends(FourthGuide, _super);
        function FourthGuide() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "gameGuide4Skin";
            return _this;
        }
        FourthGuide.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.clickNext, self);
            self.skSure.setTarget(self.clickNext, self);
            self.skLab.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 821 /* gameGuideTip4 */);
            self.skLab1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 822 /* gameGuideTip5 */);
            self.skLab2.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 823 /* gameGuideTip6 */);
            self.skLab3.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 824 /* gameGuideTip7 */);
            self.skLab4.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 825 /* gameGuideTip8 */);
            self.skLab5.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 826 /* gameGuideTip9 */);
        };
        FourthGuide.prototype.clickNext = function () {
            game.GuideMgr.guideState(4 /* fif */);
        };
        return FourthGuide;
    }(game.UIFullFW));
    game.FourthGuide = FourthGuide;
    __reflect(FourthGuide.prototype, "game.FourthGuide");
})(game || (game = {}));
var game;
(function (game) {
    var SecondGuide = (function (_super) {
        __extends(SecondGuide, _super);
        function SecondGuide() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "gameGuide2Skin";
            return _this;
        }
        SecondGuide.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.clickNext, self);
            self.skSure.setTarget(self.clickNext, self);
            self.skLab.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 819 /* gameGuideTip2 */);
            self.skLab1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 828 /* gameGuideTip11 */);
            self.skLab2.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 830 /* gameGuideTip13 */);
            self.skLab3.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 829 /* gameGuideTip12 */);
        };
        SecondGuide.prototype.clickNext = function () {
            game.GuideMgr.guideState(2 /* third */);
        };
        return SecondGuide;
    }(game.UIFullFW));
    game.SecondGuide = SecondGuide;
    __reflect(SecondGuide.prototype, "game.SecondGuide");
})(game || (game = {}));
var game;
(function (game) {
    var ThirdGuide = (function (_super) {
        __extends(ThirdGuide, _super);
        function ThirdGuide() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "gameGuide3Skin";
            return _this;
        }
        ThirdGuide.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.clickNext, self);
            self.skSure.setTarget(self.clickNext, self);
            self.skLab.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 820 /* gameGuideTip3 */);
            self.skLab1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 831 /* gameGuideTip14 */);
            self.skLab2.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 832 /* gameGuideTip15 */);
            self.skLab3.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 834 /* gameGuideTip16 */);
        };
        ThirdGuide.prototype.clickNext = function () {
            game.GuideMgr.guideState(3 /* four */);
        };
        return ThirdGuide;
    }(game.UIFullFW));
    game.ThirdGuide = ThirdGuide;
    __reflect(ThirdGuide.prototype, "game.ThirdGuide");
})(game || (game = {}));
var game;
(function (game) {
    var OutGameList = (function (_super) {
        __extends(OutGameList, _super);
        function OutGameList(isPure, skin) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = skin || "gameMenuListSkin";
            self._isPure = isPure || false;
            self._gameRecdY = self.skRecordPure.y;
            self._soundY = self.skmusicPure.y;
            return _this;
        }
        OutGameList.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var soundMo = game.dataMgr.soundMo;
            self.setScOffX();
            self.skPure.visible = self._isPure;
            var state = soundMo.getState();
            self.skmusicPure.icon = state ? "menuList@txt_music" /* music */ : "menuList@txt_notMusic" /* notMusic */;
            self.skmusicPure.setTarget(function () {
                TRain.soundMgr.playSFX("click" /* click */);
                var curState = soundMo.getState();
                soundMo.setState(!curState);
                self.skmusicPure.icon = !curState ? "menuList@txt_music" /* music */ : "menuList@txt_notMusic" /* notMusic */;
            }, self);
            self.skRecordPure.setTarget(function () {
                var curGameId = game.dataMgr.accMo.gameId;
                game.gameScene.openPopup(new game.GameRecord(curGameId));
            }, self);
        };
        /**
         *
         * @param val 是否是试玩场
         */
        OutGameList.prototype.setFreeRoom = function (val) {
            var self = this;
            var isFreeRoom = val;
            self.skRecordPure.visible = !isFreeRoom;
            if (isFreeRoom) {
                self.skmusicPure.y = self._gameRecdY;
                if (self._isPure) {
                    self.skDbImg.source = "menuList@db02" /* Popup02 */;
                    self.skPure.y = self._soundY;
                }
                else {
                    self.skDbImg.source = "menuList@db03" /* Popup03 */;
                }
            }
            else {
                self.skDbImg.source = self._isPure ? "menuList@db01" /* Popup01 */ : "menuList@db02" /* Popup02 */;
            }
        };
        OutGameList.prototype.setScOffX = function () {
            var self = this;
            var scOffX = CONF.scOffx;
            self.skBtn.right += scOffX;
            self.skGroup.right += scOffX;
        };
        return OutGameList;
    }(cui.Component));
    game.OutGameList = OutGameList;
    __reflect(OutGameList.prototype, "game.OutGameList");
})(game || (game = {}));
var game;
(function (game) {
    var RebateDetailView = (function (_super) {
        __extends(RebateDetailView, _super);
        function RebateDetailView(ts) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "rebateDetailSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            self.pri = 10000 /* top */;
            self._ts = ts;
            return _this;
        }
        RebateDetailView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self.skList.itemRender = RebateDetailItemView;
            self.skList.dataProvider = self._itemPro = new cui.ArrayCollection();
            game.dataMgr.generalMo.askRebateDetail(self._ts);
            game.dataMgr.generalMo.addListener("GetRebateDetail" /* GetRebateDetail */, self.setData, self);
        };
        RebateDetailView.prototype.setData = function (info) {
            var self = this;
            // let dataKey: NET_CONF.msg_rebate[] = [];
            // for (let key in info) {
            //     let data = info[key];
            //     if (data.gameid > 0) {
            //         let tid = self.getClassType(data.gameid);
            //         if (dataKey[tid]) {
            //             dataKey[tid].rebate += data.rebate;
            //             dataKey[tid].bet += data.bet;
            //         } else {
            //             dataKey[tid] = data;
            //         }
            //     }
            // }
            // if (dataKey) {
            //     let showArr = [];
            //     dataKey.forEach(item => {
            //         showArr.push(item);
            //     });
            //     self._itemPro.source = showArr;
            // }
            var dataKey = [];
            for (var key in info) {
                //踢除后台扣除返水数据
                if (info[key].gameid > 0) {
                    dataKey.push(info[key]);
                }
            }
            dataKey.sort(function (a, b) {
                return b.rebate - a.rebate;
            });
            self._itemPro.source = dataKey;
        };
        //获取游戏类型
        RebateDetailView.prototype.getClassType = function (gameid) {
            var self = this;
            var conf = game.dataMgr.gameMo.getGmdConf(gameid);
            return conf.class || 0 /* all */;
        };
        RebateDetailView.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.generalMo.rmvListener("GetRebateDetail" /* GetRebateDetail */, self);
            _super.prototype.onDispose.call(this);
        };
        return RebateDetailView;
    }(game.UIPopup));
    game.RebateDetailView = RebateDetailView;
    __reflect(RebateDetailView.prototype, "game.RebateDetailView");
    var RebateDetailItemView = (function (_super) {
        __extends(RebateDetailItemView, _super);
        function RebateDetailItemView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "detailItemSkin";
            return _this;
        }
        RebateDetailItemView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
        };
        RebateDetailItemView.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            // let conf = dataMgr.gameMo.getGmdConf(data.gameid);
            // let tp = langConsts.mainLang.gameClassTp0 + conf.class || 0;
            // self.skType.text = TRain.langMgr.getTxt("mainLang", tp);
            self.skType.text = game.dataMgr.gameMo.getGmdConf(data.gameid).nm || "";
            self.skBet.text = game.DataFormat.convertYuanString2(data.bet, true);
            self.skAwd.text = game.DataFormat.convertYuanString2(data.rebate, true);
        };
        return RebateDetailItemView;
    }(cui.DataItem));
    game.RebateDetailItemView = RebateDetailItemView;
    __reflect(RebateDetailItemView.prototype, "game.RebateDetailItemView");
})(game || (game = {}));
var game;
(function (game) {
    var RebateView = (function (_super) {
        __extends(RebateView, _super);
        function RebateView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "rebateSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        RebateView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self.skMenuGrp.setTarget(self.cliskMenus, self);
            self.skBetList.itemRender = RebateListItemView;
            self.skBetList.dataProvider = self._betItemPro = new cui.ArrayCollection();
            self.skLogList.itemRender = RebateLogItemView;
            self.skLogList.dataProvider = self._logItemPro = new cui.ArrayCollection();
            self.skReTxt.text = TRain.langMgr.getTxt("mainLang", 1054 /* rebateMoneyTip */);
            self._selTag = 1;
            self.skMenuGrp.selectTag = 0;
            game.dataMgr.generalMo.addListener("GetRebateList" /* GetRebateList */, function (tp, data) {
                if (tp == 0) {
                    self.updateBetList(data);
                }
                else {
                    self.updateLogList(data);
                }
            }, self);
            game.dataMgr.generalMo.addListener("GetRebateAward" /* GetRebateAward */, self.getAwardResult, self);
            self.skAwdBtn.setTarget(function () {
                TRain.soundMgr.playSFX("click" /* click */);
                game.dataMgr.generalMo.askRebateAwd();
            }, self);
        };
        //暂无记录  目前只有返水记录界面需要展示
        RebateView.prototype.setEmpty = function (empty, isLog) {
            var self = this;
            self.skTitle.visible = !empty;
            self.skBetGrp.visible = !empty;
            self.skLogGrp.visible = !empty;
            self.skEmpty.visible = empty;
            if (!empty) {
                self.skLogGrp.visible = isLog;
                self.skBetGrp.visible = !isLog;
            }
        };
        RebateView.prototype.cliskMenus = function (item) {
            var self = this;
            if (self._selTag == item.tag)
                return;
            TRain.soundMgr.playSFX("click" /* click */);
            self._selTag = item.tag;
            if (item.tag == 0) {
                self.setEmpty(false, false);
                self.skRebate.text = game.DataFormat.convertYuanString2(0, true);
                self.setAwardBtn(false);
                game.dataMgr.generalMo.askRebateList();
            }
            else {
                self.setEmpty(true, false);
                game.dataMgr.generalMo.askRebateLog();
            }
        };
        //自助返水界面，需要展示所有游戏类型的返水
        RebateView.prototype.updateBetList = function (data) {
            var self = this;
            // let lists = self.getAllTypeLog();
            // if (data.info) {
            //     self.setEmpty(false, false);
            //     let infos = data.info;
            //     let golds = 0;
            //     for (let key in infos) {
            //         let data = infos[key];
            //         golds += data.rebate;
            //         //后台扣除返水 服务器传的gameid是0  这里需要判断为0的不会显示在列表里 但会扣除总领奖金额
            //         if (data.gameid > 0) {
            //             let tid = self.getClassType(data.gameid);
            //             for (let key in lists) {
            //                 if (lists[key].type == tid) {
            //                     lists[key].bet += data.bet;
            //                     lists[key].rebate += data.rebate;
            //                 }
            //             }
            //         }
            //     }
            //     lists.sort(function (a: IRebateData, b: IRebateData) {
            //         return b.rebate - a.rebate;
            //     });
            //     if (golds > 0) {
            //         self.setAwardBtn(true);
            //     } else {
            //         golds = 0;
            //         self.setAwardBtn(false);
            //     }
            //     self.skRebate.text = DataFormat.convertYuanString2(golds, true);
            // }
            // self._betItemPro.source = lists;
            if (data.info) {
                self.setEmpty(false, false);
                var infos = data.info;
                var golds = 0;
                var showArr = [];
                for (var key in infos) {
                    //踢除后台扣除返水数据
                    if (infos[key].gameid > 0) {
                        var showData = {
                            handle: self,
                            gameid: infos[key].gameid,
                            rebate: infos[key].rebate,
                            bet: infos[key].bet
                        };
                        showArr.push(showData);
                    }
                    golds += infos[key].rebate;
                }
                showArr.sort(function (a, b) {
                    return b.rebate - a.rebate;
                });
                if (golds > 0) {
                    self.setAwardBtn(true);
                }
                else {
                    golds = 0;
                    self.setAwardBtn(false);
                }
                self.skRebate.text = game.DataFormat.convertYuanString2(golds, true);
                self._betItemPro.source = showArr;
            }
        };
        //所有类型返回记录，默认数据都是0
        RebateView.prototype.getAllTypeLog = function () {
            var self = this;
            var showArr = [];
            for (var i = 1; i < 7; i++) {
                var showData = {
                    handle: self,
                    gameid: 0,
                    type: i,
                    typeN: self.getTypeName(i),
                    rebate: 0,
                    bet: 0
                };
                showArr.push(showData);
            }
            return showArr;
        };
        //获取游戏类型名称
        RebateView.prototype.getTypeName = function (tid) {
            var self = this;
            var txt = 1046 /* gameClassTp0 */ + tid;
            return TRain.langMgr.getTxt("mainLang", txt);
        };
        //获取游戏类型
        RebateView.prototype.getClassType = function (gameid) {
            var self = this;
            var conf = game.dataMgr.gameMo.getGmdConf(gameid);
            return conf.class || 0 /* all */;
        };
        //领奖按钮是否可用
        RebateView.prototype.setAwardBtn = function (enabled) {
            var self = this;
            self.skAwdBtn.enabled = enabled;
            if (enabled) {
                self.skAwdBtn.icon = "rebate@txt_get";
            }
            else {
                self.skAwdBtn.icon = "rebate@txt_get1";
            }
        };
        //返水记录
        RebateView.prototype.updateLogList = function (data) {
            var self = this;
            if (data.info) {
                self.setEmpty(false, true);
                var list = data.info.sort(function (a, b) {
                    return b.ts - a.ts;
                });
                self._logItemPro.source = list;
            }
        };
        //领奖成功
        RebateView.prototype.getAwardResult = function (gold) {
            var self = this;
            self.skRebate.text = game.DataFormat.convertYuanString2(0, true);
            self.setAwardBtn(false);
            game.dataMgr.accMo.addVal("gold", gold);
            game.gameScene.openPopup(new game.GetReward(gold), null, true);
            // self._betItemPro.source = self.getAllTypeLog();
            self._betItemPro.source = [];
        };
        RebateView.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.generalMo.rmvListener("GetRebateList" /* GetRebateList */, self);
            game.dataMgr.generalMo.rmvListener("GetRebateAward" /* GetRebateAward */, self);
            _super.prototype.onDispose.call(this);
        };
        return RebateView;
    }(game.UIPopup));
    game.RebateView = RebateView;
    __reflect(RebateView.prototype, "game.RebateView");
    var RebateListItemView = (function (_super) {
        __extends(RebateListItemView, _super);
        function RebateListItemView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "rebateItemSkin";
            self._gameid = 0;
            return _this;
        }
        RebateListItemView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skGoBtn.setTarget(function () {
                data.handle.close();
                // game.dataMgr.generalMo.showGameClass(data.type);
                if (self._gameid > 0) {
                    game.gameScene.startGame(self._gameid);
                }
            }, self);
        };
        RebateListItemView.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            if (data) {
                self._gameid = data.gameid;
                self.skType.text = game.dataMgr.gameMo.getGmdConf(data.gameid).nm || ""; //data.typeN;
                self.skBet.text = game.DataFormat.convertYuanString2(data.bet, true);
                self.skAwd.text = game.DataFormat.convertYuanString2(data.rebate, true);
            }
        };
        return RebateListItemView;
    }(cui.DataItem));
    game.RebateListItemView = RebateListItemView;
    __reflect(RebateListItemView.prototype, "game.RebateListItemView");
    var RebateLogItemView = (function (_super) {
        __extends(RebateLogItemView, _super);
        function RebateLogItemView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "logItemSkin";
            return _this;
        }
        RebateLogItemView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
        };
        RebateLogItemView.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            if (data) {
                self.skTime.text = TimeUtil.formatHmsTime(data.ts);
                self.skBet.text = game.DataFormat.convertYuanString2(data.bet, true);
                self.skAwd.text = game.DataFormat.convertYuanString2(data.rebate, true);
                self.skDetail.setTarget(function () {
                    TRain.soundMgr.playSFX("click" /* click */);
                    game.gameScene.openPopup(new game.RebateDetailView(data.ts), null, true);
                }, self);
            }
        };
        return RebateLogItemView;
    }(cui.DataItem));
    game.RebateLogItemView = RebateLogItemView;
    __reflect(RebateLogItemView.prototype, "game.RebateLogItemView");
})(game || (game = {}));
var game;
(function (game) {
    var CheckBox = (function (_super) {
        __extends(CheckBox, _super);
        function CheckBox() {
            var _this = _super.call(this) || this;
            _this._isClick = false;
            return _this;
        }
        Object.defineProperty(CheckBox.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                var self = this;
                self._label = value;
                var skLabel = self.skLabel;
                if (skLabel) {
                    skLabel.text = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "state", {
            get: function () {
                var self = this;
                var isClick = self._isClick;
                return isClick ? "down" : "up";
            },
            set: function (value) {
                var self = this;
                self._isClick = value == "down";
                self.skIcon.curState = value;
            },
            enumerable: true,
            configurable: true
        });
        CheckBox.prototype.buttonReleased = function () {
            _super.prototype.buttonReleased.call(this);
            var self = this;
            var curState = !self._isClick;
            self.skIcon.curState = curState ? "down" : "up";
            self._isClick = curState;
        };
        return CheckBox;
    }(cui.SimpleButton));
    game.CheckBox = CheckBox;
    __reflect(CheckBox.prototype, "game.CheckBox");
})(game || (game = {}));
var game;
(function (game) {
    var CreateRoomView = (function (_super) {
        __extends(CreateRoomView, _super);
        function CreateRoomView(roomType) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "createRoomSkin";
            self._roomType = roomType;
            return _this;
        }
        CreateRoomView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var room_type = self._roomType;
            var roomCardList = game.dataMgr.accMo.getRoomCardList(room_type);
            var i = 0, len = roomCardList.length;
            for (; i < len; i++) {
                var roomCard = roomCardList[i];
                var img = new game.RoomMenuImage();
                img.skinName = "fkGameItemSkin";
                var tmpSrc = "roomMode@txt_" + roomCard.game_id;
                var upSrc = tmpSrc + "_1";
                var downSrc = tmpSrc + "_2";
                img.icon = upSrc;
                img.setIconState(upSrc, downSrc);
                img.tag = i;
                var row = Math.floor(i / 2);
                var col = i - row * 2;
                img.x = col * 195;
                img.y = row * (74 + 10); //74是高 ，10是间距
                self.skGameMenu.addChild(img);
            }
            self.skGameMenu.setTarget(self.clickMenu, self);
            self.skGameMenu.selectTag = 0;
            self.skClose.setTarget(self.close, self);
            self.skSure.setTarget(self.clickSure, self);
            // dataMgr.gsMo.startConn();
            var guildMo = game.dataMgr.guildMo;
            self.skRecord.setTarget(function () {
                var accId = game.dataMgr.accMo.getData().aid;
                guildMo.askRoomReplayHistory(accId);
            }, self);
            guildMo.addListener("replay_history" /* replay_history */, function () {
                game.gameScene.openPopup(new game.RoomCardRecordview());
                self.close();
            }, self);
            guildMo.addListener("room_card" /* ROOM_CARD */, function (gameId) {
                var curGameData = game.dataMgr.gameMo.getGameData(gameId);
                if (!curGameData.conf.isFriendGm) {
                    game.gameScene.startGame(gameId);
                }
            }, self);
            self.skTip.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 950 /* createFkTip */);
            if (room_type == 1 /* ert_points */) {
                self.skFkNum.text = String(game.dataMgr.accMo.getData().room_card || 0);
                game.dataMgr.accMo.addPropListener("room_card", function () {
                    if (self.skFkNum) {
                        self.skFkNum.text = String(game.dataMgr.accMo.getData().room_card || 0);
                    }
                }, self);
            }
            else if (room_type == 3 /* ert_guild_points */) {
                var guildMo_1 = game.dataMgr.guildMo;
                var guildData_1 = guildMo_1.getGuildData();
                self.skFkNum.text = String(guildData_1.roomcard_cnt || 0);
                guildMo_1.addListener("member_change" /* MEMBER_CHANGE */, function () {
                    self.skFkNum.text = String(guildData_1.roomcard_cnt || 0);
                }, self);
            }
            self.skRecord.visible = self.skRecharge.visible = room_type == 1 /* ert_points */;
            self.skFkImg.source = room_type == 1 /* ert_points */ ? "roomMode@txt_fkIcon1" : "friendCircle@kaPan";
            self.skRecharge.setTarget(function () {
                if (game.dataMgr.generalMo.isFunOpen(7 /* shop */)) {
                    game.gameScene.showHallUI(2 /* shop */);
                    self.close();
                }
            }, self);
        };
        CreateRoomView.prototype.clickMenu = function (item) {
            var self = this;
            self.skListGrp.removeChildren();
            self._clickTm = 0;
            var tag = item.tag;
            self.skListGrp.createCardView(tag, self._roomType);
        };
        CreateRoomView.prototype.clickSure = function () {
            var self = this;
            var data = self.skListGrp.getChooseData();
            if (data) {
                var timers = egret.getTimer();
                if (timers - 3000 > self._clickTm) {
                    game.dataMgr.guildMo.createRoom(data);
                    self._clickTm = timers;
                }
            }
        };
        CreateRoomView.prototype.onDispose = function () {
            var self = this;
            var guildMo = game.dataMgr.guildMo;
            guildMo.rmvListener("room_card" /* ROOM_CARD */, self);
            guildMo.rmvListener("replay_history" /* replay_history */, self);
            game.dataMgr.accMo.rmvPropListener("room_card", self);
            guildMo.rmvListener("member_change" /* MEMBER_CHANGE */, self);
            _super.prototype.onDispose.call(this);
        };
        return CreateRoomView;
    }(game.UIPopup));
    game.CreateRoomView = CreateRoomView;
    __reflect(CreateRoomView.prototype, "game.CreateRoomView");
})(game || (game = {}));
var game;
(function (game) {
    var JoinRoomView = (function (_super) {
        __extends(JoinRoomView, _super);
        function JoinRoomView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "joinRoomSkin";
            self.hCenter = 0;
            self.vCenter = 0;
            self._flag = 0;
            self._ids = [];
            return _this;
        }
        JoinRoomView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(function () {
                game.GameUtil.playClickSound();
                self.close();
            }, self);
            self.skCodeMenuGrp.setTarget(self.menuClick, self);
            game.dataMgr.guildMo.addListener("room_card" /* ROOM_CARD */, function (gameId) {
                self.close();
                game.gameScene.startGame(gameId);
            }, self);
        };
        JoinRoomView.prototype.menuClick = function (item) {
            var self = this;
            var tag = item.tag;
            //输入数字
            if (tag <= 9) {
                if (self._flag <= 4) {
                    var lab = self.skNumGrp.getChildAt(self._flag);
                    lab.text = tag.toString();
                    self._ids.push(tag);
                    self._flag++;
                }
                //重输
            }
            else if (tag == 10) {
                for (var j = 0; j < 5; j++) {
                    var lab1 = self.skNumGrp.getChildAt(j);
                    lab1.text = "";
                    self._flag = 0;
                    self._ids.length = 0;
                }
                //撤回
            }
            else {
                if (self._flag > 0) {
                    self._flag--;
                    var lab2 = self.skNumGrp.getChildAt(self._flag);
                    lab2.text = "";
                    self._ids.pop();
                }
            }
            //进入房间
            if (self._flag == 5) {
                var fkId = self.getFkId();
                game.dataMgr.guildMo.joinRoom(fkId);
            }
        };
        JoinRoomView.prototype.getFkId = function () {
            //获取当前ids
            var self = this;
            var ids = self._ids;
            var enterRoomId = 0;
            var len = ids.length - 1;
            for (var i = len; i >= 0; i--) {
                var id = ids[i];
                var pow = Math.pow(10, len - i);
                enterRoomId += id * pow;
            }
            return enterRoomId;
        };
        JoinRoomView.prototype.onDispose = function () {
            game.dataMgr.guildMo.rmvListener("room_card" /* ROOM_CARD */, this);
            _super.prototype.onDispose.call(this);
        };
        return JoinRoomView;
    }(game.UIPopup));
    game.JoinRoomView = JoinRoomView;
    __reflect(JoinRoomView.prototype, "game.JoinRoomView");
})(game || (game = {}));
var game;
(function (game) {
    var OptionCardView = (function (_super) {
        __extends(OptionCardView, _super);
        function OptionCardView() {
            return _super.call(this) || this;
        }
        OptionCardView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            game.notifiCenter.addListener("option_card" /* OPTION_CARD */, self.changeOption, self);
        };
        OptionCardView.prototype.createCardView = function (tag, roomType) {
            var self = this;
            self._svrDatas = [];
            self._optionCfg = {};
            var roomCardList = game.dataMgr.accMo.getRoomCardList(roomType);
            var curRoomCard = roomCardList[tag];
            var gameId = self._curGmId = curRoomCard.game_id;
            var roomCardConf = game.dataMgr.guildMo.getRoomCardConf(gameId);
            var optionConfs = roomCardConf.option;
            for (var i = 0, len = optionConfs.length; i < len; i++) {
                var optionConf = optionConfs[i];
                var selItem = new game.SelItemComp(roomType);
                var firstField = optionConf.fieldNm;
                for (var key in curRoomCard) {
                    if (firstField == key) {
                        var svrData = curRoomCard[key];
                        var svrData1 = [];
                        self._svrDatas[i] = svrData;
                        if (optionConf.fieldNm1) {
                            var secondField = optionConf.fieldNm1;
                            self._svrData1 = svrData1 = curRoomCard[secondField];
                        }
                        selItem.setData(i, optionConf, svrData, svrData1);
                    }
                }
                var childNum = self.numChildren;
                selItem.y = childNum * selItem.height;
                self.addChild(selItem);
            }
        };
        OptionCardView.prototype.changeOption = function (cardData) {
            var self = this;
            var idx = cardData.idx; //
            var tag = cardData.tag; //选中的
            var gameId = self._curGmId;
            var roomCardConf = game.dataMgr.guildMo.getRoomCardConf(gameId);
            var optionConfs = roomCardConf.option;
            var hasJoinCond = self.hasJoinCond(optionConfs);
            var cardConf = optionConfs[idx]; //选中的配置
            var selCfg = self._optionCfg;
            //去掉服务器发过来的字段的s
            var svrData = self._svrDatas[idx];
            var fieldNm = cardConf.fieldNm.substr(0, cardConf.fieldNm.length - 1);
            if (cardConf.type == 2) {
                //多选
                var chooseTypes = selCfg[fieldNm] || [];
                var svrTag = svrData[tag];
                var typeTag = chooseTypes.indexOf(svrTag);
                if (typeTag != -1) {
                    chooseTypes.splice(typeTag, 1);
                }
                else {
                    chooseTypes.push(svrTag);
                }
                selCfg[fieldNm] = chooseTypes;
            }
            else {
                //单选
                if (fieldNm == "round") {
                    var childNum = self.numChildren;
                    var costItem = self.getChildAt(childNum - 1);
                    costItem.changeCardNum(tag);
                }
                else if (fieldNm == "base_gold" && hasJoinCond) {
                    var costItem = self.getChildAt(1);
                    if (costItem)
                        costItem.chgJoinCondition(tag);
                }
                selCfg[fieldNm] = svrData[tag];
                if (cardConf.fieldNm1) {
                    var fieldNm1 = cardConf.fieldNm1.substr(0, cardConf.fieldNm1.length - 1);
                    selCfg[fieldNm1] = self._svrData1[tag];
                }
            }
            if (roomCardConf.playNum) {
                selCfg["player_count"] = roomCardConf.playNum;
            }
            selCfg.game_id = self._curGmId;
        };
        OptionCardView.prototype.hasJoinCond = function (optionConfs) {
            for (var i = 0, len = optionConfs.length; i < len; i++) {
                var optionConf = optionConfs[i];
                if (optionConf.fieldNm == "gold_conditions") {
                    return true;
                }
            }
            return false;
        };
        OptionCardView.prototype.getChooseData = function () {
            return this._optionCfg;
        };
        OptionCardView.prototype.dispose = function () {
            game.notifiCenter.rmvListener("option_card" /* OPTION_CARD */, this);
            _super.prototype.dispose.call(this);
        };
        return OptionCardView;
    }(cui.Group));
    game.OptionCardView = OptionCardView;
    __reflect(OptionCardView.prototype, "game.OptionCardView");
})(game || (game = {}));
var game;
(function (game) {
    var RoomCardRecordview = (function (_super) {
        __extends(RoomCardRecordview, _super);
        function RoomCardRecordview(guildName) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "roomCardRecordSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            self._guildName = guildName;
            return _this;
        }
        RoomCardRecordview.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(function () {
                // dataMgr.gsMo.endConn();
                self.close();
            }, self);
            self.skList.itemRender = RecordItem;
            var dataPro = self._dataPro = new cui.ArrayCollection();
            self.skList.dataProvider = dataPro;
            self.updateView();
            self.skTips.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 934 /* recordsKept */);
        };
        RoomCardRecordview.prototype.updateView = function () {
            var self = this;
            var recordArr = [];
            // self.skInfoScr.setScrollTop(0);
            var data = game.dataMgr.guildMo.getRecordDatas();
            self.skNoRecord.visible = !data;
            if (data) {
                for (var i = 0; i < data.length; i++) {
                    var recordInfo = data[i];
                    var showData = {
                        handle: self,
                        index: i + 1,
                        game_id: recordInfo.game_id,
                        table_id: recordInfo.table_id,
                        rounds_cnt: recordInfo.rounds_cnt,
                        begin_time: recordInfo.begin_time,
                        players: recordInfo.players,
                        rounds: recordInfo.rounds,
                        base_score: recordInfo.base_score,
                        guildName: self._guildName,
                    };
                    recordArr.push(showData);
                }
                self._dataPro.source = recordArr;
            }
        };
        RoomCardRecordview.prototype.click = function (item) {
            var self = this;
            self.close();
            var roomRdInnerView = new RoomRdInnerView();
            game.gameScene.openPopup(roomRdInnerView);
            roomRdInnerView.setData(item.data);
        };
        RoomCardRecordview.prototype.onDispose = function () {
            _super.prototype.onDispose.call(this);
        };
        return RoomCardRecordview;
    }(game.UIPopup));
    game.RoomCardRecordview = RoomCardRecordview;
    __reflect(RoomCardRecordview.prototype, "game.RoomCardRecordview");
    var RecordItem = (function (_super) {
        __extends(RecordItem, _super);
        function RecordItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "recordItemSkin";
            self._colors = [0xffedae, 0x913e00, 0x52402f];
            self._winLoseCols = [[0xffde00, 0x00e4ff], [0xc50000, 0x00760b], [0xa50000, 0x00760b]];
            return _this;
        }
        RecordItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skPlayBack.setTarget(function () {
                data.handle.click(self);
            }, self);
        };
        RecordItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            //格式化成当前时间
            self.skNum.text = data.index.toString();
            var date = new Date(data.begin_time * 1000);
            self.skTime.text = date.toLocaleString();
            var curGameConf = game.dataMgr.gameMo.getGameData(data.game_id);
            self.skGameName.text = curGameConf.conf.nm;
            var tableId = String(data.table_id);
            if (!!data.guildName) {
                tableId = game.DataFormat.getGuildId(data.table_id, 3);
            }
            else {
                tableId = game.DataFormat.getGuildId(data.table_id, 5);
            }
            self.skRoomId.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 932 /* roomIdLang */), tableId);
            self.skJu.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 933 /* howInnings */), data.rounds_cnt);
            var players = data.players;
            self.rmvAllGrpChild();
            // self.skInnerPlayerGrp.removeChildren();
            var i = 0, len = players.length;
            var labSize = 20; //根据人数动态改变size大小
            var labWidth = 180;
            if (len == 5) {
                labSize = 16;
                labWidth = 145;
            }
            else if (len == 6) {
                labSize = 14;
                labWidth = 130;
            }
            var curRes = parseInt(CONF.res["all"]) || 0;
            var newPlayCol = self._colors[curRes];
            var winLoseCols = self._winLoseCols[curRes];
            for (; i < len; i++) {
                var playInfo = players[i];
                var win = playInfo.player_win;
                var playLab = new cui.Label();
                var winCol = win > 0 ? winLoseCols[0] : winLoseCols[1];
                var winLab = win > 0 ? ("+" + win) : String(win);
                var val = "<font  color= " + newPlayCol + ">" + playInfo.player_name + ":</font>" + "<font  color= " + winCol + ">" + winLab + "</font>";
                playLab.textFlow = cui.htmlParser.parser(val);
                playLab.x = i * (labWidth + 10);
                playLab.size = labSize;
                self.skplayerItemGrp.addChild(playLab);
            }
            self.skGuildId.visible = !!data.guildName;
            self.skGuildId.text = data.guildName;
        };
        RecordItem.prototype.rmvAllGrpChild = function () {
            var self = this;
            var skplayerItemGrp = self.skplayerItemGrp;
            for (var i = 0; i < skplayerItemGrp.numChildren; i++) {
                skplayerItemGrp.getChildAt(i).dispose();
            }
            skplayerItemGrp.removeChildren();
        };
        return RecordItem;
    }(cui.DataItem));
    game.RecordItem = RecordItem;
    __reflect(RecordItem.prototype, "game.RecordItem");
    var RoomRdInnerView = (function (_super) {
        __extends(RoomRdInnerView, _super);
        function RoomRdInnerView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "roomRdInnerSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            self._detailData = {};
            self._colors = [0xffedae, 0x913e00, 0x52402f];
            self._winLoseCols = [[0xffde00, 0x00e4ff], [0xc50000, 0x00760b], [0xa50000, 0x00760b]];
            return _this;
        }
        RoomRdInnerView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(function () {
                self.close();
                game.gameScene.openPopup(new RoomCardRecordview(self._guildName));
            }, self);
            game.dataMgr.guildMo.addListener("replay_detail" /* replay_detail */, self.detailBack, self);
            game.dataMgr.guildMo.addListener("room_card" /* ROOM_CARD */, function (gameId) {
                self.close();
                // dataMgr.gsMo.endConn();
                game.gameScene.startGame(gameId, { detailData: self._detailData });
            }, self);
        };
        RoomRdInnerView.prototype.setData = function (data) {
            var self = this;
            self.skList.itemRender = RoomRecordItem;
            var dataPro = self._itemPro = new cui.ArrayCollection();
            self.skList.dataProvider = dataPro;
            self._data = data;
            self.updateView();
        };
        RoomRdInnerView.prototype.detailBack = function (detailData) {
            var self = this;
            self._detailData = detailData;
            var data = self._data;
            self._detailData.game_id = data.game_id;
            self._detailData.table_id = data.table_id;
            self._detailData.rounds_cnt = data.rounds_cnt;
            self._detailData.begin_time = data.begin_time;
            self._detailData.players = data.players;
            self._detailData.idx = self._curIdx;
            self._detailData.base_score = data.base_score;
            self._detailData.player_win = data.rounds[self._curIdx].player_win;
            var gameId = data.game_id;
            var gameMo = game.dataMgr.gameMo;
            var updateData = game.dataMgr.gameMo.getGameData(gameId).update;
            if (updateData.state == 0 /* NONE */) {
                game.dataMgr.guildMo.detailData = data;
                game.gameScene.startGame(data.game_id, { detailData: self._detailData });
            }
            else if (updateData.state == 2 /* UPDATING */) {
            }
            else {
                //下载失败等于重新下载
                gameMo.startUpdateGmd(gameId);
                game.gameScene.openPopup(new game.UpdataGame(gameId), null, true);
            }
        };
        RoomRdInnerView.prototype.updateView = function () {
            var self = this;
            var data = self._data;
            //格式化成当前时间
            self.skNum.text = data.index.toString();
            var date = new Date(data.begin_time * 1000);
            self.skTime.text = date.toLocaleString();
            var curGameConf = game.dataMgr.gameMo.getGameData(data.game_id);
            self.skGameName.text = curGameConf.conf.nm;
            var tableId;
            if (!!data.guildName) {
                tableId = game.DataFormat.getGuildId(data.table_id, 3);
            }
            else {
                tableId = game.DataFormat.getGuildId(data.table_id, 5);
            }
            self.skRoomId.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 932 /* roomIdLang */), tableId);
            self.skJu.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 933 /* howInnings */), data.rounds_cnt);
            var players = data.players;
            self.rmvAllGrpChild();
            var i = 0, len = players.length;
            var labSize = 20; //根据人数动态改变size大小
            var labWidth = 180;
            if (len == 5) {
                labSize = 16;
                labWidth = 145;
            }
            else if (len == 6) {
                labSize = 14;
                labWidth = 130;
            }
            var curRes = parseInt(CONF.res["all"]) || 0;
            var newPlayCol = self._colors[curRes];
            var winLoseCols = self._winLoseCols[curRes];
            for (; i < len; i++) {
                var playInfo = players[i];
                var win = playInfo.player_win;
                var playLab = new cui.Label();
                var winCol = win > 0 ? winLoseCols[0] : winLoseCols[1];
                var winLab = win > 0 ? ("+" + win) : String(win);
                var val = "<font  color= " + newPlayCol + ">" + playInfo.player_name + ":</font>" + "<font  color= " + winCol + ">" + winLab + "</font>";
                playLab.textFlow = cui.htmlParser.parser(val);
                playLab.x = i * (labWidth + 10);
                playLab.size = labSize;
                self.skplayerItemGrp.addChild(playLab);
            }
            for (i = 0; i < len; i++) {
                var playInfo = players[i];
                var playLab = new cui.Label();
                playLab.text = playInfo.player_name;
                playLab.x = (i * labWidth) + 50;
                playLab.size = labSize;
                playLab.textColor = newPlayCol;
                self.skNmGrp.addChild(playLab);
            }
            var recordItemArr = [];
            var wins = data.rounds;
            for (var i_6 = 0; i_6 < wins.length; i_6++) {
                var recordInfo = wins[i_6];
                var showData = {
                    handle: self,
                    idx: i_6 + 1,
                    gameId: data.game_id,
                    logId: recordInfo.log_id,
                    wins: recordInfo.player_win,
                };
                recordItemArr.push(showData);
            }
            self._itemPro.source = recordItemArr;
            self.skGuildId.visible = !!data.guildName;
            self.skGuildId.text = data.guildName;
            self._guildName = data.guildName;
        };
        RoomRdInnerView.prototype.rmvAllGrpChild = function () {
            var self = this;
            var skplayerItemGrp = self.skplayerItemGrp;
            var skNmGrp = self.skNmGrp;
            for (var i = 0; i < skplayerItemGrp.numChildren; i++) {
                skplayerItemGrp.getChildAt(i).dispose();
                skNmGrp.getChildAt(i).dispose();
            }
            skplayerItemGrp.removeChildren();
            skNmGrp.removeChildren();
        };
        RoomRdInnerView.prototype.replayClick = function (item) {
            var data = item.data;
            this._curIdx = data.idx - 1;
            game.dataMgr.guildMo.askReplayDetail(data.gameId, data.logId);
        };
        RoomRdInnerView.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.guildMo.rmvListener("replay_detail" /* replay_detail */, self);
            game.dataMgr.guildMo.rmvListener("room_card" /* ROOM_CARD */, self);
            _super.prototype.onDispose.call(this);
        };
        return RoomRdInnerView;
    }(game.UIPopup));
    game.RoomRdInnerView = RoomRdInnerView;
    __reflect(RoomRdInnerView.prototype, "game.RoomRdInnerView");
    var RoomRecordItem = (function (_super) {
        __extends(RoomRecordItem, _super);
        function RoomRecordItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "roomRecordItemSkin";
            self._winLoseCols = [[0xffde00, 0x00e4ff], [0xc50000, 0x00760b], [0xa50000, 0x00760b]];
            return _this;
        }
        RoomRecordItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skPlay.setTarget(function () {
                data.handle.replayClick(self);
            }, self);
        };
        RoomRecordItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            var idx = data.idx;
            var txt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 939 /* manyInner */);
            self.skJuNum.text = StringUtil.printf(txt, idx);
            self.skItemBg.visible = (idx % 2) != 0;
            var wins = data.wins;
            self.rmvAllGrpChild();
            var curRes = parseInt(CONF.res["all"]) || 0;
            var winLoseCols = self._winLoseCols[curRes];
            var i = 0, len = wins.length;
            for (; i < len; i++) {
                var win = wins[i];
                var winLab = win > 0 ? ("+" + win) : String(win);
                var winCol = win > 0 ? winLoseCols[0] : winLoseCols[1];
                var playLab = new cui.Label();
                playLab.text = winLab;
                playLab.x = (i * 180) + 90;
                playLab.size = 24;
                playLab.textColor = winCol;
                self.skPlayerItemInnerGrp.addChild(playLab);
            }
        };
        RoomRecordItem.prototype.rmvAllGrpChild = function () {
            var self = this;
            var skPlayItemGrp = self.skPlayerItemInnerGrp;
            for (var i = 0; i < skPlayItemGrp.numChildren; i++) {
                skPlayItemGrp.getChildAt(i).dispose();
            }
            skPlayItemGrp.removeChildren();
        };
        return RoomRecordItem;
    }(cui.DataItem));
    game.RoomRecordItem = RoomRecordItem;
    __reflect(RoomRecordItem.prototype, "game.RoomRecordItem");
})(game || (game = {}));
var game;
(function (game) {
    var RoomCardView = (function (_super) {
        __extends(RoomCardView, _super);
        function RoomCardView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "roomCardGmSkin";
            return _this;
        }
        RoomCardView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            game.gameScene.homeUI.setNotifyParent(self.skNotify);
            self.skCreateBtn.setTarget(self.roomCardClick, self);
            self.skJoinBtn.setTarget(self.roomCardClick, self);
            self.skFriendBtn.setTarget(self.roomCardClick, self);
            self.skBack.setTarget(function () {
                game.GameUtil.playClickSound();
                game.gameScene.goHome();
                game.gameScene.homeUI.setNotifyParent(null);
            }, self);
            game.dataMgr.guildMo.addListener("ask_record" /* ASK_RECORD */, self.updateRed, self);
            game.dataMgr.accMo.addPropListener("guild_icon", self.updateRed, self);
            self.updateRed();
        };
        RoomCardView.prototype.updateRed = function () {
            var self = this;
            var guildMo = game.dataMgr.guildMo;
            var askDatas = guildMo.getAskRecordData();
            var guild_icon = game.dataMgr.accMo.getData().guild_icon;
            self.skTips.visible = !!guild_icon || askDatas.length > 0;
        };
        RoomCardView.prototype.roomCardClick = function (btn) {
            var tag = btn.tag;
            if (tag == 0 /* create_room */) {
                game.gameScene.openPopup(new game.CreateRoomView(1 /* ert_points */));
            }
            else if (tag == 1 /* join_room */) {
                game.gameScene.openPopup(new game.JoinRoomView());
            }
            else {
                //亲友圈
                //根据是否有工会id判断是否加入工会
                var accData = game.dataMgr.accMo.getData();
                if (accData.guild_id <= 0) {
                    game.gameScene.openPopup(new game.FriendCirclePop());
                }
                else {
                    //打开亲友圈
                    var guildData = game.dataMgr.guildMo.getGuildData();
                    if (guildData.guild_id) {
                        game.gameScene.showHallUI(11 /* friendHome */);
                    }
                }
            }
        };
        RoomCardView.prototype.onDispose = function () {
            var self = this;
            game.gameScene.homeUI.rmvNotifyParent(self.skNotify);
            game.dataMgr.guildMo.rmvAllListener(self);
            game.dataMgr.accMo.rmvPropListener("guild_icon", self);
            _super.prototype.onDispose.call(this);
        };
        return RoomCardView;
    }(game.UIFullFW));
    game.RoomCardView = RoomCardView;
    __reflect(RoomCardView.prototype, "game.RoomCardView");
})(game || (game = {}));
var game;
(function (game) {
    var RoomMenuImage = (function (_super) {
        __extends(RoomMenuImage, _super);
        function RoomMenuImage() {
            return _super.call(this) || this;
        }
        Object.defineProperty(RoomMenuImage.prototype, "selected", {
            get: function () {
                return this._isSel;
            },
            set: function (val) {
                var self = this;
                if (self._isSel == val) {
                    return;
                }
                self._isSel = val;
                self.icon = val ? self._downSrc : self._upSrc;
                self.invalidateProps(4 /* state */);
            },
            enumerable: true,
            configurable: true
        });
        RoomMenuImage.prototype.setIconState = function (upSrc, downSrc) {
            var self = this;
            self._upSrc = upSrc;
            self._downSrc = downSrc;
        };
        return RoomMenuImage;
    }(cui.MenuItemImage));
    game.RoomMenuImage = RoomMenuImage;
    __reflect(RoomMenuImage.prototype, "game.RoomMenuImage");
})(game || (game = {}));
var game;
(function (game) {
    var SelItemComp = (function (_super) {
        __extends(SelItemComp, _super);
        function SelItemComp(room_type) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "selItemSkin";
            self._roomType = room_type;
            return _this;
        }
        /**
         *
         * @param idx 第几行
         * @param data 配置数据
         * @param svrData 服务器数据
         * @param svrData1 特殊情况的数据
         */
        SelItemComp.prototype.setData = function (idx, data, svrData, svrData1) {
            var self = this;
            self._data = data;
            self.skImg.source = self._roomType == 1 /* ert_points */ ? "roomMode@txt_fkIcon1" : "friendCircle@kaPan";
            self.skLab.text = data.desc;
            var options = data.option;
            self.skBottomBg.visible = data.type != 3;
            self.skExpendGrp.visible = data.type == 3;
            self.skBtnGrp.visible = data.type == 2;
            self._svrData = svrData;
            self._idx = idx;
            self._type = data.type;
            if (data.type == 1) {
                var values = [];
                for (var i = 0, len = options.length; i < len; i++) {
                    var openValue = options[i];
                    var svrValue = svrData[i];
                    var svrValue1 = 0;
                    if (data.isMoneyBase) {
                        svrValue = svrValue / 100 /* MoneyBase */;
                    }
                    if (data.fieldNm1) {
                        svrValue1 = svrData1[i];
                        if (data.isMoneyBase) {
                            svrValue1 = svrValue1 / 100 /* MoneyBase */;
                        }
                    }
                    var value = void 0;
                    if (data.fieldNm == "rate_limits" && svrValue == 0) {
                        value = TRain.langMgr.getTxt("mainLang" /* mainLang */, 922 /* noHave */);
                    }
                    else {
                        value = StringUtil.printf(openValue, svrValue, svrValue1);
                    }
                    values.push(value);
                }
                self.initSingleOption(values);
                self.skMenuGrp.setTarget(function (item) {
                    game.notifiCenter.postEvent("option_card" /* OPTION_CARD */, { idx: idx, tag: item.tag, type: data.type });
                }, self);
                self.skMenuGrp.selectTag = 0;
            }
            else if (data.type == 2) {
                var values = [];
                for (var i = 0, len = options.length; i < len; i++) {
                    var openValue = options[i];
                    values.push(openValue);
                }
                self.initMoreOption(values);
            }
            else {
                self.changeCardNum(0);
            }
        };
        //单选
        SelItemComp.prototype.initSingleOption = function (values) {
            var self = this;
            var i = 0, len = values.length;
            for (; i < len; i++) {
                var value = values[i];
                var chooseItem = new cui.MenuItemImage();
                chooseItem.tag = i;
                chooseItem.skinName = "choiceItemSkin";
                chooseItem.label = value;
                chooseItem.x = i * 175;
                self.skMenuGrp.addChild(chooseItem);
            }
        };
        //多选
        SelItemComp.prototype.initMoreOption = function (values) {
            var self = this;
            var i = 0, len = values.length;
            for (; i < len; i++) {
                var value = values[i];
                var chooseItem = new game.CheckBox();
                chooseItem.tag = i;
                chooseItem.skinName = "chooseBtnSkin";
                chooseItem.label = value;
                chooseItem.state = "down";
                chooseItem.x = i * 175;
                game.notifiCenter.postEvent("option_card" /* OPTION_CARD */, { idx: self._idx, tag: i, type: self._type });
                chooseItem.setTarget(function (item) {
                    game.notifiCenter.postEvent("option_card" /* OPTION_CARD */, { idx: self._idx, tag: item.tag, type: self._type });
                }, self);
                self.skBtnGrp.addChild(chooseItem);
            }
        };
        /**
         *
         * @param value 返回的是当前选择的第几个
         */
        SelItemComp.prototype.changeCardNum = function (tag) {
            var self = this;
            self.skUse.text = "x" + self._svrData[tag];
            game.notifiCenter.postEvent("option_card" /* OPTION_CARD */, { idx: self._idx, tag: tag });
        };
        SelItemComp.prototype.chgJoinCondition = function (tag) {
            var self = this;
            var childNum = self.skMenuGrp.getChildAt(0);
            var svrData = self._svrData[tag];
            if (self._data.isMoneyBase) {
                svrData = svrData / 100 /* MoneyBase */;
            }
            childNum.label = String(svrData);
            game.notifiCenter.postEvent("option_card" /* OPTION_CARD */, { idx: self._idx, tag: tag });
        };
        return SelItemComp;
    }(cui.Component));
    game.SelItemComp = SelItemComp;
    __reflect(SelItemComp.prototype, "game.SelItemComp");
})(game || (game = {}));
var game;
(function (game) {
    var UpdataGame = (function (_super) {
        __extends(UpdataGame, _super);
        function UpdataGame(id) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "roomCardUpSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            self._gameId = id;
            return _this;
        }
        UpdataGame.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var gameMo = game.dataMgr.gameMo;
            var guildMo = game.dataMgr.guildMo;
            var self = this;
            gameMo.addListener("up_gmd_pro" /* update_gmd_progress */, function (data, per) {
                var curData = game.dataMgr.gameMo.getGameData(self._gameId);
                if (curData.conf.file == data.file) {
                    self.update({ state: 2 /* UPDATING */, proBar: per });
                }
            }, self);
            gameMo.addListener("up_gmd_fin" /* update_gmd_fin */, function (data, errData) {
                var curData = game.dataMgr.gameMo.getGameData(self._gameId);
                if (curData.conf.file == data.file) {
                    var info_1 = curData.update;
                    self.update({ state: info_1.state, proBar: info_1.progress });
                    if (errData.fin != 0 /* OK */) {
                        URLUtil.gameLoadErr(data.gameId, errData);
                        guildMo.leaveRoom();
                    }
                    else {
                        guildMo.postEvent("room_card" /* ROOM_CARD */, data.gameId);
                        // gameScene.startGame(gameId);
                    }
                    self.close();
                }
            }, self);
            var info = gameMo.getGameData(self._gameId);
            var txt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 940 /* downing */);
            self.skUpGameing.text = StringUtil.printf(txt, info.conf.nm);
        };
        UpdataGame.prototype.update = function (val) {
            var self = this;
            var circleMask = self._circleMask;
            if (!circleMask) {
                circleMask = self._circleMask = new game.CircleMask(self.skProBar, true);
            }
            var state = val.state || 0 /* NONE */;
            var proVal = val.proBar;
            if (state == 2 /* UPDATING */) {
                self.skBarNum.text = proVal + "%";
                circleMask.value = proVal;
            }
        };
        UpdataGame.prototype.onDispose = function () {
            var self = this;
            if (self._circleMask) {
                self._circleMask.dispose();
            }
            game.dataMgr.gameMo.rmvAllListener(self);
            _super.prototype.onDispose.call(this);
        };
        return UpdataGame;
    }(game.UIPopup));
    game.UpdataGame = UpdataGame;
    __reflect(UpdataGame.prototype, "game.UpdataGame");
})(game || (game = {}));
var game;
(function (game) {
    var ApplyRecordPop = (function (_super) {
        __extends(ApplyRecordPop, _super);
        function ApplyRecordPop() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "applyRecordSkin";
            return _this;
        }
        ApplyRecordPop.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var list = self.skList;
            list.itemRender = ApplyRecordItem;
            list.dataProvider = self._recordPro = new cui.ArrayCollection();
            self.skClose.setTarget(self.close, self);
            game.dataMgr.guildMo.addListener("chairman_refused" /* CHAIRMAN_REFUSED */, self.updateView, self);
            self.updateView();
        };
        ApplyRecordPop.prototype.updateView = function () {
            var self = this;
            var askRecords = game.dataMgr.guildMo.guildAsks;
            var len = askRecords.length;
            self.skNoApply.visible = len == 0;
            var tmpArr = [];
            for (var i = 0; i < len; i++) {
                var askRecord = askRecords[i];
                var showData = {
                    time: askRecord.time,
                    guild_id: askRecord.guild_id,
                    ask_status: askRecord.ask_status,
                };
                tmpArr.push(showData);
            }
            tmpArr.sort(function (a, b) {
                return b.time - a.time;
            });
            self._recordPro.source = tmpArr;
        };
        ApplyRecordPop.prototype.onDispose = function () {
            game.dataMgr.guildMo.rmvListener("chairman_refused" /* CHAIRMAN_REFUSED */, this);
            _super.prototype.onDispose.call(this);
        };
        return ApplyRecordPop;
    }(game.UIPopup));
    game.ApplyRecordPop = ApplyRecordPop;
    __reflect(ApplyRecordPop.prototype, "game.ApplyRecordPop");
    var ApplyRecordItem = (function (_super) {
        __extends(ApplyRecordItem, _super);
        function ApplyRecordItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "applyRecordItemSkin";
            return _this;
        }
        ApplyRecordItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
        };
        ApplyRecordItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skDate.text = TimeUtil.formatHmsTime(data.time);
            self.skApply.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 976 /* friendApplyId */), game.DataFormat.getGuildId(data.guild_id));
            var resultLab = data.ask_status == 0 ? 977 /* friendWaiting */ : 978 /* friendRefused */;
            self.skResult.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, resultLab);
        };
        return ApplyRecordItem;
    }(cui.DataItem));
    game.ApplyRecordItem = ApplyRecordItem;
    __reflect(ApplyRecordItem.prototype, "game.ApplyRecordItem");
})(game || (game = {}));
var game;
(function (game) {
    var CreateFriendCircle = (function (_super) {
        __extends(CreateFriendCircle, _super);
        function CreateFriendCircle() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "agentSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        CreateFriendCircle.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            var accData = game.dataMgr.accMo.getData();
            self.skCopyWx.setTarget(function () {
                //获取当前微信号
                var weixin = accData.GuildWeChat || "";
                var tip = TRain.langMgr.getTxt("mainLang" /* mainLang */, 539 /* CopySuccess */);
                game.MsgBox.showTipBox(false, 539 /* CopySuccess */, "mainLang" /* mainLang */, tip, 15648323 /* orange */);
                URLUtil.copyText(weixin);
            }, self);
            for (var i = 0; i < 5; i++) {
                var tipLab = self['skLab' + i];
                var labIdx = 943 /* friendAgent */ + i;
                var tip = void 0;
                if (i == 4) {
                    var weixin = accData.GuildWeChat || "";
                    tip = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, labIdx), weixin);
                }
                else {
                    tip = TRain.langMgr.getTxt("mainLang" /* mainLang */, labIdx);
                }
                tipLab.text = tip;
            }
        };
        return CreateFriendCircle;
    }(game.UIPopup));
    game.CreateFriendCircle = CreateFriendCircle;
    __reflect(CreateFriendCircle.prototype, "game.CreateFriendCircle");
})(game || (game = {}));
var game;
(function (game) {
    var FriendCircleHome = (function (_super) {
        __extends(FriendCircleHome, _super);
        function FriendCircleHome() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "friendMainSkin";
            self._isOut = true;
            self._listFlag = true;
            self._clickTm = 0;
            return _this;
        }
        FriendCircleHome.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skBtn.setTarget(self.clickBtn, self);
            var soundMo = game.dataMgr.soundMo;
            var state = soundMo.getState();
            self.skmusicPure.icon = state ? "menuList@txt_music" /* music */ : "menuList@txt_notMusic" /* notMusic */;
            self.skmusicPure.setTarget(function () {
                game.GameUtil.playClickSound();
                var curState = soundMo.getState();
                soundMo.setState(!curState);
                self.skmusicPure.icon = !curState ? "menuList@txt_music" /* music */ : "menuList@txt_notMusic" /* notMusic */;
            }, self);
            self.skBackPure.setTarget(function () {
                game.GameUtil.playClickSound();
                game.gameScene.showHallUI(12 /* roomCardHome */);
            }, self);
            var guildMo = game.dataMgr.guildMo;
            var guildData = guildMo.getGuildData();
            self.skID.text = game.DataFormat.getGuildId(guildData.guild_id);
            var memberer = guildData.member[0]; //会长
            var membererNm = memberer.player.player_name;
            self.skTitle.text = guildData.guild_name;
            self.skCreateNm.text = membererNm;
            self.updateView();
            self.skChange.setTarget(function () {
                game.GameUtil.playClickSound();
                game.gameScene.openPopup(new game.ModGuildName());
            }, self);
            self.skAgent.setTarget(function () {
                game.GameUtil.playClickSound();
                game.gameScene.openPopup(new game.CreateFriendCircle());
            }, self);
            self.skAgent1.setTarget(function () {
                game.GameUtil.playClickSound();
                game.gameScene.openPopup(new game.CreateFriendCircle());
            }, self);
            self.skNews.setTarget(function () {
                game.GameUtil.playClickSound();
                game.gameScene.openPopup(new game.GuildMsgView());
            }, self);
            self.skNews1.setTarget(function () {
                game.GameUtil.playClickSound();
                game.gameScene.openPopup(new game.GuildMsgView());
            }, self);
            //判断是否是会长
            var isMembers = guildMo.isChairman();
            self.skPure.icon = isMembers ? "friendCircle@txt_disbandFriend" : "friendCircle@txt_changeFriend";
            self.skPure.setTarget(function () {
                var str;
                if (isMembers) {
                    str = TRain.langMgr.getTxt("mainLang" /* mainLang */, 960 /* disFriendCircle */);
                }
                else {
                    str = TRain.langMgr.getTxt("mainLang" /* mainLang */, 961 /* outFriendCircle */);
                }
                game.MsgBox.showBoxCB2(str, function (tag) {
                    if (tag == 1) {
                        if (isMembers) {
                            guildMo.masterOperation(game.dataMgr.accMo.getData().aid, 5 /* e_mot_dismiss */);
                        }
                        else {
                            guildMo.askLeaveGuild();
                        }
                    }
                }, self);
            }, self);
            self.skOpen.setTarget(function () {
                self._listFlag = !self._listFlag;
                self.upListBtn();
            }, self);
            self.skOff.setTarget(function () {
                self._listFlag = !self._listFlag;
                self.upListBtn();
            }, self);
            self.skSet.setTarget(function () {
                game.GameUtil.playClickSound();
                game.gameScene.openPopup(new game.FriendSetPop());
            }, self);
            self.skNotice.setTarget(function () {
                game.GameUtil.playClickSound();
                game.gameScene.openPopup(new game.FriendNoticePop());
            }, self);
            self.setOffX();
            self.upListBtn();
            var list = self.skUserList;
            list.itemRender = FriendListItem;
            list.dataProvider = self._listPro = new cui.ArrayCollection();
            var gameList = self.skGameList;
            gameList.itemRender = FrdGameListItem;
            gameList.dataProvider = self._gameListPro = new cui.ArrayCollection();
            self.updateMemberList();
            guildMo.addListener("member_change" /* MEMBER_CHANGE */, function () {
                self.updateMemberList();
                self.updateView();
            }, self);
            guildMo.addListener("exit_guild" /* EXIT_GUILD */, function () {
                game.gameScene.closeAllPopup();
                game.gameScene.showHallUI(12 /* roomCardHome */);
            }, self);
            guildMo.addListener("mod_guild_name" /* MOD_GUILD_NAME */, function () {
                self.skTitle.text = guildData.guild_name;
            }, self);
            guildMo.addListener("ask_record" /* ASK_RECORD */, self.updateRed, self);
            guildMo.addListener("msg_back" /* MSG_BACK */, self.updateRed, self);
            guildMo.addListener("room_list_update" /* ROOM_LIST_UPDATE */, self.updateRoomList, self);
            guildMo.addListener("room_card" /* ROOM_CARD */, function (gameId) {
                game.gameScene.startGame(gameId);
            }, self);
            guildMo.addListener("replay_history" /* replay_history */, function () {
                game.gameScene.openPopup(new game.RoomCardRecordview(guildData.guild_name));
            }, self);
            self.hideBtn();
            self.skChangeID.setTarget(function () {
                var friendId = game.DataFormat.getGuildId(guildData.guild_id);
                var tip = TRain.langMgr.getTxt("mainLang" /* mainLang */, 539 /* CopySuccess */);
                game.MsgBox.showTipBox(false, 539 /* CopySuccess */, "mainLang" /* mainLang */, tip, 15648323 /* orange */);
                URLUtil.copyText(friendId);
            }, self);
            self.skRulePure.setTarget(function () {
                game.gameScene.openPopup(new game.RuleView(guildMo.getFriendRuleConfs()));
            }, self);
            self.updateRed();
            self.updateRoomList();
            self.skRecord.setTarget(self.openRecord, self);
            self.skRecord1.setTarget(self.openRecord, self);
            self.skQuickStart.setTarget(self.quickStartgm, self);
            self.updateNoticeRed();
            game.notifiCenter.addListener("friend_circle_close" /* FRIEND_CIRCLE_CLOSE */, self.updateNoticeRed, self);
            guildMo.addListener("up_notice" /* UP_NOTICE */, self.updateNoticeRed, self);
            self.skReport.setTarget(function () {
                game.GameUtil.playClickSound();
                game.gameScene.openPopup(new game.ReportDetail());
            }, self);
            game.notifiCenter.addListener("open_detail_view" /* OPEN_DETAIL_VIEW */, self.openDetail, self);
            var guild_icon = game.dataMgr.accMo.getData().guild_icon;
            if (!!guild_icon)
                guildMo.clearGuildIcon();
        };
        FriendCircleHome.prototype.openDetail = function () {
            var roomRdInnerView = new game.RoomRdInnerView();
            game.gameScene.openPopup(roomRdInnerView);
            roomRdInnerView.setData(game.dataMgr.guildMo.detailData);
        };
        FriendCircleHome.prototype.updateNoticeRed = function () {
            var self = this;
            var guildMo = game.dataMgr.guildMo;
            var isMembers = guildMo.isChairman();
            var isReadNotice = game.GameUtil.getLocalBool("FRIEND_NOTICE_READ" /* FRIEND_NOTICE_READ */, false);
            self.skRedImgNotice.visible = !isMembers && !isReadNotice && !!guildMo.getGuildData().guild_notice;
        };
        FriendCircleHome.prototype.quickStartgm = function () {
            var self = this;
            var gameLists = game.dataMgr.guildMo.getRoomLists();
            var roomData = self.getQuickRoom();
            if (gameLists.length == 0 || roomData.num == 0) {
                game.gameScene.openPopup(new game.CreateRoomView(3 /* ert_guild_points */));
            }
            else {
                //加入房间
                var timers = egret.getTimer();
                if (timers - 3000 > self._clickTm) {
                    game.dataMgr.guildMo.joinGuildGm(roomData.room_no);
                    self._clickTm = timers;
                }
            }
        };
        FriendCircleHome.prototype.getQuickRoom = function () {
            var gameLists = game.dataMgr.guildMo.getRoomLists();
            var len = gameLists.length;
            var tmpPlayData = {};
            //获取缺的人数最少，且房号靠前的
            for (var i = 0; i < len; i++) {
                var gameList = gameLists[i];
                var sel_config = gameList.sel_config;
                //获取最大人数 
                var maxNum = sel_config.player_count;
                var playLen = gameList.players.length;
                var diffNum = maxNum - playLen;
                if (!tmpPlayData.num) {
                    tmpPlayData.num = diffNum;
                    tmpPlayData.room_no = gameList.room_no;
                }
                else {
                    if (diffNum < tmpPlayData.num) {
                        tmpPlayData.num = diffNum;
                        tmpPlayData.room_no = gameList.room_no;
                    }
                    else if (diffNum == tmpPlayData.num) {
                        if (gameList.room_no > tmpPlayData.room_no) {
                            tmpPlayData.num = diffNum;
                            tmpPlayData.room_no = gameList.room_no;
                        }
                    }
                }
            }
            return tmpPlayData;
        };
        FriendCircleHome.prototype.openRecord = function () {
            // dataMgr.gsMo.startConn();
            var accData = game.dataMgr.accMo.getData();
            var accId = accData.aid;
            var guild_id = accData.guild_id;
            game.dataMgr.guildMo.askRoomReplayHistory(accId, guild_id);
        };
        FriendCircleHome.prototype.setOffX = function () {
            var self = this;
            var scOffx = CONF.scOffx;
            self.skMemberList.left += scOffx;
            self.skOpen.left += scOffx;
        };
        FriendCircleHome.prototype.updateRoomList = function () {
            var self = this;
            //获取当前游戏列表
            var gameLists = game.dataMgr.guildMo.getRoomLists();
            var showArr = [];
            var firstShowData = {
                handle: self,
                isCreate: true,
                state: 0,
                isOpenDesc: false,
            };
            showArr.push(firstShowData);
            for (var i = 0; i < gameLists.length; i++) {
                var gameList = gameLists[i];
                var sel_config = gameList.sel_config;
                var plays = gameList.players;
                var showData = {
                    handle: self,
                    isCreate: false,
                    state: sel_config.player_count == plays.length ? 2 : 1,
                    gameId: gameList.game_id,
                    plays: plays,
                    room_no: gameList.room_no,
                    room_cfg: sel_config,
                    isOpenDesc: false,
                };
                showArr.push(showData);
            }
            self._gameListPro.source = showArr;
        };
        // 成员的话需要隐藏这些东西
        FriendCircleHome.prototype.hideBtn = function () {
            var self = this;
            var isMembers = game.dataMgr.guildMo.isChairman();
            self.skChange.visible = isMembers;
            self.skBottom1.visible = isMembers;
            self.skBottom2.visible = !isMembers;
        };
        FriendCircleHome.prototype.updateRed = function () {
            var self = this;
            var askDatas = game.dataMgr.guildMo.getAskRecordData();
            self.skRedImg.visible = askDatas.length > 0;
        };
        FriendCircleHome.prototype.onResize = function (w, h) {
            _super.prototype.onResize.call(this, w, h);
            var self = this;
            var ratio = self._listFlag ? 0.70 : 0.94;
            self.skGameScr.width = w * ratio;
            self.skGameList.width = w * ratio;
        };
        FriendCircleHome.prototype.upListBtn = function () {
            var self = this;
            var listFlag = self._listFlag;
            self.skOpen.visible = !listFlag;
            self.skMemberList.visible = listFlag;
            //设置游戏列表的位置
            if (self._listFlag) {
                self.skGameScr.x = self.skMemberList.left + self.skMemberList.width + 5;
                self.skGameScr.width -= self.skMemberList.width;
                self.skGameList.width -= self.skMemberList.width;
            }
            else {
                self.skGameScr.x = self.skOpen.left + self.skOpen.width + 5;
                self.skGameScr.width += self.skMemberList.width;
                self.skGameList.width += self.skMemberList.width;
            }
        };
        FriendCircleHome.prototype.updateMemberList = function () {
            var self = this;
            var guildMo = game.dataMgr.guildMo;
            var guildData = guildMo.getGuildData();
            var members = guildData.member;
            var tmpMembers = members;
            self._MemberLists = [];
            var myPlay;
            var myId = game.dataMgr.accMo.getData().aid;
            for (var m = 0, mLen = tmpMembers.length; m < mLen; m++) {
                var curMember = tmpMembers[m];
                if (curMember.player.player_id == myId) {
                    myPlay = tmpMembers.splice(m, 1)[0];
                    break;
                }
            }
            tmpMembers.sort(function (a, b) {
                return b.points - a.points;
            });
            if (myPlay) {
                tmpMembers.unshift(myPlay);
            }
            for (var i = 0, len = tmpMembers.length; i < len; i++) {
                var member = tmpMembers[i];
                var player = member.player;
                var showData = {
                    idx: i + 1,
                    name: player.player_name,
                    head: player.head_custom,
                    headFrame: player.vip_level,
                    id: player.player_id,
                    score: member.points,
                    isOnline: member.online,
                    gameId: member.gaming_id,
                    tableId: "",
                };
                var curTable = guildMo.getRoomNoByPlayId(player.player_id);
                showData.tableId = curTable;
                self._MemberLists.push(showData);
            }
            self._listPro.source = self._MemberLists;
        };
        FriendCircleHome.prototype.updateView = function () {
            var self = this;
            var guildMo = game.dataMgr.guildMo;
            var guildData = guildMo.getGuildData();
            var len = guildData.member.length;
            //公会上线人数
            self.skNum.text = len + "/" + 500 /* friendCircleLimit */;
            self.skRoomCard.text = String(guildData.roomcard_cnt || 0);
            var onlineNum = self.getOnlineNum();
            self.skOnline.text = String(onlineNum);
        };
        FriendCircleHome.prototype.getOnlineNum = function () {
            var num = 0;
            var guildMo = game.dataMgr.guildMo;
            var guildData = guildMo.getGuildData();
            var members = guildData.member;
            for (var i = 0; i < members.length; i++) {
                var curMember = members[i];
                if (curMember.online) {
                    num++;
                }
            }
            return num;
        };
        FriendCircleHome.prototype.clickBtn = function () {
            var self = this;
            game.GameUtil.playClickSound();
            var out = self._isOut;
            self.skBtn.icon = !out ? "menuList@bottom" /* pull_on */ : "menuList@top" /* pull_off */;
            self.skGroup.visible = out;
            self._isOut = !out;
        };
        FriendCircleHome.prototype.clickGame = function (item) {
            var self = this;
            var data = item.data;
            if (data.state == 0) {
                game.gameScene.openPopup(new game.CreateRoomView(3 /* ert_guild_points */));
            }
            else if (data.state == 1) {
                //加入房间
                var timers = egret.getTimer();
                if (timers - 3000 > self._clickTm) {
                    game.dataMgr.guildMo.joinGuildGm(data.room_no);
                    self._clickTm = timers;
                }
            }
        };
        FriendCircleHome.prototype.openDesc = function (item) {
            var self = this;
            var data = item.data;
            data.isOpenDesc = !data.isOpenDesc;
            self._gameListPro.itemUpdated(data);
        };
        FriendCircleHome.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.guildMo.rmvAllListener(self);
            game.notifiCenter.rmvListener("friend_circle_close" /* FRIEND_CIRCLE_CLOSE */, self);
            game.notifiCenter.rmvListener("open_detail_view" /* OPEN_DETAIL_VIEW */, self);
            _super.prototype.onDispose.call(this);
        };
        return FriendCircleHome;
    }(game.UIFullFW));
    game.FriendCircleHome = FriendCircleHome;
    __reflect(FriendCircleHome.prototype, "game.FriendCircleHome");
    var FriendListItem = (function (_super) {
        __extends(FriendListItem, _super);
        function FriendListItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "userItemSkin";
            return _this;
        }
        FriendListItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skOnline1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 343 /* online */);
            self.skNotLine.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 344 /* not_online */);
        };
        FriendListItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skNum.text = String(data.idx);
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skFrame.source = "head@new" /* headframe */ + data.headFrame;
            self.skName.text = data.name;
            self.skID.text = "ID:" + data.id;
            var gameId = data.gameId;
            var isOnline = data.isOnline;
            self.skScore.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 942 /* friendIntegral */), data.score));
            self.skOnline1.visible = isOnline && gameId == 0;
            self.skNotLine.visible = !isOnline && gameId == 0;
            self.skGameName.visible = gameId > 0;
            if (gameId > 0) {
                var gameConf = game.dataMgr.gameMo.getGmdConf(gameId);
                //判断当前在线还是离线
                var onlineTxt = isOnline ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 343 /* online */) : TRain.langMgr.getTxt("mainLang" /* mainLang */, 344 /* not_online */);
                var txtNum = void 0;
                if (gameConf.isFriendGm) {
                    txtNum = isOnline ? 962 /* friendOnLine */ : 995 /* friendOnLine1 */;
                }
                else {
                    txtNum = isOnline ? 981 /* friendOnLineNoTab */ : 996 /* friendOnLineNoTab1 */;
                }
                var totalTxt = TRain.langMgr.getTxt("mainLang" /* mainLang */, txtNum);
                self.skGameName.textFlow = cui.htmlParser.parser(StringUtil.printf(totalTxt, gameConf.nm, onlineTxt, data.tableId));
            }
        };
        return FriendListItem;
    }(cui.DataItem));
    game.FriendListItem = FriendListItem;
    __reflect(FriendListItem.prototype, "game.FriendListItem");
    //房卡游戏列表
    var FrdGameListItem = (function (_super) {
        __extends(FrdGameListItem, _super);
        function FrdGameListItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "fkRoomGmItemSkin";
            self._size = 22;
            return _this;
        }
        FrdGameListItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skJoin.setTarget(function () {
                data.handle.clickGame(self);
            }, self);
            self.skBtn.setTarget(function () {
                data.handle.clickGame(self);
            }, self);
            self.skGameInfo.setTarget(function () {
                data.handle.openDesc(self);
            }, self);
        };
        FrdGameListItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skInfoGrp.visible = data.isOpenDesc;
            var totalNum = data.room_cfg ? data.room_cfg.player_count : 0;
            self.skOther.removeChildren();
            if (self.skOther.numChildren == 0 && totalNum) {
                for (var i = 0; i < totalNum - 1; i++) {
                    var fkGmTile = new game.ItemTile();
                    fkGmTile.skinName = "otherPlayTile";
                    var w = fkGmTile.width;
                    var h = fkGmTile.height;
                    var row = Math.floor(i / 3);
                    var col = i - row * 3;
                    fkGmTile.x = w * col + 5;
                    fkGmTile.y = h * row;
                    self.skOther.addChild(fkGmTile);
                }
            }
            var isCreate = data.isCreate;
            self.skRoomBg.visible = !isCreate;
            self.skRoomId.visible = !isCreate;
            self.skOwner.visible = !isCreate;
            self.skGameInfo.visible = !isCreate;
            self.skOther.visible = !isCreate;
            if (self.skRoom)
                self.skRoom.visible = !isCreate;
            //根据游戏id获取配置
            if (isCreate) {
                self.skGameName.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 980 /* friendCreateRm */);
            }
            else {
                var gameConf = game.dataMgr.gameMo.getGmdConf(data.gameId);
                self.skGameName.text = gameConf.nm;
            }
            self.skJia.visible = isCreate;
            self.skBg.source = isCreate ? "friendCreateDB" : "friendGameDB";
            self.skJoin.icon = data.state == 0 ? "friendCircle@txt_creat" : (data.state == 1 ? "friendCircle@txt_join" : "friendCircle@txt_inGame");
            var room_no = String(data.room_no);
            if (!!room_no) {
                var guild_id = game.dataMgr.accMo.getData().guild_id;
                var roomNum = room_no.split("-" + guild_id)[1];
                self.skRoomId.text = roomNum;
            }
            //获取创建人头像资源
            var plays = data.plays;
            if (plays) {
                for (var i = 0; i < totalNum; i++) {
                    var accPlay = plays[i];
                    var createPlay = self.getMember(accPlay);
                    if (i == 0) {
                        if (createPlay) {
                            self.skHead.source = game.DataFormat.getHeadIcon(createPlay.head_custom);
                            self.skFrame.source = "head@new" /* headframe */ + createPlay.vip_level;
                            self.skName.text = createPlay.player_name;
                            self.skID.text = "ID:" + createPlay.player_id;
                        }
                    }
                    else {
                        var fkGmTile = self.skOther.getChildAt(i - 1);
                        if (createPlay) {
                            fkGmTile.bg = game.DataFormat.getHeadIcon(createPlay.head_custom);
                            fkGmTile.icon = "head@new" /* headframe */ + createPlay.vip_level;
                            fkGmTile.sel = false;
                        }
                        else {
                            fkGmTile.bg = "";
                            fkGmTile.icon = "";
                            fkGmTile.sel = true;
                        }
                    }
                }
            }
            if (data.gameId) {
                self.skInfoLabels.removeChildren();
                var sel_config = data.room_cfg;
                var roomCardConf = game.dataMgr.guildMo.getRoomCardConf(data.gameId);
                var optionConfs = roomCardConf.option;
                var idx = -1;
                var size = self._size;
                for (var i = 0, len = optionConfs.length; i < len; i++) {
                    var optionConf = optionConfs[i];
                    var desc = optionConf.desc;
                    var lab = new cui.Label();
                    var firstField = optionConf.fieldNm;
                    var fieldNm = firstField.substr(0, firstField.length - 1);
                    var havaType = false;
                    for (var key in sel_config) {
                        if (fieldNm == key) {
                            havaType = true;
                            var svrData = sel_config[key];
                            var options = optionConf.option;
                            var value = void 0;
                            if (optionConf.type == 1) {
                                if (optionConf.isSpc) {
                                    value = options[svrData - 1];
                                }
                                else {
                                    for (var j = 0, optionLen = 1; j < optionLen; j++) {
                                        var openValue = options[j];
                                        var svrValue = svrData;
                                        var svrValue1 = 0;
                                        if (optionConf.isMoneyBase) {
                                            svrValue = svrValue / 100 /* MoneyBase */;
                                        }
                                        var fieldNm1 = optionConf.fieldNm1;
                                        if (fieldNm1) {
                                            var formatNm = fieldNm1.substr(0, fieldNm1.length - 1);
                                            svrValue1 = sel_config[formatNm];
                                            if (optionConf.isMoneyBase) {
                                                svrValue1 = svrValue1 / 100 /* MoneyBase */;
                                            }
                                        }
                                        if (firstField == "rate_limits" && svrValue == 0) {
                                            value = TRain.langMgr.getTxt("mainLang" /* mainLang */, 922 /* noHave */);
                                        }
                                        else {
                                            value = StringUtil.printf(openValue, svrValue, svrValue1);
                                        }
                                    }
                                }
                            }
                            else if (optionConf.type == 2) {
                                var tmpValue = void 0;
                                var j = 0, optionLen = svrData.length;
                                for (; j < optionLen; j++) {
                                    var svrValue = svrData[j];
                                    var openValue = options[svrValue - 1];
                                    if (!tmpValue) {
                                        tmpValue = openValue;
                                    }
                                    else {
                                        tmpValue += "，" + openValue;
                                    }
                                }
                                value = tmpValue;
                            }
                            else {
                                desc = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1003 /* friendCardExpend */);
                                value = svrData;
                            }
                            var txt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1002 /* friendGameDesc */);
                            var optionTxt = StringUtil.printf(txt, desc, value);
                            lab.textFlow = cui.htmlParser.parse(optionTxt);
                            lab.size = size;
                            var txtLen = Math.floor(lab.text.length * size / self.skInfoLabels.width);
                            lab.height = size * (txtLen + 1);
                            var lastChild = self.skInfoLabels.getChildAt(idx);
                            lab.width = self.skInfoLabels.width;
                            if (lastChild) {
                                lab.y = lastChild.y + lastChild.height + 10;
                            }
                            else {
                                lab.y = lab.height + 10;
                            }
                            self.skInfoLabels.addChild(lab);
                            idx++;
                        }
                    }
                    if (fieldNm == "type" && !havaType) {
                        var typeValue = TRain.langMgr.getTxt("mainLang" /* mainLang */, 922 /* noHave */);
                        var typeTxt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1002 /* friendGameDesc */);
                        var optionTxt = StringUtil.printf(typeTxt, desc, typeValue);
                        lab.textFlow = cui.htmlParser.parse(optionTxt);
                        lab.size = size;
                        var txtLen = Math.floor(lab.text.length * size / self.skInfoLabels.width);
                        lab.height = size * (txtLen + 1);
                        var lastChild = self.skInfoLabels.getChildAt(idx);
                        lab.width = self.skInfoLabels.width;
                        if (lastChild) {
                            lab.y = lastChild.y + lastChild.height + 10;
                        }
                        else {
                            lab.y = lab.height + 10;
                        }
                        self.skInfoLabels.addChild(lab);
                        idx++;
                    }
                }
            }
        };
        FrdGameListItem.prototype.dispose = function () {
            var self = this;
            var otherGrp = self.skOther;
            for (var i = 0; i < otherGrp.numChildren; i++) {
                otherGrp.getChildAt(i).dispose();
            }
            for (var j = 0; j < self.skInfoLabels.numChildren; j++) {
                self.skInfoLabels.getChildAt(j).dispose();
            }
            otherGrp.removeChildren();
            _super.prototype.dispose.call(this);
        };
        FrdGameListItem.prototype.getMember = function (playId) {
            var guildData = game.dataMgr.guildMo.getGuildData();
            var members = guildData.member;
            for (var i = 0, len = members.length; i < len; i++) {
                var member = members[i];
                if (member.player.player_id == playId) {
                    return member.player;
                }
            }
            return null;
        };
        return FrdGameListItem;
    }(cui.DataItem));
    game.FrdGameListItem = FrdGameListItem;
    __reflect(FrdGameListItem.prototype, "game.FrdGameListItem");
})(game || (game = {}));
var game;
(function (game) {
    var FriendCirclePop = (function (_super) {
        __extends(FriendCirclePop, _super);
        function FriendCirclePop() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "chooseFriendSkin";
            self.hCenter = 0;
            self.vCenter = 0;
            return _this;
        }
        FriendCirclePop.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skJoinFriend.setTarget(function () {
                self.close();
                game.gameScene.openPopup(new game.JoinFriendCircle(), null, true);
            }, self);
            self.skCreateFriend.setTarget(function () {
                self.close();
                game.gameScene.openPopup(new game.CreateFriendCircle(), null, true);
            }, self);
            self.skRecord.setTarget(function () {
                self.close();
                game.gameScene.openPopup(new game.ApplyRecordPop(), null, true);
            }, self);
            self.skClose.setTarget(self.close, self);
            var guild_icon = game.dataMgr.accMo.getData().guild_icon;
            if (!!guild_icon)
                game.dataMgr.guildMo.clearGuildIcon();
        };
        FriendCirclePop.prototype.onDispose = function () {
            _super.prototype.onDispose.call(this);
        };
        return FriendCirclePop;
    }(game.UIPopup));
    game.FriendCirclePop = FriendCirclePop;
    __reflect(FriendCirclePop.prototype, "game.FriendCirclePop");
})(game || (game = {}));
var game;
(function (game) {
    var FriendNoticePop = (function (_super) {
        __extends(FriendNoticePop, _super);
        function FriendNoticePop() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "friendNoticeSkin";
            self.hCenter = 0;
            self.vCenter = 0;
            return _this;
        }
        FriendNoticePop.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(function () {
                self.close();
                game.notifiCenter.postEvent("friend_circle_close" /* FRIEND_CIRCLE_CLOSE */);
            }, self);
            self.skLab.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 954 /* friendNotice */);
            var guildMo = game.dataMgr.guildMo;
            // 获取当前公告
            self.skWord.text = guildMo.getGuildData().guild_notice || "";
            guildMo.addListener("up_notice" /* UP_NOTICE */, function (notice) {
                self.skWord.text = notice;
            }, self);
            game.GameUtil.setLocal("FRIEND_NOTICE_READ" /* FRIEND_NOTICE_READ */, true);
        };
        FriendNoticePop.prototype.onDispose = function () {
            game.dataMgr.guildMo.rmvListener("up_notice" /* UP_NOTICE */, this);
            _super.prototype.onDispose.call(this);
        };
        return FriendNoticePop;
    }(game.UIPopup));
    game.FriendNoticePop = FriendNoticePop;
    __reflect(FriendNoticePop.prototype, "game.FriendNoticePop");
})(game || (game = {}));
var game;
(function (game) {
    var FriendSetPop = (function (_super) {
        __extends(FriendSetPop, _super);
        function FriendSetPop() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "friendSetSkin";
            self.hCenter = 0;
            self.vCenter = 0;
            return _this;
        }
        FriendSetPop.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            var guildMo = game.dataMgr.guildMo;
            var list = self.skList;
            list.itemRender = FriendPointItem;
            list.dataProvider = self._itemPro = new cui.ArrayCollection();
            guildMo.addListener("up_down_point" /* UP_DOWN_POINT */, self.updatePoint, self);
            self.skMenuGrp.setTarget(self.menuClick, self);
            self.skMenuGrp.selectTag = 0;
            self.skLab.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 954 /* friendNotice */);
            self.skWord.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 955 /* friendNoticeInput */);
            self.skWord.maxChars = 200;
            self.skWord.text = guildMo.getGuildData().guild_notice || "";
            self.skRelease.setTarget(function () {
                var lab = self.skWord.text;
                if (lab == "") {
                    game.MsgBox.showTxt("mainLang" /* mainLang */, 983 /* friendInputNotice */);
                }
                else {
                    guildMo.sendNotice(lab);
                }
            }, self);
            guildMo.addListener("up_notice" /* UP_NOTICE */, function () {
                game.MsgBox.showTxt("mainLang" /* mainLang */, 979 /* friendNoticeRel */);
            }, self);
            self.skWord.addEventListener(egret.Event.CHANGE, self.OnAccount, self);
            self.skWord.addEventListener(egret.Event.FOCUS_IN, self.onFocus1, self);
        };
        FriendSetPop.prototype.onFocus1 = function (e) {
            var notice = game.dataMgr.guildMo.getGuildData().guild_notice;
            this.skWord.text = notice || "";
        };
        FriendSetPop.prototype.OnAccount = function (e) {
            this.skWord.text = e.target.text;
        };
        FriendSetPop.prototype.updateMemberList = function () {
            var self = this;
            var guildMo = game.dataMgr.guildMo;
            var guildData = guildMo.getGuildData();
            var members = guildData.member;
            self._MemberLists = [];
            for (var i = 0, len = members.length; i < len; i++) {
                var member = members[i];
                var player = member.player;
                var showData = {
                    handle: self,
                    idx: i + 1,
                    name: player.player_name,
                    head: player.head_custom,
                    headFrame: player.vip_level,
                    id: player.player_id,
                    score: member.points,
                    isOnline: member.online,
                    gameId: member.gaming_id,
                    tableId: "",
                };
                var curTable = guildMo.getRoomNoByPlayId(player.player_id);
                showData.tableId = curTable;
                self._MemberLists.push(showData);
            }
            self._itemPro.source = self._MemberLists;
        };
        FriendSetPop.prototype.updatePoint = function (member_points) {
            var self = this;
            for (var i = 0, len = self._MemberLists.length; i < len; i++) {
                var memberData = self._MemberLists[i];
                for (var j = 0, jLen = member_points.length; j < jLen; j++) {
                    var member_point = member_points[j];
                    if (memberData.id == member_point.player_id) {
                        memberData.score = member_point.points;
                    }
                }
            }
            self._itemPro.source = self._MemberLists;
        };
        FriendSetPop.prototype.menuClick = function (item) {
            var tag = item.tag;
            var self = this;
            self.skBg.visible = tag == 0;
            self.skSxfScr.visible = tag == 0;
            self.skReleaseGrp.visible = tag != 0;
            if (tag == 0) {
                self.updateMemberList();
            }
            else {
                self.skWord.text = game.dataMgr.guildMo.getGuildData().guild_notice || "";
            }
        };
        FriendSetPop.prototype.sfClick = function (item) {
            var view = new game.UpDownPoint();
            view.setData(item.data, true);
            game.gameScene.openPopup(view, null, true);
        };
        FriendSetPop.prototype.xfClick = function (item) {
            var view = new game.UpDownPoint();
            view.setData(item.data, false);
            game.gameScene.openPopup(view, null, true);
        };
        FriendSetPop.prototype.kickClick = function (item) {
            var data = item.data;
            var view = new game.KickMember(data);
            game.gameScene.openPopup(view, null, true);
        };
        FriendSetPop.prototype.recordClick = function (item) {
            var data = item.data;
            var view = new game.UpDwPointRecord(data);
            game.gameScene.openPopup(view, null, true);
        };
        FriendSetPop.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.guildMo.rmvListener("up_down_point" /* UP_DOWN_POINT */, self);
            game.dataMgr.guildMo.rmvListener("up_notice" /* UP_NOTICE */, self);
            _super.prototype.onDispose.call(this);
        };
        return FriendSetPop;
    }(game.UIPopup));
    game.FriendSetPop = FriendSetPop;
    __reflect(FriendSetPop.prototype, "game.FriendSetPop");
    var FriendPointItem = (function (_super) {
        __extends(FriendPointItem, _super);
        function FriendPointItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "friendSetItemSkin";
            return _this;
        }
        FriendPointItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skSf.setTarget(function () {
                data.handle.sfClick(self);
            }, self);
            self.skXf.setTarget(function () {
                data.handle.xfClick(self);
            }, self);
            self.skKick.setTarget(function () {
                data.handle.kickClick(self);
            }, self);
            self.skRecord.setTarget(function () {
                data.handle.recordClick(self);
            }, self);
            self.skOnline1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 343 /* online */);
            self.skNotLine.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 344 /* not_online */);
        };
        FriendPointItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skNum.text = String(data.idx);
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skFrame.source = "head@new" /* headframe */ + data.headFrame;
            self.skName.text = data.name;
            self.skID.text = "ID:" + data.id;
            self.skScore.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 942 /* friendIntegral */), data.score));
            self.skOnline1.visible = data.isOnline && data.gameId == 0;
            self.skNotLine.visible = !data.isOnline && data.gameId == 0;
            self.skGameName.visible = data.gameId > 0;
            var gameId = data.gameId;
            var isOnline = data.isOnline;
            if (gameId > 0) {
                var gameConf = game.dataMgr.gameMo.getGmdConf(gameId);
                //判断当前在线还是离线
                var onlineTxt = isOnline ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 343 /* online */) : TRain.langMgr.getTxt("mainLang" /* mainLang */, 344 /* not_online */);
                var txtNum = void 0;
                if (gameConf.isFriendGm) {
                    txtNum = isOnline ? 962 /* friendOnLine */ : 995 /* friendOnLine1 */;
                }
                else {
                    txtNum = isOnline ? 981 /* friendOnLineNoTab */ : 996 /* friendOnLineNoTab1 */;
                }
                var totalTxt = TRain.langMgr.getTxt("mainLang" /* mainLang */, txtNum);
                self.skGameName.textFlow = cui.htmlParser.parser(StringUtil.printf(totalTxt, gameConf.nm, onlineTxt, data.tableId));
            }
        };
        return FriendPointItem;
    }(cui.DataItem));
    game.FriendPointItem = FriendPointItem;
    __reflect(FriendPointItem.prototype, "game.FriendPointItem");
})(game || (game = {}));
var game;
(function (game) {
    var GuildMsgView = (function (_super) {
        __extends(GuildMsgView, _super);
        function GuildMsgView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "msgRemindSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        GuildMsgView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            //判断当前是群主还是成员
            var isMembers = game.dataMgr.guildMo.isChairman();
            self.skMenGrp.visible = isMembers;
            self.skMenGrp.setTarget(self.menuClick, self);
            var list = self.skList;
            list.itemRender = GuildMsgItem;
            list.dataProvider = self._listPro = new cui.ArrayCollection();
            if (isMembers) {
                self.skMenGrp.selectTag = 0;
            }
            else {
                self.skMenGrp.selectTag = 2;
            }
            self.skClose.setTarget(self.close, self);
            game.dataMgr.guildMo.addListener("msg_back" /* MSG_BACK */, self.updateView, self);
            game.dataMgr.guildMo.addListener("point_back" /* POINT_RECORD_BACK */, self.updateView, self);
            self.skTip.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 993 /* friendSaveData */);
        };
        GuildMsgView.prototype.menuClick = function (item) {
            var tag = item.tag;
            var self = this;
            self.updateView(tag);
        };
        GuildMsgView.prototype.updateView = function (tag) {
            var self = this;
            if (!tag) {
                tag = self.skMenGrp.selectTag;
            }
            self.skMsgScr.setScrollTop(0);
            var guildMo = game.dataMgr.guildMo;
            var isMembers = guildMo.isChairman();
            self._showMsgData = [];
            if (tag == 0) {
                var askDatas = guildMo.getAskRecordData();
                for (var i = 0, len = askDatas.length; i < len; i++) {
                    var askData = askDatas[i];
                    var showData = {
                        handle: self,
                        name: askData.player.player_name,
                        head: askData.player.head_custom,
                        headFrame: askData.player.vip_level,
                        id: askData.player.player_id,
                        time: askData.time,
                        tag: tag,
                    };
                    self._showMsgData.push(showData);
                }
            }
            else if (tag == 1) {
                var msgDatas = guildMo.getGuildMsgData();
                for (var i = 0, len = msgDatas.length; i < len; i++) {
                    var msgData = msgDatas[i];
                    var showData = {
                        handle: self,
                        name: msgData.player.player_name,
                        head: msgData.player.head_custom,
                        headFrame: msgData.player.vip_level,
                        id: msgData.player.player_id,
                        time: msgData.time,
                        tag: tag,
                        state: msgData.msg,
                    };
                    self._showMsgData.push(showData);
                }
            }
            else {
                var pointsDatas = guildMo.getPointsData();
                //获取当前玩家id
                var aid = game.dataMgr.accMo.getData().aid;
                for (var i = 0, len = pointsDatas.length; i < len; i++) {
                    var pointsData = pointsDatas[i];
                    if (!isMembers && aid != pointsData.player.player_id) {
                        continue;
                    }
                    var showData = {
                        handle: self,
                        name: pointsData.player.player_name,
                        head: pointsData.player.head_custom,
                        headFrame: pointsData.player.vip_level,
                        id: pointsData.player.player_id,
                        time: pointsData.time,
                        tag: tag,
                        score: pointsData.points,
                    };
                    self._showMsgData.push(showData);
                }
            }
            self._showMsgData.sort(function (a, b) {
                return b.time - a.time;
            });
            self._listPro.source = self._showMsgData;
        };
        GuildMsgView.prototype.sureClick = function (item) {
            var self = this;
            var data = item.data;
            game.dataMgr.guildMo.masterOperation(data.id, 1 /* e_mot_agree */);
        };
        GuildMsgView.prototype.cancelClick = function (item) {
            var self = this;
            var data = item.data;
            game.dataMgr.guildMo.masterOperation(data.id, 2 /* e_mot_refuse */);
        };
        GuildMsgView.prototype.onDispose = function () {
            _super.prototype.onDispose.call(this);
            game.dataMgr.guildMo.rmvListener("msg_back" /* MSG_BACK */, this);
            game.dataMgr.guildMo.rmvListener("point_back" /* POINT_RECORD_BACK */, this);
        };
        return GuildMsgView;
    }(game.UIPopup));
    game.GuildMsgView = GuildMsgView;
    __reflect(GuildMsgView.prototype, "game.GuildMsgView");
    var GuildMsgItem = (function (_super) {
        __extends(GuildMsgItem, _super);
        function GuildMsgItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "applyItemSkin";
            return _this;
        }
        GuildMsgItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skAgree.setTarget(function () {
                data.handle.sureClick(self);
            }, self);
            self.skRefuse.setTarget(function () {
                data.handle.cancelClick(self);
            }, self);
        };
        GuildMsgItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skFrame.source = "head@new" /* headframe */ + data.headFrame;
            self.skName.text = data.name;
            self.skID.text = "ID:" + data.id;
            self.skTimeGrp.visible = data.tag == 0 || data.tag == 1;
            self.skBtnGrp.visible = data.tag == 0;
            self.skState.visible = data.tag == 1;
            self.skSxfGrp.visible = data.tag == 2;
            self.skLab.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 951 /* friendApplyTime */);
            self.skTime1.text = TimeUtil.formatHmsTime(data.time);
            self.skTime2.text = TimeUtil.formatHmsTime(data.time);
            self.skState.source = "friendCircle@txt_msg" + data.state;
            var score = data.score;
            var str;
            if (score > 0) {
                str = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 952 /* friendUpPoint */), score);
            }
            else {
                str = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 953 /* friendDownPoint */), score);
            }
            self.skSfLab.textFlow = cui.htmlParser.parser(str);
        };
        return GuildMsgItem;
    }(cui.DataItem));
    game.GuildMsgItem = GuildMsgItem;
    __reflect(GuildMsgItem.prototype, "game.GuildMsgItem");
})(game || (game = {}));
var game;
(function (game) {
    var JoinFriendCircle = (function (_super) {
        __extends(JoinFriendCircle, _super);
        function JoinFriendCircle() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "joinFriendSkin";
            self.hCenter = 0;
            self.vCenter = 0;
            self._flag = 0;
            self._ids = [];
            return _this;
        }
        JoinFriendCircle.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(function () {
                game.GameUtil.playClickSound();
                self.close();
            }, self);
            self.skCodeMenuGrp.setTarget(self.menuClick, self);
            game.dataMgr.guildMo.addListener("join_friend_circle" /* JOIN_FRIEND_CIRCLE */, function () {
                self.close();
            }, self);
            self.skTip2.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 948 /* friendJoinTip */);
        };
        JoinFriendCircle.prototype.menuClick = function (item) {
            var self = this;
            var tag = item.tag;
            //输入数字
            if (tag <= 9) {
                if (self._flag <= 5) {
                    var lab = self.skNumGrp.getChildAt(self._flag);
                    lab.text = tag.toString();
                    self._ids.push(tag);
                    self._flag++;
                }
                //重输
            }
            else if (tag == 10) {
                for (var j = 0; j < 6; j++) {
                    var lab1 = self.skNumGrp.getChildAt(j);
                    lab1.text = "";
                    self._flag = 0;
                    self._ids.length = 0;
                }
                //撤回
            }
            else {
                if (self._flag > 0) {
                    self._flag--;
                    var lab2 = self.skNumGrp.getChildAt(self._flag);
                    lab2.text = "";
                    self._ids.pop();
                }
            }
            //进入房间
            if (self._flag == 6) {
                var fkId = self.getFkId();
                game.dataMgr.guildMo.joinFriendCircle(fkId);
            }
        };
        JoinFriendCircle.prototype.getFkId = function () {
            //获取当前ids
            var self = this;
            var ids = self._ids;
            var enterRoomId = 0;
            var len = ids.length - 1;
            for (var i = len; i >= 0; i--) {
                var id = ids[i];
                var pow = Math.pow(10, len - i);
                enterRoomId += id * pow;
            }
            return enterRoomId;
        };
        JoinFriendCircle.prototype.onDispose = function () {
            game.dataMgr.generalMo.rmvListener("join_friend_circle" /* JOIN_FRIEND_CIRCLE */, this);
            _super.prototype.onDispose.call(this);
        };
        return JoinFriendCircle;
    }(game.UIPopup));
    game.JoinFriendCircle = JoinFriendCircle;
    __reflect(JoinFriendCircle.prototype, "game.JoinFriendCircle");
})(game || (game = {}));
var game;
(function (game) {
    var KickMember = (function (_super) {
        __extends(KickMember, _super);
        function KickMember(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "kickBoxSkin";
            self.hCenter = 0;
            self.vCenter = 0;
            self._data = data;
            return _this;
        }
        KickMember.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self._data;
            self.skSure.setTarget(function () {
                var aid = game.dataMgr.accMo.getData().aid;
                if (aid == data.id) {
                    game.MsgBox.showTxt("mainLang" /* mainLang */, 941 /* noKickSelf */);
                }
                else {
                    game.dataMgr.guildMo.masterOperation(data.id, 4 /* e_mot_kick */);
                }
                self.close();
            }, self);
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skFrame.source = "head@new" /* headframe */ + data.headFrame;
            self.skName.text = data.name;
            self.skID.text = "ID:" + data.id;
            self.skCancel.setTarget(self.close, self);
            self.skClose.setTarget(self.close, self);
        };
        KickMember.prototype.onDispose = function () {
            _super.prototype.onDispose.call(this);
        };
        return KickMember;
    }(game.UIPopup));
    game.KickMember = KickMember;
    __reflect(KickMember.prototype, "game.KickMember");
})(game || (game = {}));
var game;
(function (game) {
    var ModGuildName = (function (_super) {
        __extends(ModGuildName, _super);
        function ModGuildName() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "changeGuildNameSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        ModGuildName.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self.skCancel.setTarget(self.close, self);
            var accMo = game.dataMgr.accMo;
            var guildMo = game.dataMgr.guildMo;
            var changed_name = guildMo.getGuildData().changed_name;
            var nickname = guildMo.getGuildData().guild_name;
            self.skGuildName.addEventListener(egret.Event.CHANGE, self.OnAccount, self);
            self.skGuildName.maxChars = 6;
            self.skGuildName.addEventListener(egret.Event.FOCUS_IN, self.onFocus1, self);
            self.skFirstLab.visible = !changed_name;
            self.skSecondGp.visible = !!changed_name;
            self.skGold.text = game.DataFormat.convertYuanString(500 /* modifyNicknameCost */, true);
            self.skGuildName.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 949 /* friendInputName */);
            self.skSure.setTarget(function () {
                var name = self.skGuildName.text;
                if (name.length == 0) {
                    self.close();
                    var tips = TRain.langMgr.getTxt("mainLang" /* mainLang */, 299 /* NameNotNull */);
                    // TipsMgr.showPrompt(tips);
                    game.MsgBox.showTipBox(false, 299 /* NameNotNull */, "mainLang" /* mainLang */, tips);
                }
                else if (name == nickname) {
                    var tips = TRain.langMgr.getTxt("mainLang" /* mainLang */, 701 /* TwoNameSame */); //新名字与旧名字相同
                    // TipsMgr.showPrompt(tips);
                    game.MsgBox.showTipBox(false, 701 /* TwoNameSame */, "mainLang" /* mainLang */, tips);
                }
                else {
                    var curGold = accMo.getData().gold;
                    if (!changed_name) {
                        game.dataMgr.guildMo.modName(name);
                    }
                    else if (curGold < 500 /* modifyNicknameCost */) {
                        var tip = TRain.langMgr.getTxt("mainLang" /* mainLang */, 515 /* GoldIsNotEnough */);
                        // TipsMgr.showPrompt(tip); 
                        game.MsgBox.showTipBox(false, 515 /* GoldIsNotEnough */, "mainLang" /* mainLang */, tip);
                    }
                    else {
                        game.dataMgr.guildMo.modName(name);
                    }
                }
                self.close();
            }, self);
        };
        ModGuildName.prototype.onFocus1 = function (e) {
            this.skGuildName.text = "";
        };
        ModGuildName.prototype.OnAccount = function (e) {
            var self = this;
            var inputText = e.target.text;
            self.skGuildName.text = inputText;
        };
        return ModGuildName;
    }(game.UIPopup));
    game.ModGuildName = ModGuildName;
    __reflect(ModGuildName.prototype, "game.ModGuildName");
})(game || (game = {}));
var game;
(function (game) {
    var ReportDetail = (function (_super) {
        __extends(ReportDetail, _super);
        function ReportDetail() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "reportDetailSkin";
            self._isCurMonth = true;
            var date = self._curDate = new Date();
            self._curMonth = date.getMonth() + 1;
            self._curDay = date.getDate();
            self._curDotLine = new cui.DotLine();
            self._radius = 10;
            self._pointDatas = [];
            self._curTag = 0;
            return _this;
        }
        ReportDetail.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self.skDown.scaleY = self._isCurMonth ? -1 : 1;
            //获取当前月份
            self.skDown.setTarget(self.showTime, self);
            self.skDownBtn.setTarget(self.showTime, self);
            self.skTime.text = self.getCurDate();
            self.updateView();
            self.skZf.text = String(game.dataMgr.guildMo.getAllMemberPoint());
            self.skIncome.setTarget(self.showData, self);
            self.skPay.setTarget(self.showData, self);
            self.skOpen.setTarget(self.openView, self);
            self.showData();
            self.showDotImg();
            self.skDotLine.addEventListener(egret.TouchEvent.TOUCH_BEGIN, self.btnClick, self);
        };
        ReportDetail.prototype.btnClick = function (e) {
            var self = this;
            var stageX = e.stageX;
            var stageY = e.stageY;
            var redius = self._radius;
            var dotPoint = self.skDotLine.globalToLocal(stageX, stageY);
            for (var i = 0, len = self._pointDatas.length; i < len; i++) {
                var pointData = self._pointDatas[i];
                if ((dotPoint.x >= (pointData.x - redius) && dotPoint.x <= (pointData.x + redius)) && (dotPoint.y >= (pointData.y - redius) && dotPoint.y <= (pointData.y + redius))) {
                    self._curDay = (i + 1);
                    self.showTxt();
                    self.showDotImg();
                }
            }
        };
        ReportDetail.prototype.showDotImg = function () {
            var self = this;
            var curDay = self._curDay;
            var pointData = self._pointDatas[curDay - 1];
            if (!pointData) {
                pointData = self._pointDatas[0];
            }
            self.skDotImg.x = pointData.x - (self.skDotImg.width / 2);
            self.skDotImg.y = pointData.y - (self.skDotImg.height / 2);
        };
        ReportDetail.prototype.showData = function (item) {
            var self = this;
            if (item) {
                self._curTag = item.tag;
            }
            self.showTxt();
            self.drawLine();
            self.showDotImg();
        };
        ReportDetail.prototype.showTxt = function () {
            var self = this;
            var tag = self._curTag;
            self.skIncomeGrp.visible = tag == 1;
            self.skFk.visible = tag == 0;
            var curDay = self._curDay;
            var realDay = self._curDate.getDate(); //当天真实的日期
            var curMonth = self._curMonth;
            if (self._isCurMonth && curDay > realDay) {
                self._curDay = curDay = 1;
            }
            self.skDate.text = self.getCurMonthDay(curDay);
            var guildMo = game.dataMgr.guildMo;
            if (tag == 0) {
                self.skImg.source = "friendCircle@txt_mrzc";
                self.skSmallBg.source = "friendCircle@fkDb";
                var exdDayData = guildMo.getExdDayData(curMonth, curDay);
                var txt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 997 /* friendReportNum */);
                self.skFk.text = StringUtil.printf(txt, exdDayData[1]);
            }
            else {
                self.skImg.source = "friendCircle@txt_mrsr";
                self.skSmallBg.source = "friendCircle@sxfDB";
                var pointDayData = guildMo.getPointDayData(curMonth, curDay);
                var sfTxt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 998 /* friendReportUpPt */);
                var xfTxt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 999 /* friendReportDownPt */);
                self.skSf1.text = StringUtil.printf(sfTxt, pointDayData[1]);
                self.skXf1.text = StringUtil.printf(xfTxt, pointDayData[2]);
            }
        };
        ReportDetail.prototype.drawLine = function () {
            var self = this;
            var tag = self._curTag;
            var guildMo = game.dataMgr.guildMo;
            var dotLine = self.skDotLine;
            dotLine.removeChildren();
            var curMonth = self._curMonth;
            var days = TimeUtil.getMonthDays(curMonth);
            var realDay = self._curDate.getDate(); //当天真实的日期
            var datas = [];
            var height = 0;
            for (var i = 0; i < days; i++) {
                if (self._isCurMonth && (i + 1) > realDay) {
                    continue;
                }
                var value = void 0;
                if (tag == 0) {
                    value = guildMo.getExdDayData(curMonth, i + 1)[1];
                    var tmpVal = String(value);
                    height = 160 / (Math.pow(10, tmpVal.length));
                }
                else {
                    var pointDatas = guildMo.getPointDayData(curMonth, i + 1);
                    value = pointDatas[1] + pointDatas[2];
                    var tmpVal = String(value);
                    height = 160 / (Math.pow(10, tmpVal.length));
                    if (value < 0)
                        value = 0;
                }
                var point = { x: 0, y: 0, c: 0 };
                point.c = 0x37B12D;
                point.x = 15 + i * 37.5;
                point.y = dotLine.height - value * height - 20;
                datas.push(point);
            }
            if (datas) {
                self._pointDatas = datas;
                var dotline = self._curDotLine;
                dotline.lineSize = 5;
                dotline.lineColor = 0x37B12D;
                dotline.dotRadius = self._radius;
                dotline.datas = datas;
                dotLine.addChild(dotline);
            }
        };
        ReportDetail.prototype.showTime = function () {
            var self = this;
            var isCurMonth = self._isCurMonth;
            self._isCurMonth = !isCurMonth;
            self.skDown.scaleY = !isCurMonth ? -1 : 1;
            if (self._isCurMonth) {
                self._curMonth++;
            }
            else {
                self._curMonth--;
            }
            self.skTime.text = self.getCurDate();
            self.updateView();
            self.showData();
        };
        ReportDetail.prototype.updateView = function () {
            var self = this;
            var guildMo = game.dataMgr.guildMo;
            var roomCardCnt = guildMo.getExdMonthData(self._curMonth)[1];
            self.skCardNum.text = String(roomCardCnt);
            var upTotalPoint = guildMo.getPointMonthData(self._curMonth)[1];
            var downTotalPoint = guildMo.getPointMonthData(self._curMonth)[2];
            self.skSf.text = String(upTotalPoint);
            self.skXf.text = String(Math.abs(downTotalPoint));
        };
        ReportDetail.prototype.openView = function () {
            var self = this;
            //获取当前数据
            var data = game.dataMgr.guildMo.getDataByType(self._curTag, self._curMonth, self._curDay);
            var view = new game.ReportDetailPop(self._curTag, data);
            game.gameScene.openPopup(view, null, true);
        };
        ReportDetail.prototype.getCurDate = function () {
            var self = this;
            var yearLang = TRain.langMgr.getTxt("mainLang" /* mainLang */, 923 /* year */);
            var monthLang = TRain.langMgr.getTxt("mainLang" /* mainLang */, 924 /* month */);
            return self._curDate.getFullYear() + yearLang + self._curMonth + monthLang;
        };
        ReportDetail.prototype.getCurMonthDay = function (day) {
            var self = this;
            var monthLang = TRain.langMgr.getTxt("mainLang" /* mainLang */, 924 /* month */);
            var dayLang = TRain.langMgr.getTxt("mainLang" /* mainLang */, 925 /* day */);
            // let curWeek = self._curWeek
            return self._curMonth + monthLang + (day || self._curDate.getDate()) + dayLang;
        };
        ReportDetail.prototype.onDispose = function () {
            var self = this;
            self.skDotLine.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, self.btnClick, self);
            _super.prototype.onDispose.call(this);
        };
        return ReportDetail;
    }(game.UIPopup));
    game.ReportDetail = ReportDetail;
    __reflect(ReportDetail.prototype, "game.ReportDetail");
})(game || (game = {}));
var game;
(function (game) {
    var ReportDetailPop = (function (_super) {
        __extends(ReportDetailPop, _super);
        function ReportDetailPop(type, data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "reportPopSkin";
            self._type = type;
            self._data = data;
            return _this;
        }
        ReportDetailPop.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            var list = self.skList;
            list.itemRender = ReportDtItem;
            list.dataProvider = self._listPro = new cui.ArrayCollection();
            self.updateView();
        };
        ReportDetailPop.prototype.updateView = function () {
            var self = this;
            //获取数据
            var detatilDatas = self._data;
            var tmpArr = [];
            for (var i = 0, len = detatilDatas.length; i < len; i++) {
                var detailData = detatilDatas[i];
                var player = detailData.player;
                var showData = {
                    name: player.player_name,
                    head: player.head_custom,
                    headFrame: player.vip_level,
                    id: player.player_id,
                    time: detailData.time,
                    isPay: self._type == 0,
                    gameId: detailData.game_id,
                    score: detailData.points,
                    roomCard: detailData.roomcard_cnt,
                };
                tmpArr.push(showData);
            }
            tmpArr.sort(function (a, b) {
                return b.time - a.time;
            });
            self._listPro.source = tmpArr;
        };
        ReportDetailPop.prototype.onDispose = function () {
            _super.prototype.onDispose.call(this);
        };
        return ReportDetailPop;
    }(game.UIPopup));
    game.ReportDetailPop = ReportDetailPop;
    __reflect(ReportDetailPop.prototype, "game.ReportDetailPop");
    var ReportDtItem = (function (_super) {
        __extends(ReportDtItem, _super);
        function ReportDtItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "reportPopItemSKin";
            return _this;
        }
        ReportDtItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
        };
        ReportDtItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            var isPay = data.isPay;
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skFrame.source = "head@new" /* headframe */ + data.headFrame;
            self.skName.text = isPay ? game.DataFormat.formatName(data.name) : data.name;
            self.skID.text = "ID:" + data.id;
            var score = data.score;
            self.skScore.visible = !!score;
            if (score) {
                var str = void 0;
                if (score > 0) {
                    str = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 952 /* friendUpPoint */), score);
                }
                else {
                    str = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 953 /* friendDownPoint */), score);
                }
                self.skScore.textFlow = cui.htmlParser.parser(str);
            }
            self.skDate.text = self.skDate1.text = TimeUtil.formatHmsTime(data.time);
            self.skTimeBg.visible = self.skDate.visible = isPay;
            self.skTimeBg1.visible = self.skDate1.visible = !isPay;
            self.skFkGrp.visible = isPay;
            if (isPay) {
                var gameConf = game.dataMgr.gameMo.getGmdConf(data.gameId);
                self.skGameName.text = gameConf.nm;
                self.skGameNum.text = String(data.roomCard);
            }
        };
        return ReportDtItem;
    }(cui.DataItem));
    game.ReportDtItem = ReportDtItem;
    __reflect(ReportDtItem.prototype, "game.ReportDtItem");
})(game || (game = {}));
var game;
(function (game) {
    var UpDownPoint = (function (_super) {
        __extends(UpDownPoint, _super);
        function UpDownPoint() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "sxfSkin";
            self.hCenter = 0;
            self.vCenter = 0;
            return _this;
        }
        UpDownPoint.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(self.close, self);
            self.skLimit.addEventListener(egret.Event.CHANGE, self.OnLimit, self);
            self.skLimit.addEventListener(egret.Event.FOCUS_IN, self.onFocus1, self);
            self.skSure.setTarget(function () {
                var guildMo = game.dataMgr.guildMo;
                var point = parseInt(self.skLimit.text);
                var data = self._data;
                if (self._isUp) {
                    if (point > 0) {
                        guildMo.masterOperation(data.id, 3 /* e_mot_points */, point);
                    }
                    else {
                        game.MsgBox.showTxt("mainLang" /* mainLang */, 964 /* firendInputPt */);
                    }
                }
                else {
                    if (point > 0) {
                        if (data.score >= point) {
                            guildMo.masterOperation(data.id, 3 /* e_mot_points */, (-point));
                        }
                        else {
                            game.MsgBox.showTxt("mainLang" /* mainLang */, 963 /* friendUpBig */);
                        }
                    }
                    else {
                        game.MsgBox.showTxt("mainLang" /* mainLang */, 964 /* firendInputPt */);
                    }
                }
                self.close();
            }, self);
            self.skCancel.setTarget(self.close, self);
            self.skLimit.maxChars = 8;
            self.skLimit.restrict = "0-9";
            self.skOnline1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 343 /* online */);
            self.skNotLine.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 344 /* not_online */);
        };
        UpDownPoint.prototype.setData = function (data, isUp) {
            var self = this;
            self._isUp = isUp;
            self._data = data;
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skFrame.source = "head@new" /* headframe */ + data.headFrame;
            self.skName.text = data.name;
            self.skID.text = "ID:" + data.id;
            var gameId = data.gameId;
            var isOnline = data.isOnline;
            self.skScore.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 942 /* friendIntegral */), data.score));
            self.skOnline1.visible = isOnline && gameId == 0;
            self.skNotLine.visible = !isOnline && gameId == 0;
            if (isUp) {
                self.skLimit.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 956 /* friendUplines */);
                self.skTip.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 958 /* friendUpPointTip */);
            }
            else {
                self.skLimit.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 957 /* friendDownlines */);
                self.skTip.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 959 /* friendDownPointTip */);
            }
            self.skBg.source = isUp ? "friendCircle@txt_upPoint" : "friendCircle@txt_downPoint";
            self.skGameName.visible = gameId > 0;
            if (gameId > 0) {
                var gameConf = game.dataMgr.gameMo.getGmdConf(gameId);
                //判断当前在线还是离线
                var onlineTxt = isOnline ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 343 /* online */) : TRain.langMgr.getTxt("mainLang" /* mainLang */, 344 /* not_online */);
                var txtNum = void 0;
                if (gameConf.isFriendGm) {
                    txtNum = isOnline ? 962 /* friendOnLine */ : 995 /* friendOnLine1 */;
                }
                else {
                    txtNum = isOnline ? 981 /* friendOnLineNoTab */ : 996 /* friendOnLineNoTab1 */;
                }
                var totalTxt = TRain.langMgr.getTxt("mainLang" /* mainLang */, txtNum);
                self.skGameName.textFlow = cui.htmlParser.parser(StringUtil.printf(totalTxt, gameConf.nm, onlineTxt, data.tableId));
            }
        };
        UpDownPoint.prototype.onFocus1 = function (e) {
            this.skLimit.text = "";
        };
        UpDownPoint.prototype.OnLimit = function (e) {
            var txt = e.target.text;
            if (parseInt(txt) > 1000 /* friendPointLimit */) {
                txt = String(1000 /* friendPointLimit */);
            }
            this.skLimit.text = txt;
        };
        UpDownPoint.prototype.onDispose = function () {
            _super.prototype.onDispose.call(this);
        };
        return UpDownPoint;
    }(game.UIPopup));
    game.UpDownPoint = UpDownPoint;
    __reflect(UpDownPoint.prototype, "game.UpDownPoint");
})(game || (game = {}));
var game;
(function (game) {
    var UpDwPointRecord = (function (_super) {
        __extends(UpDwPointRecord, _super);
        function UpDwPointRecord(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "setRecordPopSkin";
            self.hCenter = 0;
            self.vCenter = 0;
            self._data = data;
            return _this;
        }
        UpDwPointRecord.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self._data;
            self.skClose.setTarget(self.close, self);
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skFrame.source = "head@new" /* headframe */ + data.headFrame;
            self.skName.text = data.name;
            self.skID.text = "ID:" + data.id;
            var gameId = data.gameId;
            var isOnline = data.isOnline;
            self.skScore.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 942 /* friendIntegral */), data.score));
            self.skOnline1.visible = isOnline && gameId == 0;
            self.skNotLine.visible = !isOnline && gameId == 0;
            var totalPoints = game.dataMgr.guildMo.getTotalPointById(data.id);
            self.skTotalSf.text = String(totalPoints[0]);
            self.skTotalXf.text = String(totalPoints[1]);
            var list = self.skList;
            list.itemRender = PointRecordItem;
            list.dataProvider = self._listPro = new cui.ArrayCollection();
            self.updateView();
            self.skOnline1.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 343 /* online */);
            self.skNotLine.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 344 /* not_online */);
            self.skGameName.visible = gameId > 0;
            if (gameId > 0) {
                var gameConf = game.dataMgr.gameMo.getGmdConf(gameId);
                //判断当前在线还是离线
                var onlineTxt = isOnline ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 343 /* online */) : TRain.langMgr.getTxt("mainLang" /* mainLang */, 344 /* not_online */);
                var txtNum = void 0;
                if (gameConf.isFriendGm) {
                    txtNum = isOnline ? 962 /* friendOnLine */ : 995 /* friendOnLine1 */;
                }
                else {
                    txtNum = isOnline ? 981 /* friendOnLineNoTab */ : 996 /* friendOnLineNoTab1 */;
                }
                var totalTxt = TRain.langMgr.getTxt("mainLang" /* mainLang */, txtNum);
                self.skGameName.textFlow = cui.htmlParser.parser(StringUtil.printf(totalTxt, gameConf.nm, onlineTxt, data.tableId));
            }
            self.skTip.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 994 /* friendUDSaveData */);
        };
        UpDwPointRecord.prototype.updateView = function () {
            var self = this;
            var id = self._data.id;
            var pointRecords = game.dataMgr.guildMo.getPointRdById(id);
            var showPointRdData = [];
            for (var i = 0, len = pointRecords.length; i < len; i++) {
                var pointRecord = pointRecords[i];
                var showData = {
                    idx: i + 1,
                    time: pointRecord.time,
                    score: pointRecord.points,
                };
                showPointRdData.push(showData);
            }
            showPointRdData.sort(function (a, b) {
                return b.time - a.time;
            });
            self._listPro.source = showPointRdData;
        };
        UpDwPointRecord.prototype.onDispose = function () {
            _super.prototype.onDispose.call(this);
        };
        return UpDwPointRecord;
    }(game.UIPopup));
    game.UpDwPointRecord = UpDwPointRecord;
    __reflect(UpDwPointRecord.prototype, "game.UpDwPointRecord");
    var PointRecordItem = (function (_super) {
        __extends(PointRecordItem, _super);
        function PointRecordItem() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "setRecordPopItemSkin";
            return _this;
        }
        PointRecordItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
        };
        PointRecordItem.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self._data;
            self.skNum.text = String(data.idx);
            self.skDate.text = TimeUtil.formatHmsTime(data.time);
            var score = data.score;
            var str;
            if (score > 0) {
                str = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 952 /* friendUpPoint */), score);
            }
            else {
                str = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 953 /* friendDownPoint */), score);
            }
            self.skScore.textFlow = cui.htmlParser.parser(str);
        };
        return PointRecordItem;
    }(cui.DataItem));
    game.PointRecordItem = PointRecordItem;
    __reflect(PointRecordItem.prototype, "game.PointRecordItem");
})(game || (game = {}));
var game;
(function (game) {
    var RuleView = (function (_super) {
        __extends(RuleView, _super);
        function RuleView(ruleConfs, skin) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            self.useOnce = false;
            self.skinName = skin || "RuleSkin";
            self._ruleConfs = ruleConfs;
            return _this;
        }
        RuleView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skClose.setTarget(function () {
                game.GameUtil.playClickSound();
                self.close();
            }, self);
            //self.updateView(self._ruleConfs[0]);
            if (self.skBtnGrp == null) {
                self.updateView(self._ruleConfs);
            }
            else {
                self.skBtnGrp.setTarget(self.menuClick, self);
                self.skBtnGrp.selectTag = 0;
            }
        };
        RuleView.prototype.rmvInGrp = function () {
            var innerGrp = this.skInGrp;
            for (var i = 0; i < innerGrp.numChildren; i++) {
                innerGrp.getChildAt(i).dispose();
            }
            innerGrp.removeChildren();
        };
        RuleView.prototype.updateView = function (confs) {
            var self = this;
            self.rmvInGrp();
            var maxHeight = 0;
            var addH = 90;
            if (self.skScr) {
                self.skScr.setScrollTop(0);
            }
            for (var key in confs) {
                var ruleConf = confs[key];
                if (ruleConf.isImg) {
                    var img = new cui.Image();
                    img.source = ruleConf.text;
                    img.x = ruleConf.x;
                    img.y = ruleConf.y;
                    self.skInGrp.addChild(img);
                    if (maxHeight < img.y) {
                        maxHeight = img.y;
                        if (ruleConf.isLong && img.height > addH)
                            addH = img.height;
                    }
                    else {
                        addH = ruleConf.size || 0;
                    }
                }
                else {
                    var lab = new cui.Label();
                    var txt = ruleConf.text;
                    lab.textFlow = cui.htmlParser.parser(txt);
                    lab.x = ruleConf.x;
                    lab.y = ruleConf.y;
                    var size = lab.size = ruleConf.size || 30;
                    self.skInGrp.addChild(lab);
                    if (maxHeight < lab.y) {
                        maxHeight = lab.y;
                        //获取\n的个数
                        var len = self.getTxtLen(txt, "\n"); // txt.match(/[\n]/g).length;
                        if (ruleConf.isLong && size * len > addH)
                            addH = size * len;
                    }
                }
            }
            self.skInGrp.width = self.skGrp.width;
            self.skInGrp.height = maxHeight + addH;
            //self.skInGrp.cacheAsBitmap = true;
            self.skGrp.setContentSize(self.skGrp.width, maxHeight + addH);
        };
        //获取\n出现的次数
        RuleView.prototype.getTxtLen = function (str, flagStr) {
            var newStr = str.replace(new RegExp(flagStr, "g"), "");
            var count = (str.length - newStr.length) / flagStr.length;
            return count;
        };
        RuleView.prototype.menuClick = function (item) {
            var self = this;
            var tag = item.tag;
            self.updateView(self._ruleConfs[tag]);
        };
        return RuleView;
    }(game.UIPopup));
    game.RuleView = RuleView;
    __reflect(RuleView.prototype, "game.RuleView");
})(game || (game = {}));
var game;
(function (game) {
    var PseudoWallet = (function (_super) {
        __extends(PseudoWallet, _super);
        function PseudoWallet() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "moneybagSkin";
            self.vCenter = 0;
            self.hCenter = 0;
            self._countDownTm = 0;
            self._countDownTag = 0;
            self._state = 0;
            self._addTag = 0;
            self._addBack = false;
            self.hideBg = true;
            return _this;
        }
        PseudoWallet.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            generalMo.checkSingleBalance();
            generalMo.addListener("CHECK_BALANCE_RESULT" /* CHECK_BALANCE_RESULT */, self.checkBalance, self);
            generalMo.addListener("ADD_SINGLE_GOLD_RESULT" /* ADD_SINGLE_GOLD_RESULT */, self.addSingleGold, self);
            self.skTip.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1034 /* moneyBagTip2 */);
            self.skPut.sound = "click" /* click */;
            self.skPut.setTarget(self.closeAni, self);
            self.skBtn.sound = "click" /* click */;
            self.skBtn.setTarget(self.closeAni, self);
            var curData = game.dataMgr.accMo.getData();
            self.skName.text = curData.nickname + " NO." + curData.aid;
            self.skSendBtn.sound = "click" /* click */;
            self.skSendBtn.setTarget(function () {
                generalMo.checkSingleBalance();
                self._countDownTm = 0;
                self._state = 0;
                self.upBalance();
            }, self);
            self.skClickTip.restrict = "0-9.";
            self.skClickTip.inputType = egret.TextFieldInputType.TEL;
            self.skComeTo.sound = "click" /* click */;
            self.skComeTo.setTarget(self.comeToCurAcc, self);
            self.skClickTip.addEventListener(egret.Event.CHANGE, self.OnAccount, self);
            self.skClickTip.addEventListener(egret.Event.FOCUS_IN, self.onFocus, self);
            self.skClickTip.addEventListener(egret.Event.FOCUS_OUT, self.outFocus, self);
            self.upBalance();
            var curGold = game.dataMgr.accMo.getData().gold;
            if (curGold == 0) {
                self.skBalance2.text = "lu";
            }
            else {
                self.skBalance2.text = game.DataFormat.convertYuanString2(curGold, false);
            }
            self._countDownTag = TRain.core.addFrameDo(function () {
                self._countDownTm++;
                if (self._countDownTm == 30) {
                    self._state = 1;
                    self.upBalance();
                }
            }, self, false, 1000);
            var accMo = game.dataMgr.accMo;
            accMo.addPropListener("gold", function () {
                var curGold = accMo.getData().gold;
                if (curGold == 0) {
                    self.skBalance2.text = "lu";
                }
                else {
                    self.skBalance2.text = game.DataFormat.convertYuanString2(curGold, false);
                }
            }, self);
            self.showAni();
            TRain.core.stage.addEventListener(egret.TouchEvent.TOUCH_END, self.clickStage, self);
        };
        PseudoWallet.prototype.clickStage = function (evt) {
            var self = this;
            if ((evt.target.name == "close") || evt.target instanceof game.PopupLayer) {
                self.closeAni();
            }
        };
        PseudoWallet.prototype.showAni = function () {
            var self = this;
            self.showHideAni(self.skBg, true);
            self.showHideAni(self.skPut, true);
            self.showMidGrp();
        };
        PseudoWallet.prototype.showMidGrp = function () {
            var self = this;
            var skMidAni = self.skMidAniGrp;
            var startY = skMidAni.y;
            self.skMidGrp.mask = new egret.Rectangle(0, 0, self.skMidGrp.width, self.skMidGrp.height);
            self.skMidAniGrp.y = skMidAni.y - skMidAni.height;
            var action = new TRain.ActionSequence();
            var actionProp = new TRain.ActionPropTo(500, 1, { y: startY });
            actionProp.setEaseFun(EaseUtil.quartOut);
            action.addAction(actionProp);
            var actionCall = new TRain.ActionCallDo();
            actionCall.setCall(function () {
                self.skMidGrp.mask = null;
            }, self);
            action.addAction(actionCall);
            TRain.actionMgr.addAction(action, self.skMidAniGrp, false);
        };
        PseudoWallet.prototype.hideMidGrp = function () {
            var self = this;
            var skMidAni = self.skMidAniGrp;
            var startY = skMidAni.y - skMidAni.height;
            self.skMidGrp.mask = new egret.Rectangle(0, 0, self.skMidGrp.width, self.skMidGrp.height);
            var actionProp = new TRain.ActionPropTo(500, 1, { y: startY });
            actionProp.setEaseFun(EaseUtil.quartIn);
            TRain.actionMgr.addAction(actionProp, self.skMidAniGrp, false);
        };
        PseudoWallet.prototype.showHideAni = function (dispaly, isOpen, cb) {
            dispaly.alpha = isOpen ? 0 : 1;
            var endAlpha = isOpen ? 1 : 0;
            var action = new TRain.ActionSequence();
            var actionProp = new TRain.ActionPropTo(500, 1, { alpha: endAlpha });
            action.addAction(actionProp);
            if (cb) {
                var actionCall = new TRain.ActionCallDo(100);
                actionCall.setCall(cb, self);
                action.addAction(actionCall);
            }
            TRain.actionMgr.addAction(action, dispaly, false);
        };
        PseudoWallet.prototype.closeAni = function () {
            var self = this;
            self.showHideAni(self.skBg, false);
            self.hideMidGrp();
            self.showHideAni(self.skPut, false, function () {
                self.close();
            });
        };
        PseudoWallet.prototype.upBalance = function () {
            var self = this;
            var curVal = self._curBalanceVal;
            var isGet = self._state == 0;
            var isGetErr = self._state == 1;
            self.skTip1.visible = isGetErr;
            self.skTip2.visible = isGet;
            self.skSendBtn.visible = isGetErr;
            var noUndefined = curVal != undefined;
            self.skBalance1.visible = noUndefined;
            if (noUndefined) {
                if (curVal == 0) {
                    self.skBalance1.text = "lu";
                }
                else {
                    self.skBalance1.text = game.DataFormat.convertYuanString2(curVal, false);
                }
            }
            var clickTipTxt;
            if (isGet || isGetErr) {
                self.skComeTo.filterNm = "grayCF";
                clickTipTxt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1035 /* moneyBagTip3 */);
                self.skComeTo.enabled = false;
            }
            if (noUndefined) {
                clickTipTxt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1033 /* moneyBagTip1 */);
                self.skComeTo.enabled = true;
                self.skComeTo.filterNm = null;
            }
            self.skClickTip.prompt = clickTipTxt;
        };
        PseudoWallet.prototype.onFocus = function () {
            var self = this;
            this.skClickTip.text = "";
            self.skInput.visible = true;
            var txt;
            if (self._curBalanceVal == undefined) {
                txt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 852 /* getting */);
            }
            else {
                txt = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 1039 /* moneyBagTip7 */), game.DataFormat.convertYuanString2(self._curBalanceVal, true));
            }
            self.skInput.text = txt;
        };
        PseudoWallet.prototype.outFocus = function () {
            var self = this;
            self.skInput.visible = false;
        };
        PseudoWallet.prototype.OnAccount = function (e) {
            var self = this;
            var txtVal = parseFloat(e.target.text);
            if (txtVal) {
                if ((txtVal * 100) >= self._curBalanceVal) {
                    self.skClickTip.text = String(self._curBalanceVal / 100);
                }
            }
        };
        PseudoWallet.prototype.checkBalance = function (gold) {
            var self = this;
            self._curBalanceVal = gold;
            if (self._countDownTag) {
                TRain.core.rmvFrameDoById(self._countDownTag);
                self._countDownTag = 0;
            }
            self._state = 2;
            self.upBalance();
        };
        PseudoWallet.prototype.addSingleGold = function (result, gold) {
            var self = this;
            var txt;
            if (result == 1 /* e_rmt_success */) {
                txt = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 1036 /* moneyBagTip4 */), (gold / 100));
                game.dataMgr.accMo.addVal("gold", gold);
                self._curBalanceVal -= gold;
                self.skBalance1.text = game.DataFormat.convertYuanString2(self._curBalanceVal, false);
                game.MsgBox.showTipBox(false, 1036 /* moneyBagTip4 */, "mainLang" /* mainLang */, txt);
            }
            else {
                txt = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 1037 /* moneyBagTip5 */), TRain.langMgr.getErrText(result));
                game.MsgBox.showTipBox(false, 1037 /* moneyBagTip5 */, "mainLang" /* mainLang */, txt);
            }
            if (self._addTag) {
                TRain.core.rmvDelayDoByID(self._addTag);
                self._addTag = 0;
            }
            self._addBack = true;
        };
        PseudoWallet.prototype.comeToCurAcc = function () {
            var self = this;
            self._addBack = false;
            var curPutGold = parseFloat(self.skClickTip.text);
            if (curPutGold) {
                game.dataMgr.generalMo.askAddSingleGold((curPutGold * 100));
                self._addTag = TRain.core.addDelayDo(function () {
                    if (!self._addBack) {
                        game.BusyLayer.getInst().hideBusy();
                        game.MsgBox.showTipBox(false, 1038 /* moneyBagTip6 */, "mainLang" /* mainLang */);
                    }
                    TRain.core.rmvDelayDoByID(self._addTag);
                    self._addTag = 0;
                }, self, 30000);
            }
            else {
                game.MsgBox.showTipBox(false, 256 /* GoldError */, "mainLang" /* mainLang */);
            }
            self.skClickTip.text = "";
        };
        PseudoWallet.prototype.onDispose = function () {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            generalMo.rmvAllListener(self);
            if (self._countDownTag) {
                TRain.core.rmvFrameDoById(self._countDownTag);
                self._countDownTag = 0;
            }
            TRain.core.stage.removeEventListener(egret.TouchEvent.TOUCH_END, self.clickStage, self);
            game.dataMgr.accMo.rmvPropListener("gold", self);
            _super.prototype.onDispose.call(this);
        };
        return PseudoWallet;
    }(game.UIPopup));
    game.PseudoWallet = PseudoWallet;
    __reflect(PseudoWallet.prototype, "game.PseudoWallet");
})(game || (game = {}));
var game;
(function (game) {
    var MyWalletView = (function (_super) {
        __extends(MyWalletView, _super);
        // private _walletTag:number;
        function MyWalletView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "MyWalletSkin";
            self._isOpen = game.dataMgr.generalMo.getAutoTranFer();
            self._dropDownTag = false;
            self._hallToGmFlag = true;
            self._curAskWithdrawTm = 0;
            self._isOpenUi = true;
            return _this;
            // self._hallToCerFlag = true;
        }
        MyWalletView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            var accMo = game.dataMgr.accMo;
            generalMo.addListener("Game_wellet_refrsh" /* Game_wallet_refrsh */, self.refrshList, self);
            accMo.addPropListener("gold", self.updateHallGold, self);
            generalMo.addListener("Depsit_wallet" /* Depsit_wallet */, self.refreshSingleGm, self);
            generalMo.addListener("WithDraw_wallet" /* WithDraw_wallet */, self.refreshSingleGm, self);
            generalMo.addListener("Reflush_wallet" /* Reflush_wallet */, self.refreshSingleGm, self);
            self.skGoldPwd.addEventListener(egret.Event.CHANGE, self.OnLimit, self);
            self.skGoldPwd.addEventListener(egret.Event.FOCUS_IN, self.onFocus1, self);
            self.skGoldPwd.restrict = "0-9.";
            self.skGoldPwd.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1113 /* InputTransfer1 */);
            // self.skMailCnt.text = TRain.langMgr.getTxt(LangGrp.mainLang,langConsts.mainLang.myWallet);
            for (var i = 0; i < 6; ++i) {
                var TileId = 1101 /* centerWallet */ + i;
                var lab = self['skTitleLabe' + (i + 1)];
                if (lab) {
                    lab.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, TileId);
                }
            }
            var gmList = self.skXfList;
            gmList.itemRender = game.WalletTile;
            gmList.dataProvider = self._gamePro = new cui.ArrayCollection();
            var leftGmList = self.skGoldList;
            leftGmList.itemRender = WelletGmName;
            leftGmList.dataProvider = self._leftGmPro = new cui.ArrayCollection();
            var rightGmList = self.skGameList;
            rightGmList.itemRender = WelletGmName;
            rightGmList.dataProvider = self._rightGmPro = new cui.ArrayCollection();
            // self.refreshHallGm();
            // self.updateCenterGold();
            // self.showDropDownBtn();
            self.updateHallGold();
            self.skRecycle.setTarget(function () {
                //一键回收
                var curSvr = TimeUtil.getSvrMS();
                var curAskTm = self._curAskWithdrawTm;
                if (curSvr - curAskTm > 60000) {
                    game.dataMgr.generalMo.withdrawAllWallet();
                    self._curAskWithdrawTm = curSvr;
                    game.MsgBox.showTxt("mainLang" /* mainLang */, 1189 /* recoverSuccess */);
                }
                else {
                    game.MsgBox.showTxt("mainLang" /* mainLang */, 1122 /* OperateTooOften */);
                }
            }, self);
            self.skOpen.setTarget(function () {
                var isOpen = self._isOpen;
                var showTxt = isOpen ? 1111 /* closeTransfer */ : 1112 /* openTransfer */;
                game.MsgBox.showBoxCB("mainLang" /* mainLang */, showTxt, function (tag) {
                    if (tag == 1) {
                        generalMo.setAutoTranFer(!isOpen);
                        self._isOpen = !isOpen;
                        self.showOpenBtn();
                    }
                }, self);
            }, self);
            self.skClose.setTarget(function () {
                game.gameScene.goHome();
                // gameScene.showHallUI(UITag.personCenter);
                // gameScene.homeUI.homeMenuUI.skPlatMenu.selectTag = homeMenuTp.members;
            }, self);
            self.skAdd.setTarget(function () {
                // let gameMo = dataMgr.gameMo;
                // let rechargeMo = gameMo.getCurMoInfo(ModuleName.recharge);
                // if (rechargeMo && rechargeMo.state != GMD_UPDATE_STATE.NONE) {
                //     rechargeMo.loadNum = 0;
                //     rechargeMo.isBtn = true;
                //     gameMo.loadModule(rechargeMo.nm);
                //     BusyLayer.getInst().showBusy();
                // }
                if (game.dataMgr.generalMo.isFunOpen(7 /* shop */)) {
                    game.gameScene.showHallUI(2 /* shop */, null, true);
                }
            }, self);
            self.skFlush.setTarget(function () {
                //钱包刷新
                var curSvr = TimeUtil.getSvrMS();
                var curAskTm = game.dataMgr.generalMo.getAskWalletTm();
                if (curSvr - curAskTm > 60000) {
                    game.dataMgr.generalMo.askWalletList(self._isOpenUi);
                }
                else {
                    game.MsgBox.showTxt("mainLang" /* mainLang */, 1122 /* OperateTooOften */);
                }
            }, self);
            self.skMaxGold.setTarget(function () {
                var maxGold;
                // if(!self._walletTag){
                //     if(self._hallToCerFlag){
                //         let accMo = dataMgr.accMo;
                //         let accData = accMo.getData();
                //         maxGold = DataFormat.convertGoldString3(accData.gold);
                //     }else{
                //         maxGold = DataFormat.convertGoldString3(dataMgr.generalMo.getCurGmGold(-1)); //中心钱包 传 -1
                //     }
                // }else{
                if (self._hallToGmFlag) {
                    var accMo_1 = game.dataMgr.accMo;
                    var accData = accMo_1.getData();
                    maxGold = game.DataFormat.convertGoldString3(accData.gold);
                }
                else {
                    var chooseGmId = self._chooseGmId;
                    maxGold = game.DataFormat.convertGoldString3(game.dataMgr.generalMo.getCurGmGold(chooseGmId)); //中心钱包 传 -1
                }
                // }
                self.skGoldPwd.text = maxGold;
            }, self);
            // self.skUnfold.setTarget(function(){
            //     self._dropDownTag = !self._dropDownTag;
            //     self.showDropDownBtn();
            // },self);
            self.skTransfer.setTarget(self.transferGold, self);
            self.skDeposit.setTarget(function () {
                if (game.dataMgr.generalMo.isFunOpen(7 /* shop */)) {
                    game.gameScene.showHallUI(2 /* shop */, null, true);
                }
            }, self);
            self.skWithdrawal.setTarget(function () {
                if (game.dataMgr.generalMo.isFunOpen(7 /* shop */)) {
                    game.gameScene.showHallUI(3 /* safeBox */, null, true);
                }
            }, self);
            self.skArrows.setTarget(function () {
                // if(!self._walletTag){
                //     self._hallToCerFlag = !self._hallToCerFlag;
                // }else{
                self._hallToGmFlag = !self._hallToGmFlag;
                // }
                self.refreshHallGm();
            }, self);
            self.skGoldSelect.setTarget(function () {
                // if(self._walletTag == walletButtponTp.transferWallet){
                if (!self._hallToGmFlag) {
                    self.refreshLeftBtn();
                    var tmpLeftFlag = self._leftGmFlag = !self._leftGmFlag;
                    self.skGoldGrap.visible = tmpLeftFlag;
                }
                // }
            }, self);
            self.skGameSelect.setTarget(function () {
                // if(self._walletTag == walletButtponTp.transferWallet){
                if (self._hallToGmFlag) {
                    self.refreshRightBtn();
                    var tmpRightFlag = self._rightGmFlag = !self._rightGmFlag;
                    self.skGameGrap.visible = tmpRightFlag;
                }
                // }
            }, self);
            self.showContent();
            self.showArrowAni();
            self._tmTag = TRain.core.addFrameDo(self.showArrowAni, self, false, 3000);
            // self.skGrp.setTarget(self.showContent,self);
            // self.skGrp.selectTag = walletButtponTp.centerWallet;
        };
        MyWalletView.prototype.showArrowAni = function () {
            var self = this;
            var actionProp = new TRain.ActionPropTo(1000, 1, { alpha: 0.5 });
            actionProp.setEaseFun(EaseUtil.quadOut);
            var actionProp1 = new TRain.ActionPropTo(1000, 1, { alpha: 1 });
            actionProp1.setEaseFun(EaseUtil.quadIn);
            var actionProp2 = new TRain.ActionDo(1000);
            var actionSeq = new TRain.ActionSequence([actionProp, actionProp1, actionProp2]);
            TRain.actionMgr.addAction(actionSeq, self.skArrows, false);
        };
        MyWalletView.prototype.transferGold = function () {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            var curTxt = self.skGoldPwd.text;
            var curTxtVal = Math.round(parseFloat(curTxt) * 100); // 当前lab中的
            if (curTxt == "" || curTxtVal <= 0) {
                game.MsgBox.showTxt("mainLang" /* mainLang */, 1109 /* warningGolds */);
            }
            else {
                var curGold = game.dataMgr.accMo.getData().gold; //当前大厅余额
                var chooseGmGold = generalMo.getCurGmGold(self._chooseGmId);
                // let centerGold = generalMo.getCurGmGold(-1);
                // let walletTag = self._walletTag;
                var walletInfo = {};
                walletInfo.game_id = self._chooseGmId;
                walletInfo.gold = curTxtVal;
                // if(!walletTag){
                //     if(self._hallToCerFlag){ //如果是大厅 -》 中心
                //         if(curTxtVal > curGold){
                //             MsgBox.showTxt(LangGrp.mainLang,langConsts.mainLang.notGreaterMaxGold);
                //         }else{
                //             generalMo.askDepsitWallet(walletInfo);
                //         }
                //     }else{
                //         if(curTxtVal > centerGold){
                //             MsgBox.showTxt(LangGrp.mainLang,langConsts.mainLang.notGreaterMaxGold);
                //         }else{
                //             generalMo.askDrawWallet(walletInfo);
                //         }
                //     }
                // }else{
                if (self._hallToGmFlag) {
                    if (curTxtVal > curGold) {
                        game.MsgBox.showTxt("mainLang" /* mainLang */, 1114 /* notGreaterMaxGold */);
                    }
                    else {
                        generalMo.askDepsitWallet(walletInfo);
                    }
                }
                else {
                    if (curTxtVal > chooseGmGold) {
                        game.MsgBox.showTxt("mainLang" /* mainLang */, 1114 /* notGreaterMaxGold */);
                    }
                    else {
                        generalMo.askDrawWallet(walletInfo);
                    }
                }
                // }
            }
        };
        //显示中间内容
        MyWalletView.prototype.showContent = function () {
            var self = this;
            // let tag = item.tag;
            // if(tag == walletButtponTp.transferWallet){
            //     MsgBox.showTxt(LangGrp.mainLang,langConsts.mainLang.notOpen);
            //     self.skGrp.selectTag = walletButtponTp.centerWallet;
            //     return;
            // }
            // if(tag == self._walletTag){
            //     return;
            // }
            // self._walletTag = tag;
            game.dataMgr.generalMo.askWalletList(self._isOpenUi);
            // self.skCentreGrap.visible = tag == walletButtponTp.centerWallet;
            // self.skTransferGarp.visible = tag == walletButtponTp.transferWallet;
            // self.skAutoGarp.visible = tag == walletButtponTp.transferWallet;
            self._gamePro.source = null;
            self.skXfList.itemSkinName = "WallerGameSkin";
            self.showGame();
            self.refreshHallGm();
            self.showOpenBtn();
            // self.showDropDownBtn();
        };
        MyWalletView.prototype.updateHallGold = function () {
            var self = this;
            var accData = game.dataMgr.accMo.getData();
            self.skDepositGold.text = game.DataFormat.convertYuanString2(accData.gold);
        };
        // private updateCenterGold(){
        //     let self = this;
        //     let centerGold = dataMgr.generalMo.getCurGmGold(-1); //中心钱包 传 -1
        //     self.skGolds.text = DataFormat.convertYuanString2(centerGold,true);
        // }
        //刷新钱包列表
        MyWalletView.prototype.refrshList = function () {
            var self = this;
            // self.updateCenterGold();
            self.showGame();
            if (!self._isOpenUi) {
                game.MsgBox.showTxt("mainLang" /* mainLang */, 1188 /* flushSuccess */);
            }
            self._isOpenUi = false;
        };
        //余额存入钱包 刷新
        // private depsitWallet(info:NET_CONF.msg_wallet_info){
        //     let self = this;
        //     MsgBox.showTxt(LangGrp.mainLang,langConsts.mainLang.transferSuccess);
        //     if(info.game_id == -1){
        //     //     self.updateCenterGold();
        //     }else{
        //         //刷新对应的游戏
        //     self.refreshGame(info.game_id);
        //     }
        // }
        // //钱包存入余额 刷新
        // private withDrawWallet(info:NET_CONF.msg_wallet_info){
        //     let self = this;
        //     MsgBox.showTxt(LangGrp.mainLang,langConsts.mainLang.transferSuccess);
        //     if(info.game_id == -1){
        //         // self.updateCenterGold();
        //     }else{
        //         //刷新对应的游戏
        //     self.refreshGame(info.game_id);
        //     }
        // }
        MyWalletView.prototype.refreshSingleGm = function (info, hasTip) {
            if (hasTip === void 0) { hasTip = true; }
            var self = this;
            if (hasTip) {
                game.MsgBox.showTxt("mainLang" /* mainLang */, 1116 /* transferSuccess */);
            }
            self.refreshGame(info.game_id);
        };
        //刷新 skGoldGrap  skGameGrap
        MyWalletView.prototype.refreshHallGm = function () {
            var self = this;
            self.skGoldGrap.visible = false;
            self.skGameGrap.visible = false;
            self._leftGmFlag = false;
            self._rightGmFlag = false;
            self.refreshLeftBtn();
            self.refreshRightBtn();
            //如果是中心钱包 
            // if( !self._walletTag ){
            //     if(self._hallToCerFlag){ // 0: 大厅余额 -1 中心钱包
            //         self.showleftLab(0);
            //         self.showRightLab(-1);
            //     }else{
            //         self.showleftLab(-1);
            //         self.showRightLab(0);
            //     }
            // }else{
            if (self._hallToGmFlag) {
                self.showleftLab(0);
                for (var i = 0, len = self._rightGmArr.length; i < len; ++i) {
                    var rightGmData = self._rightGmArr[i];
                    rightGmData.isSel = self._chooseGmId == rightGmData.gameId;
                    self._rightGmPro.itemUpdated(rightGmData);
                    if (rightGmData.isSel) {
                        self.showRightLab(rightGmData.gameId);
                    }
                }
            }
            else {
                for (var i = 0, len = self._leftGmArr.length; i < len; ++i) {
                    var leftGmData = self._leftGmArr[i];
                    leftGmData.isSel = self._chooseGmId == leftGmData.gameId;
                    self._leftGmPro.itemUpdated(leftGmData);
                    if (leftGmData.isSel) {
                        self.showleftLab(leftGmData.gameId);
                    }
                }
                self.showRightLab(0);
            }
            // }
        };
        MyWalletView.prototype.refreshLeftBtn = function () {
            var self = this;
            var leftGmFlag = self._leftGmFlag;
            self.skSeletImg1.source = leftGmFlag ? "wallet@down" : "wallet@up";
            self.skSeletImg1.visible = !self._hallToGmFlag;
        };
        MyWalletView.prototype.refreshRightBtn = function () {
            var self = this;
            var rightGmFlag = self._rightGmFlag;
            self.skSeletImg2.source = rightGmFlag ? "wallet@down" : "wallet@up";
            self.skSeletImg2.visible = self._hallToGmFlag;
        };
        MyWalletView.prototype.showleftLab = function (gameId) {
            var self = this;
            // if(!self._walletTag){
            //     if(gameId == 0){
            //         self.skHallGold.text = TRain.langMgr.getTxt(LangGrp.mainLang,langConsts.mainLang.hallWallet);
            //     }else{
            //         self.skHallGold.text = TRain.langMgr.getTxt(LangGrp.mainLang,langConsts.mainLang.centerWallet);
            //     }
            // }else{
            if (gameId == 0) {
                self.skHallGold.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1115 /* hallWallet */);
            }
            else {
                var gameConf = game.dataMgr.gameMo.getGmdConf(gameId);
                self.skHallGold.text = gameConf.nm;
            }
            // }
        };
        MyWalletView.prototype.showRightLab = function (gameId) {
            var self = this;
            // if(!self._walletTag){
            //     if(gameId == 0){
            //         self.skGameName.text = TRain.langMgr.getTxt(LangGrp.mainLang,langConsts.mainLang.hallWallet);
            //     }else{
            //         self.skGameName.text = TRain.langMgr.getTxt(LangGrp.mainLang,langConsts.mainLang.centerWallet);
            //     }
            // }else{
            if (gameId == 0) {
                self.skGameName.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1115 /* hallWallet */);
            }
            else {
                var gameConf = game.dataMgr.gameMo.getGmdConf(gameId);
                self.skGameName.text = gameConf.nm;
            }
            // }
        };
        // public clickBtn(item:WelletTile):void{
        //     let self = this;
        //     let data:IWelletGmData = <IWelletGmData>item.data;
        //     if(data.sel){
        //         self._clickGmId = data.gameId;
        //         //一键转存
        //     }
        // }
        MyWalletView.prototype.clickGm = function (item) {
            var self = this;
            var data = item.data;
            if (data.isLeft) {
                for (var i = 0, len = self._leftGmArr.length; i < len; ++i) {
                    var leftGmData = self._leftGmArr[i];
                    leftGmData.isSel = data.gameId == leftGmData.gameId;
                    self._leftGmPro.itemUpdated(leftGmData);
                    if (leftGmData.isSel) {
                        self.showleftLab(leftGmData.gameId);
                        self._chooseGmId = leftGmData.gameId;
                    }
                }
            }
            else {
                for (var i = 0, len = self._rightGmArr.length; i < len; ++i) {
                    var rightGmData = self._rightGmArr[i];
                    rightGmData.isSel = data.gameId == rightGmData.gameId;
                    self._rightGmPro.itemUpdated(rightGmData);
                    if (rightGmData.isSel) {
                        self.showRightLab(rightGmData.gameId);
                        self._chooseGmId = rightGmData.gameId;
                    }
                }
            }
        };
        MyWalletView.prototype.refreshGame = function (game_id) {
            var self = this;
            for (var i = 0, len = self._showGmArr.length; i < len; ++i) {
                var gameData = self._showGmArr[i];
                if (gameData.tag == game_id) {
                    var gold = game.dataMgr.generalMo.getCurGmGold(game_id);
                    gameData.lab = "￥" + game.DataFormat.convertGoldString3(gold);
                    self._gamePro.itemUpdated(gameData);
                }
            }
        };
        MyWalletView.prototype.showGame = function () {
            var self = this;
            var showGms = self._showGmArr = [];
            var showLeftGms = self._leftGmArr = [];
            var showRightGms = self._rightGmArr = [];
            var accMo = game.dataMgr.accMo;
            var gameList;
            // if(!self._walletTag){
            //     gameList = accMo.getCenterGms();
            // }else{
            gameList = accMo.getTransferGms();
            // }
            var len = gameList.length;
            // if(len < 12 ){
            //     len = 12;
            // }
            var row = Math.floor(self.skXfList.width / 200);
            var line = Math.ceil(len / row);
            var maxHight = line * 95;
            self.skXfList.setContentSize(self.skXfList.width, maxHight);
            for (var i = 0; i < len; ++i) {
                var gmInfo = gameList[i];
                var showData = void 0;
                if (!gmInfo) {
                    showData = { nm: "", lab: "" };
                }
                else {
                    var curConf = game.dataMgr.gameMo.getGmdConf(gmInfo.gameid);
                    if (curConf) {
                        showData = { nm: curConf.nm, tag: gmInfo.gameid };
                        // if(self._walletTag == walletButtponTp.transferWallet){
                        var gold = game.dataMgr.generalMo.getCurGmGold(gmInfo.gameid);
                        showData.lab = "￥" + game.DataFormat.convertGoldString3(gold);
                    }
                    else {
                        showData = { nm: "", lab: "" };
                    }
                    // }
                }
                showGms.push(showData);
            }
            for (var j = 0, jLen = gameList.length; j < jLen; ++j) {
                var gmInfo1 = gameList[j];
                var curConf1 = game.dataMgr.gameMo.getGmdConf(gmInfo1.gameid);
                if (curConf1) {
                    if (j == 0) {
                        self._chooseGmId = gmInfo1.gameid;
                    }
                    var showLeftData = {
                        handle: self,
                        gameId: curConf1.id,
                        name: curConf1.nm,
                        isSel: j == 0,
                        isLeft: true,
                    };
                    showLeftGms.push(showLeftData);
                    var showRightData = {
                        handle: self,
                        gameId: curConf1.id,
                        name: curConf1.nm,
                        isSel: j == 0,
                        isLeft: false,
                    };
                    showRightGms.push(showRightData);
                }
            }
            self._gamePro.source = showGms;
            self._leftGmPro.source = showLeftGms;
            self._rightGmPro.source = showRightGms;
        };
        // private showDropDownBtn(){
        //     let self = this;
        //     let accMo = dataMgr.accMo;
        //     let gameList:NET_CONF.msg_game_info[];
        //     if(!self._walletTag){
        //         gameList = accMo.getCenterGms();
        //     }else{
        //         gameList = accMo.getTransferGms();
        //     }
        //     self.skUnfold.visible = gameList.length > 12;
        //     let dropDownTag = self._dropDownTag;
        //     self.skUnfold.icon = dropDownTag ? "wallet@txt_sq" : "wallet@txt_zk";
        //     self.refreshAutoTran();
        //     let itemH = self.skXfList.layout.itemH;
        //     if(dropDownTag){
        //         self.skXfScrll.scrollPolicyV = "on";
        //         self.skXfScrll.height = self.skScrllGrap.height-(self.skUnfold.height) * 2;
        //         self.skUnfold.y = self.skXfScrll.height - itemH * 0.2;
        //     }else{
        //         self.skScrllGrap.touchThrough = true;
        //         self.skXfScrll.scrollPolicyV = "off";
        //         self.skXfScrll.height = itemH * 3;
        //         self.skUnfold.y = self.skXfScrll.height + itemH * 0.2;
        //         if(!self._walletTag){
        //             self.skOperateGrap.y = self.skXfScrll.y + itemH * 0.2 + self.skUnfold.height;
        //         }else{
        //             self.skOperateGrap.y = self.skXfScrll.y + itemH;
        //         }
        //     }
        //     self.skBitGrap.visible = gameList.length > 0 ;
        // }
        MyWalletView.prototype.showOpenBtn = function () {
            var self = this;
            var isOpen = self._isOpen;
            self.skOpen.icon = isOpen ? "wallet@openBtn" : "wallet@closeBtn";
            //刷新 一键回收、一键转入、还有底下的转账金额
            self.refreshAutoTran();
        };
        // 刷新自动转账等
        MyWalletView.prototype.refreshAutoTran = function () {
            var self = this;
            var dropDownTag = self._dropDownTag;
            // if(!self._walletTag){
            //     self.skOperateGrap.visible = !dropDownTag ;
            //     self.skAutoGarp.visible = false;
            //     // self.skOperateGrap.y -= self.skAutoGarp.height;
            // }else{
            self.skOperateGrap.visible = !self._isOpen && !dropDownTag;
            self.skAutoGarp.visible = !dropDownTag;
            // self.skOperateGrap.y += self.skAutoGarp.height;
            // }
        };
        MyWalletView.prototype.onFocus1 = function (e) {
            this.skGoldPwd.text = "";
        };
        MyWalletView.prototype.OnLimit = function (e) {
            var txt = e.target.text;
            var idx = txt.indexOf('.');
            if (idx != -1) {
                txt = txt.slice(0, idx + 3);
            }
            this.skGoldPwd.text = txt;
        };
        MyWalletView.prototype.rechargeMoClick = function (tag) {
            var gameMo = game.dataMgr.gameMo;
            var rechargeMo = gameMo.getCurMoInfo("recharge" /* recharge */);
            if (rechargeMo) {
                if (!rechargeMo.state) {
                    game.gameScene.showHallUI(tag, { showMain: false });
                }
                else {
                    if (rechargeMo.state == 1 /* NEED_UPDATE */ || rechargeMo.state == 2 /* UPDATING */ || rechargeMo.state == 3 /* FAIL */) {
                        rechargeMo.loadNum = 0;
                        rechargeMo.isBtn = true;
                        gameMo.loadModule(rechargeMo.nm);
                        game.BusyLayer.getInst().showBusy();
                    }
                    else {
                        game.gameScene.showHallUI(tag, { showMain: false });
                    }
                }
            }
        };
        MyWalletView.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.generalMo.rmvAllListener(self);
            game.dataMgr.accMo.rmvPropListener("gold", self);
            if (self._tmTag) {
                TRain.core.rmvFrameDoById(self._tmTag);
                self._tmTag = 0;
            }
            _super.prototype.onDispose.call(this);
        };
        return MyWalletView;
    }(game.UIFullFW));
    game.MyWalletView = MyWalletView;
    __reflect(MyWalletView.prototype, "game.MyWalletView");
    var WelletGmName = (function (_super) {
        __extends(WelletGmName, _super);
        function WelletGmName() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "WalletTitleSkin";
            return _this;
        }
        WelletGmName.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skBtn.setTarget(function () {
                data.handle.clickGm(self);
            }, self);
        };
        WelletGmName.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skBg.visible = data.isSel;
            self.skLab.text = data.name;
        };
        return WelletGmName;
    }(cui.DataItem));
    game.WelletGmName = WelletGmName;
    __reflect(WelletGmName.prototype, "game.WelletGmName");
})(game || (game = {}));
var game;
(function (game) {
    var jieSuanView = (function (_super) {
        __extends(jieSuanView, _super);
        function jieSuanView(plyCount, plydata, score, config, roomId, type) {
            if (type === void 0) { type = 1; }
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "gameJieSuanView";
            self._plyCount = plyCount;
            self._plyData = plydata;
            self._scoreData = score;
            self._config = config;
            self._type = type;
            self._roomId = roomId;
            return _this;
        }
        jieSuanView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            if (self.skConfGrp)
                self._tag = self.skConfGrp.tag;
            self.AllPos();
        };
        jieSuanView.prototype.setData = function (data, score, selfId, isXu, type) {
            if (isXu === void 0) { isXu = false; }
            if (type === void 0) { type = 1; }
            var self = this;
            if (data)
                self._plyData = data;
            self._scoreData = score;
            self.skfkImg0.source = self.skfkImg1.source = self.skfkImg2.source = self.skfkImg3.source = (type == 1) ? "roomMode@txt_fkIcon1" : "friendCircle@kaPan";
            self.skOwnerGrp.visible = self.skXuOwnerGrp.visible = selfId == 0;
            if (self.skWaitBg)
                self.skWaitBg.visible = selfId != 0;
            self.skWait.visible = self.skXuWait.visible = self.skImg.visible = selfId != 0;
            if (selfId == 0) {
                self.skXuFei.icon = self.skStart.icon = self.skXuStart.icon = "fkEnd@txt_xufei";
            }
            else {
                self.skXuFei.touchEnabled = self.skStart.touchEnabled = self.skXuStart.touchEnabled = isXu;
                self.skXuFei.icon = self.skStart.icon = self.skXuStart.icon = isXu ? "fkEnd@txt_start01" : "fkEnd@txt_start02";
            }
            var textNum = isXu ? 915 /* rRenewaled */ : 914 /* rWaitRenewal */;
            self.skWait.text = self.skXuWait.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, textNum);
            var roomCard = (type == 1) ? game.dataMgr.accMo.getData().room_card : game.dataMgr.guildMo.getGuildData().roomcard_cnt;
            self.skNotice.textFlow = self.skNoticeXu.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 1013 /* xufei */), self._config.cost_count, self._config.rounds, roomCard));
            var tempId = self.getRoomId(self._roomId);
            self.skRoom.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 907 /* rRoomNum */), tempId);
            self.skJuShu.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 908 /* rJuShuNum */), " ") + self._config.rounds + "/" + self._config.rounds;
            self.updateView();
        };
        jieSuanView.prototype.getRoomId = function (roomId) {
            var tempId;
            var self = this;
            var type = self._type;
            if (type == 1) {
                if (roomId > 999 && roomId < 10000) {
                    tempId = "0" + roomId;
                }
                else if (roomId > 99 && roomId < 1000) {
                    tempId = "00" + roomId;
                }
                else if (roomId > 9 && roomId < 100) {
                    tempId = "000" + roomId;
                }
                else if (roomId < 10) {
                    tempId = "0000" + roomId;
                }
                else {
                    tempId = roomId;
                }
            }
            else if (type == 2) {
                tempId = String(roomId).slice(-3);
            }
            return tempId;
        };
        jieSuanView.prototype.AllPos = function () {
            var self = this;
            var count = self._plyCount;
            if (count == 2) {
                self._posArr = (self._tag == 0) ? [325, 670] : ((self._tag == 1) ? [299, 630] : [286, 670]);
            }
            else if (count == 3) {
                self._posArr = (self._tag == 0) ? [190, 495, 800] : ((self._tag == 1) ? [153, 484, 814] : [163, 472, 781]);
            }
            else if (count == 4) {
                self._posArr = (self._tag == 0) ? [84, 359, 634, 909] : ((self._tag == 1) ? [63, 338, 613, 888] : [50, 339, 628, 917]);
            }
            else if (count == 5) {
                self._posArr = (self._tag == 0) ? [48, 284, 521, 757, 993] : ((self._tag == 1) ? [41, 274, 508, 741, 974] : [39, 274, 506, 749, 990]);
            }
            else if (count == 6) {
                self._posArr = (self._tag == 0) ? [2, 216, 422, 636, 848, 1059] : ((self._tag == 1) ? [-7, 198, 393, 597, 802, 1007] : [6, 221, 406, 610, 815, 1020]);
            }
        };
        jieSuanView.prototype.updateView = function () {
            var self = this;
            var tempData = self._plyData;
            var tempScore = self._scoreData;
            var allScore = [0, 0, 0, 0];
            var rank = [0, 0, 0, 0];
            var count = self._plyCount;
            var list = self.skJieSuanGrp;
            list.removeChildren();
            var temp = [0, 0, 0, 0];
            for (var i = 0; i < tempScore.length; i++) {
                var score = tempScore[i];
                for (var j = 0; j < count; j++) {
                    allScore[j] += score[j];
                    temp[j] = allScore[j];
                }
            }
            temp = temp.sort(function (a, b) {
                return b - a;
            });
            var temp1 = temp[0];
            for (var i = 0; i < allScore.length; i++) {
                if (temp1 == allScore[i]) {
                    rank[i] = 1;
                }
            }
            for (var i = 0; i < count; i++) {
                var ply = tempData[i];
                if (ply) {
                    var plyinfo = {
                        nickName: ply.nickName,
                        head: ply.head,
                        vip: ply.vip,
                        plyScore: allScore[i],
                        rank: rank[i],
                        isOwner: (ply.seat == 0),
                    };
                    var tempTile = void 0;
                    if (count > 4) {
                        tempTile = new JieSuanSmallTile(plyinfo);
                    }
                    else {
                        tempTile = new JieSuanTile(plyinfo);
                    }
                    tempTile.x = self._posArr[i];
                    list.addChild(tempTile);
                }
            }
        };
        return jieSuanView;
    }(cui.Component));
    game.jieSuanView = jieSuanView;
    __reflect(jieSuanView.prototype, "game.jieSuanView");
    var JieSuanTile = (function (_super) {
        __extends(JieSuanTile, _super);
        function JieSuanTile(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "jieSuanInfoSkin";
            self._data = data;
            return _this;
        }
        JieSuanTile.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            var score = data.plyScore;
            self.skBg.source = "fkEnd@back1_1";
            self.skOwner.visible = data.isOwner;
            self.skScore.text = (score >= 0) ? ("+" + score) : String(score);
            self.skScore.font = (score >= 0) ? "fkJSWin" : "fkJSLose";
            self.skWinner.visible = (data.rank == 1);
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skHeadFrame.source = "head@old" /* oldFrame */ + data.vip;
            self.skNickName.text = self.formatString(data.nickName);
        };
        JieSuanTile.prototype.formatString = function (str) {
            if (str.length > 5) {
                return str.substr(0, 5) + "...";
            }
            else {
                return str;
            }
        };
        return JieSuanTile;
    }(cui.DataItem));
    game.JieSuanTile = JieSuanTile;
    __reflect(JieSuanTile.prototype, "game.JieSuanTile");
    var JieSuanSmallTile = (function (_super) {
        __extends(JieSuanSmallTile, _super);
        function JieSuanSmallTile(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "jieSuanInfoSmallSkin";
            self._data = data;
            return _this;
        }
        JieSuanSmallTile.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            var score = data.plyScore;
            self.skBg.source = "fkEnd@back1";
            self.skOwner.visible = data.isOwner;
            self.skScore.text = (score >= 0) ? ("+" + score) : String(score);
            self.skScore.font = (score >= 0) ? "fkJSWin" : "fkJSLose";
            self.skWinner.visible = (data.rank == 1);
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skHeadFrame.source = "head@old" /* oldFrame */ + data.vip;
            self.skNickName.text = self.formatString(data.nickName);
        };
        JieSuanSmallTile.prototype.formatString = function (str) {
            if (str.length > 4) {
                return str.substr(0, 4) + "...";
            }
            else {
                return str;
            }
        };
        return JieSuanSmallTile;
    }(cui.DataItem));
    game.JieSuanSmallTile = JieSuanSmallTile;
    __reflect(JieSuanSmallTile.prototype, "game.JieSuanSmallTile");
})(game || (game = {}));
var game;
(function (game) {
    var joinTable = (function (_super) {
        __extends(joinTable, _super);
        function joinTable(plyCount, roomId, ownerId, type) {
            if (type === void 0) { type = 1; }
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.skinName = "gameJoinView";
            self._plyCount = plyCount;
            self.touchThrough = true;
            self._ownerId = ownerId;
            var tempId;
            if (type == 1) {
                if (roomId > 999 && roomId < 10000) {
                    tempId = "0" + roomId;
                }
                else if (roomId > 99 && roomId < 1000) {
                    tempId = "00" + roomId;
                }
                else if (roomId > 9 && roomId < 100) {
                    tempId = "000" + roomId;
                }
                else if (roomId < 10) {
                    tempId = "0000" + roomId;
                }
                else {
                    tempId = roomId;
                }
            }
            else if (type == 2) {
                tempId = String(roomId).slice(-3);
            }
            self.skRoomid.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 907 /* rRoomNum */), tempId);
            if (self.skConfGrp)
                self._tag = self.skConfGrp.tag;
            self.AllPos();
            return _this;
        }
        joinTable.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            this._data = [];
        };
        joinTable.prototype.AllPos = function () {
            var self = this;
            var count = self._plyCount;
            if (count == 2) {
                self._posArr = (self._tag == 0) ? [191, 394] : ((self._tag == 1) ? [196, 345] : [162, 340]);
            }
            else if (count == 3) {
                self._posArr = (self._tag == 0) ? [133, 295, 456] : ((self._tag == 1) ? [132, 283, 427] : [105, 259, 409]);
            }
            else if (count == 4) {
                self._posArr = (self._tag == 0) ? [75, 221, 367, 513] : ((self._tag == 1) ? [84, 214, 344, 474] : [68, 197, 325, 454]);
            }
            else if (count == 5) {
                self._posArr = (self._tag == 0) ? [43, 169, 294, 420, 545] : ((self._tag == 1) ? [49, 166, 283, 400, 517] : [48, 156, 263, 374, 482]);
            }
            else if (count == 6) {
                self._posArr = (self._tag == 0) ? [16, 127, 238, 348, 459, 570] : ((self._tag == 1) ? [25, 126, 227, 328, 428, 529] : [9, 109, 209, 312, 412, 512]);
            }
        };
        joinTable.prototype.setData = function (data) {
            var self = this;
            self._data = data;
            self.updateView();
        };
        joinTable.prototype.updateData = function (data) {
            var self = this;
            for (var i = 0; i < self._data.length; i++) {
                var temp = self._data[i];
                var temp1 = data[i];
                if (temp && temp1) {
                    if (temp.plyId == temp1.plyId) {
                        self._data[i] = data[i];
                    }
                }
            }
            self.updateView();
        };
        joinTable.prototype.updateView = function () {
            var self = this;
            var list = self.skJoinGrp;
            list.removeChildren();
            var offX = (self._tag == 0) ? 10 : ((self._tag == 1) ? 5 : 0);
            for (var i = 0; i < self._plyCount; i++) {
                var tempDta = self._data[i];
                var show = tempDta ? true : false;
                var showData = {
                    nickName: tempDta ? tempDta.nickName : "",
                    head: tempDta ? tempDta.head : "",
                    vip: tempDta ? tempDta.vip : 0,
                    isReady: tempDta ? tempDta.isReady : false,
                    isOwner: tempDta ? tempDta.isOwner : false,
                    ownerId: tempDta ? tempDta.ownerId : -1,
                    plyId: tempDta ? tempDta.playerId : -1,
                    seat: tempDta ? tempDta.seat : -1,
                    isShow: show,
                };
                var tempTile = new JoinTile(showData);
                tempTile.x = self._posArr[i];
                if (self["skKick" + i]) {
                    self["skKick" + i].visible = true;
                    self["skKick" + i].x = self.skJoinGrp.x + self._posArr[i] + offX;
                }
                list.addChild(tempTile);
            }
        };
        joinTable.prototype.reSet = function () {
            var self = this;
            self._data = [];
            self.skJoinGrp.removeChildren();
        };
        return joinTable;
    }(cui.Component));
    game.joinTable = joinTable;
    __reflect(joinTable.prototype, "game.joinTable");
    var JoinTile = (function (_super) {
        __extends(JoinTile, _super);
        function JoinTile(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "joinInfoSkin";
            self._data = data;
            return _this;
        }
        JoinTile.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skJoinGrp.visible = false;
            if (data.isShow) {
                self.skJoinGrp.visible = true;
                self.skReady.visible = data.isReady;
                // self.skKick.visible = 
                self.skOwner.visible = data.isOwner;
                // if (data.seat == 0) self.skKick.visible = false;
                self.skHead.source = game.DataFormat.getHeadIcon(data.head);
                self.skHeadFrame.source = "head@old" /* oldFrame */ + data.vip;
                self.skNickName.text = game.DataFormat.formatName(data.nickName, 8);
            }
        };
        return JoinTile;
    }(cui.DataItem));
    game.JoinTile = JoinTile;
    __reflect(JoinTile.prototype, "game.JoinTile");
})(game || (game = {}));
var game;
(function (game) {
    var GameLoadView = (function (_super) {
        __extends(GameLoadView, _super);
        function GameLoadView() {
            var _this = _super.call(this) || this;
            var self = _this;
            // self.slowSpeed = 0.0005;
            // self.fastSpeed = 0.1;
            // self._showPer = 0;
            self._nextPer = 0;
            // self._curPer = 0;
            //self._speed = 0.005;
            // self._delayTm = 0;
            self._time = 0;
            self._tmSpeed = 0;
            self.skinName = "loadingSkin";
            var loginNm = CONF.res["login" /* login */];
            self.skAniLogin.dbNm = self.skImgLogin.source = loginNm || "nover_login_bg";
            game.dataMgr.gameMo.addListener("st_per" /* start_load_per */, self.setLoadStep, self);
            self.skBack.setTarget(function () {
                game.MsgBox.showBoxCB("mainLang" /* mainLang */, 812 /* giveUpLoad */, function (tag) {
                    if (tag == 1) {
                        game.gameScene.endGame();
                    }
                }, self);
            }, self);
            return _this;
        }
        GameLoadView.getInst = function () {
            if (!GameLoadView._inst) {
                GameLoadView._inst = new GameLoadView();
            }
            return GameLoadView._inst;
        };
        GameLoadView.prototype.onPartAdded = function () {
            var self = this;
            self.skBar.labelFunction = self.pbLabelFun.bind(self);
        };
        GameLoadView.prototype.getCloseAni = function () {
            return null;
        };
        GameLoadView.prototype.getOpenAni = function () {
            return null;
        };
        GameLoadView.prototype.onShow = function () {
            var self = this;
            TRain.core.addFrameDo(self.update, self, false, 100);
        };
        GameLoadView.prototype.initLoad = function () {
            var self = this;
            // self._showPer = 0;
            self._nextPer = 0;
            // self._curPer = 0;
            self.skBar.value = 0;
            self.skBack.visible = false;
            self._tmSpeed = 1;
            self._time = 0;
            // self._delayTm = 0;
            //self._isOpenBack = false;
        };
        GameLoadView.prototype.onHide = function () {
            this.stopUpdate();
        };
        GameLoadView.prototype.stopUpdate = function () {
            var self = this;
            TRain.core.rmvFrameDo(self, self.update);
            //TRain.core.rmvDelayDoByID(self._delayTm);
        };
        GameLoadView.prototype.pbLabelFun = function (val) {
            var self = this;
            var num = Math.floor(val * 1000) / 10;
            //获取当前第几套皮
            var lab = 687 /* loadingLab */;
            if (game.dataMgr.accMo.isApi) {
                var resAll = CONF.res["all"];
                if (resAll && parseInt(resAll) == 2) {
                    lab = 974 /* apiLogin */;
                }
            }
            self.skBarLab.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, lab), num);
            self.skLoadB.x = val * self.skLoadB.parent.width - (self.skLoadB.width * 0.5);
            return "";
        };
        // protected onDispose():void
        // {
        //     let self = this;
        //     TRain.core.rmvFrameDo( self, self.update );
        //     dataMgr.gameMo.rmvListener(GameMo_EVT.start_load_per,self);
        //     super.onDispose();
        // }
        /**
         * totalper 为占100 的百分比 tm 预计时间 毫秒
         * */
        GameLoadView.prototype.setLoadStep = function (totalper) {
            var self = this;
            var nextPer = self._nextPer;
            if (nextPer >= 100)
                return;
            nextPer += totalper;
            if (nextPer >= 100)
                nextPer = 100;
            // self._curPer = self._nextPer;
            self._nextPer = nextPer;
            //self._speed =  totalper/tm;
        };
        // public isFinish():boolean
        // {
        //     return this._showPer >= 100;
        // }
        GameLoadView.prototype.update = function (tm) {
            var self = this;
            self._time += (tm * self._tmSpeed);
            var per = (self._time / 1000);
            if (self._nextPer == 100) {
                self._tmSpeed = 100;
                if (per >= 100) {
                    per = 100;
                    self.skBar.value = per / 100;
                    game.gameScene.hideGameLoad();
                    return;
                }
            }
            else {
                if (per >= 100) {
                    per = 99.9;
                }
                else {
                    if (per > 95) {
                        self._tmSpeed = 0.0185;
                    }
                    else if (per > 90) {
                        self._tmSpeed = 0.0375;
                    }
                    else if (per > 80) {
                        self._tmSpeed = 0.075;
                    }
                    else if (per > 65) {
                        self._tmSpeed = 0.125;
                    }
                    else if (per > 45) {
                        self._tmSpeed = 0.25;
                    }
                    else {
                        self._tmSpeed = 0.5;
                    }
                }
                if (per > 45) {
                    self.skBack.visible = true;
                }
            }
            self.skBar.value = per / 100;
            // let showPer = self._showPer;
            // let nextPer = self._nextPer;
            // if( showPer >= 100)
            // {
            //     gameScene.hideGameLoad();
            //     return;
            // }
            // if(self._delayTm > 5000){
            //     self.skBack.visible = true;
            // }
            // let newPer = showPer;
            // if(nextPer == 100){
            //     newPer += self.fastSpeed * tm;
            // }else{
            //     newPer += self.slowSpeed * tm;
            //     self._delayTm += tm;
            // }
            // if( showPer < self._curPer )
            // {
            // }else{
            // }
            // else if( showPer < nextPer )
            // {
            //     newPer += self._speed * tm;
            // }
            // else if( nextPer < 100 )
            // {
            //     // if(!self._isOpenBack){
            //     //     self._isOpenBack = true;
            //     //     self._delayTm = TRain.core.addDelayDo(function(){
            //     //         self.skBack.visible = true;
            //     //     },self,5000);
            //     // }
            // } 
            // if( newPer>=100 && nextPer<100 ){
            //     newPer = 100-0.1;
            // }
            // self._showPer = newPer;
            // if( Math.floor(newPer) != Math.floor(showPer) )
            // {
            // self.skBar.value = newPer/100; 
            // }
        };
        return GameLoadView;
    }(game.UIFullFW));
    game.GameLoadView = GameLoadView;
    __reflect(GameLoadView.prototype, "game.GameLoadView");
})(game || (game = {}));
var game;
(function (game) {
    var LoadingScene = (function (_super) {
        __extends(LoadingScene, _super);
        function LoadingScene() {
            var _this = _super.call(this) || this;
            var self = _this;
            var view = self._view = new game.LoadingView();
            self.addChild(view);
            return _this;
        }
        LoadingScene.getInst = function () {
            if (!LoadingScene._inst) {
                LoadingScene._inst = new LoadingScene();
            }
            return LoadingScene._inst;
        };
        LoadingScene.prototype.$onAddToStage = function (stage, nestLevel) {
            _super.prototype.$onAddToStage.call(this, stage, nestLevel);
            URLUtil.hideLoad();
            game.dataMgr.accMo.CheckNoticeInfo();
            var self = this;
            if (!self._initLayer) {
                self._initLayer = true;
                var layer = new cui.Group();
                layer.hitCheckBound = false;
                layer.perWidth = 100;
                layer.perHeight = 100;
                layer.tag = 1;
                game.BoxMgr.setParent(layer, self);
                layer = new cui.Group();
                layer.touchEnabled = false;
                layer.perWidth = 100;
                layer.perHeight = 100;
                layer.tag = 1;
                game.TipsMgr.setParent(layer, self);
                game.notifiCenter.addListener("fail" /* CONN_FAIL */, function (param) {
                    if (param == 79 /* e_rmt_player_prohibit */) {
                        game.MsgBox.showBoxCB("mainLang" /* mainLang */, 838 /* playerProhibit */, function () {
                            game.GameUtil.gameReload(true); //直接默认登出操作
                        }, self);
                    }
                    else if (param == 120 /* e_rmt_player_kick */) {
                        game.MsgBox.showBoxCB("mainLang" /* mainLang */, 835 /* kickingOff */, function () {
                            game.GameUtil.gameReload(true); //直接默认登出操作
                        }, self);
                    }
                    else {
                        game.MsgBox.showBoxCB("mainLang" /* mainLang */, 758 /* loginInfoOver */, function () {
                            game.GameUtil.gameReload();
                        }, self);
                    }
                }, self);
            }
        };
        LoadingScene.prototype.dispose = function () {
            LoadingScene._inst = null;
            game.BoxMgr.setParent(null, null);
            game.TipsMgr.setParent(null, null);
            _super.prototype.dispose.call(this);
        };
        LoadingScene.prototype.setLoadStep = function (msg, totalper, tm) {
            this._view.setLoadStep(msg, totalper, tm);
        };
        LoadingScene.prototype.isFinish = function () {
            return this._view.isFinish();
        };
        LoadingScene.prototype.showLayer = function (layer) {
            this.addChild(layer);
        };
        LoadingScene.prototype.hideLayer = function (layer) {
            if (layer.parent)
                this.removeChild(layer);
        };
        return LoadingScene;
    }(game.BaseScene));
    game.LoadingScene = LoadingScene;
    __reflect(LoadingScene.prototype, "game.LoadingScene", ["game.LayerDelegate"]);
})(game || (game = {}));
var game;
(function (game) {
    var LoadingView = (function (_super) {
        __extends(LoadingView, _super);
        // public skHead:cui.Group;
        // public skPer:cui.Label;
        function LoadingView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.slowSpeed = 0.0005;
            self.fastSpeed = 0.04;
            self._showPer = 0;
            self._nextPer = 0;
            self._curPer = 0;
            self.skinName = "loadingSkin";
            var loginNm = CONF.res["login" /* login */];
            self.skAniLogin.dbNm = self.skImgLogin.source = loginNm || "nover_login_bg";
            return _this;
        }
        LoadingView.prototype.onPartAdded = function () {
            var self = this;
            self.skBar.labelFunction = self.pbLabelFun.bind(self);
            URLUtil.moloadErr();
            //self.skBarLab.text = TRain.langMgr.getTxt("loginUI", "tip_" + Math.floor(Math.random()*13)+1);
            //self._stX = self.skHead.x;
        };
        LoadingView.prototype.getCloseAni = function () {
            return null;
        };
        LoadingView.prototype.getOpenAni = function () {
            return null;
        };
        LoadingView.prototype.onShow = function () {
            var self = this;
            self._delayTm = TRain.core.addDelayDo(function () {
                TRain.core.addFrameDo(self.update, self);
            }, self, 300);
            // let loopAct = self._loopAct;
            // if( !loopAct ){
            //     let action = new TRain.ActionPropTween( 1000, 1, {rotation:{b:0,r:357}} );
            //     loopAct = self._loopAct = new TRain.ActionLoop(action);
            // } 
            // TRain.actionMgr.addAction( loopAct, self.skBall, false );
        };
        LoadingView.prototype.onHide = function () {
            var self = this;
            TRain.core.rmvFrameDo(self, self.update);
            if (self._delayTm) {
                TRain.core.rmvDelayDoByID(self._delayTm);
                self._delayTm = 0;
            }
            //TRain.actionMgr.rmvAction( self._loopAct );
        };
        LoadingView.prototype.pbLabelFun = function (val) {
            var self = this;
            //self.skHead.x = self._stX + Math.floor(self.skProBar.width * val);
            //获取当前第几套皮
            var resAll = CONF.res["all"];
            var lab = 687 /* loadingLab */;
            if (resAll && parseInt(resAll) == 2) {
                lab = 974 /* apiLogin */;
            }
            self.skBarLab.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, lab), Math.floor(val * 100));
            self.skLoadB.x = val * self.skLoadB.parent.width - (self.skLoadB.width * 0.5);
            return "";
        };
        LoadingView.prototype.onDispose = function () {
            var self = this;
            TRain.core.rmvFrameDo(self, self.update);
            if (self._delayTm) {
                TRain.core.rmvDelayDoByID(self._delayTm);
                self._delayTm = 0;
            }
            _super.prototype.onDispose.call(this);
        };
        /**
         * totalper 为占100 的百分比 tm 预计时间 毫秒
         * */
        LoadingView.prototype.setLoadStep = function (msg, totalper, tm) {
            var self = this;
            var nextPer = self._nextPer;
            if (nextPer >= 100)
                return;
            nextPer += totalper;
            if (nextPer >= 100)
                nextPer = 100;
            self._curPer = self._nextPer;
            self._nextPer = nextPer;
            //console.log( "nextPer=" + nextPer );
            self._speed = tm > 0 ? totalper / tm : 0.01;
            // if( self._showPer < self._curPer )
            // {
            //     self._nextMsg = msg;
            // }
            // else
            // {
            //     self._msg = msg;
            // }
        };
        LoadingView.prototype.isFinish = function () {
            return this._showPer >= 100;
            //return true;
        };
        LoadingView.prototype.update = function (tm) {
            var self = this;
            var showPer = self._showPer;
            if (showPer >= 100) {
                TRain.core.rmvFrameDo(self, self.update);
                return;
            }
            var nextPer = self._nextPer;
            var newPer = showPer;
            if (showPer < self._curPer) {
                newPer += self.fastSpeed * tm;
            }
            else if (showPer < nextPer) {
                newPer += self._speed * tm;
            }
            else if (nextPer < 100) {
                newPer += self.slowSpeed * tm;
            }
            if (newPer >= nextPer && nextPer < 100) {
                newPer = nextPer - 0.1;
            }
            //console.log( "newPer=" + newPer );
            self._showPer = newPer;
            if (Math.floor(newPer) != Math.floor(showPer)) {
                // let msg = self._nextMsg;
                // if( msg && showPer>=self._curPer )
                // {
                //     self._msg = msg;
                //     self._nextMsg = null;
                // }
                // else
                // {
                //     msg = self._msg;
                // }
                //if(!msg) msg = "";
                self.skBar.value = newPer / 100;
            }
        };
        return LoadingView;
    }(game.UIFullFW));
    game.LoadingView = LoadingView;
    __reflect(LoadingView.prototype, "game.LoadingView");
})(game || (game = {}));
var game;
(function (game) {
    var logIdView = (function (_super) {
        __extends(logIdView, _super);
        function logIdView() {
            return _super.call(this) || this;
        }
        logIdView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            generalMo.addListener("Detail_Id_Back" /* Detail_Id_Back */, self.setData, self);
        };
        /**
         *
         * @param isAddBet 是否是下注 下注则显示牌局id 否则就是 牌局ID： -下注后生成-
         */
        logIdView.prototype.setData = function (isAddBet) {
            var self = this;
            if (isAddBet) {
                self.skLogId.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 1027 /* gameLogID */), game.dataMgr.generalMo.getDeatilId());
            }
            else {
                self.skLogId.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 1032 /* gameLogNoID */);
            }
        };
        /**
         *
         * @param logId 显示牌局id
         */
        logIdView.prototype.showLogId = function (logId) {
            var self = this;
            self.skLogId.visible = !!logId;
            self.skLogId.text = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 1027 /* gameLogID */), logId);
            ;
            if (self.skIdBack) {
                self.skIdBack.visible = !!logId;
            }
        };
        logIdView.prototype.dispose = function () {
            var self = this;
            game.dataMgr.generalMo.rmvListener("Detail_Id_Back" /* Detail_Id_Back */, self);
            _super.prototype.dispose.call(this);
        };
        return logIdView;
    }(cui.Component));
    game.logIdView = logIdView;
    __reflect(logIdView.prototype, "game.logIdView");
})(game || (game = {}));
var game;
(function (game) {
    var ForgotPwd = (function (_super) {
        __extends(ForgotPwd, _super);
        function ForgotPwd() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "forgotPwdSkin";
            //self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        ForgotPwd.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skGetCode.setTarget(self.getCode, self);
            self.skSure.setTarget(self.enSure, self);
            self.skPhone.addEventListener(egret.Event.CHANGE, self.OnChangePhone, self);
            self.skCode.addEventListener(egret.Event.CHANGE, self.OnChangeCode, self);
            self.skPwd.addEventListener(egret.Event.CHANGE, self.OnChangePwd, self);
            self.skAgainPwd.addEventListener(egret.Event.CHANGE, self.OnChangeAgainPwd, self);
            self.skClose.setTarget(self.close, self);
            self.skPhone.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 405 /* Register_PhoneNum */);
            self.skCode.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 406 /* Register_GetCode */);
            self.skPwd.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 693 /* EnterChar6To20 */);
            self.skPwd.inputType = egret.TextFieldInputType.PASSWORD;
            self.skPwd.displayAsPassword = true;
            self.skAgainPwd.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 693 /* EnterChar6To20 */);
            self.skAgainPwd.inputType = egret.TextFieldInputType.PASSWORD;
            self.skAgainPwd.displayAsPassword = true;
            self.skLCode.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 695 /* VerCode */);
            self.skLPhone.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 694 /* PhoneNum */);
            self.skLPwd.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 696 /* InputPwd */);
            self.skLAgainPwd.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 697 /* ConfirmPwd */);
            game.dataMgr.accMo.addListener("resetPwd_fin" /* reset_pwd_fin */, function () {
                self.close();
                game.MsgBox.showTipBox(true, 10015 /* reset_pwd_succ */);
            }, self);
        };
        ForgotPwd.prototype.OnChangePhone = function (e) {
            this.skPhone.text = e.target.text;
        };
        ForgotPwd.prototype.OnChangeCode = function (e) {
            this.skCode.text = e.target.text;
        };
        ForgotPwd.prototype.OnChangePwd = function (e) {
            this.skPwd.text = e.target.text;
        };
        ForgotPwd.prototype.OnChangeAgainPwd = function (e) {
            this.skAgainPwd.text = e.target.text;
        };
        ForgotPwd.prototype.getCode = function () {
            var self = this;
            //首先判断手机号位数是否正确再发送
            var phone = self.skPhone.text;
            var data = game.dataMgr.accMo.getData();
            var playId = data ? String(data.aid) : "";
            if (phone == null || phone == "" || phone.length != 11 || phone.match(/\D/g)) {
                game.MsgBox.showTipBox(true, 10003 /* e_rmt_input_correct_num */);
                return;
            }
            else {
                game.dataMgr.accMo.checkCode(phone, 2 /* resetPwd */, playId);
            }
        };
        ForgotPwd.prototype.enSure = function () {
            var self = this;
            var phone = self.skPhone.text;
            var code = self.skCode.text;
            var pwd = self.skPwd.text;
            var againPwd = self.skAgainPwd.text;
            if (phone == null || phone == "" || phone.length != 11 || phone.match(/\D/g)) {
                game.MsgBox.showTipBox(true, 10003 /* e_rmt_input_correct_num */);
                return;
            }
            if (code == null || code == "" || code.length != 6 || code.match(/\D/g)) {
                game.MsgBox.showTipBox(true, 10004 /* e_rmt_input_correct_code */);
                return;
            }
            if (pwd.length < 6 || againPwd.length < 6) {
                game.MsgBox.showTipBox(true, 10009 /* e_rmt_pwd_not_less_6 */); //密码不能少于6个字符。
                return;
            }
            if (pwd != againPwd) {
                game.MsgBox.showTipBox(true, 24 /* e_rmt_pwd_not_same */);
                return;
            }
            URLUtil.checkDeviceID(function () {
                game.dataMgr.accMo.resetPassward(phone, pwd, code);
            });
        };
        ForgotPwd.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.accMo.rmvAllListener(self);
            _super.prototype.onDispose.call(this);
        };
        return ForgotPwd;
    }(game.UIPopup));
    game.ForgotPwd = ForgotPwd;
    __reflect(ForgotPwd.prototype, "game.ForgotPwd");
})(game || (game = {}));
var game;
(function (game) {
    var LoginAccount = (function (_super) {
        __extends(LoginAccount, _super);
        function LoginAccount() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "loginViewSkin";
            self._isMoreAcc = false;
            self._isRemember = true;
            self._accDatas = game.dataMgr.accMo.getAccInfos();
            return _this;
        }
        LoginAccount.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skLogin.setTarget(self.tapLogin, self);
            self.skRegistered.setTarget(self.registeredView, self);
            self.skVtrLogin.setTarget(self.tapLogin, self);
            self.skWXLogin.setTarget(self.tapLogin, self);
            self.skPwdLab.inputType = egret.TextFieldInputType.PASSWORD;
            self.skPwdLab.displayAsPassword = self._isLockPwd = true;
            self.skKeFu.setTarget(game.HttpUtil.gotoKeFu, game.HttpUtil);
            self.skLookPwd.setTarget(self.lookPwd, self);
            self.skForgotPwd.setTarget(self.openForgotView, self);
            self.skRemember.setTarget(function () {
                var isRemember = self._isRemember;
                self.skRemember.icon = !isRemember ? "login@remember" : "login@noRemeber";
                self._isRemember = !isRemember;
            }, self);
            self.skShowId.setTarget(function () {
                self.updateMoreBtn();
                self.updateMoreAcc();
            }, self);
            // if(!dataMgr.accMo.isAuto){
            //      self.skAccountLab.text = GameUtil.getLocal(GameUtil.LocalKey.ACC_NAME);
            // }
            self.skAccountLab.addEventListener(egret.Event.CHANGE, self.OnAccount, self);
            self.skAccountLab.addEventListener(egret.Event.FOCUS_IN, self.onFocus1, self);
            self.skPwdLab.addEventListener(egret.Event.CHANGE, self.OnPwd, self);
            self.skPwdLab.addEventListener(egret.Event.FOCUS_IN, self.onFocus2, self);
            self.skAccountLab.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 692 /* Enter_AccountNum */);
            self.skPwdLab.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 180 /* Enter_pwd */);
            var accMo = game.dataMgr.accMo;
            accMo.addListener("login_fin" /* login_fin */, function () {
                game.gameMgr.gotoScene(1 /* LodingScene */);
            }, self, true);
            accMo.addListener("check_fin" /* check_svr_info */, function () {
                if (accMo.haveLoginNotice()) {
                    var view = new game.NoticeView(0 /* login */);
                    view.open(self);
                }
            }, self, true);
            game.notifiCenter.addListener("loginfin" /* CONN_LOGINFAIL */, function (param) {
                game.MsgBox.showTipBox(true, param, null, null, null, true);
                self.enabled = true;
            }, self);
            game.notifiCenter.addListener("chat_close" /* CHAT_CLOSE */, function () {
                self.enabled = true;
            }, self);
            var loginNm = CONF.res["login" /* login */];
            self.skAniLogin.dbNm = self.skImgLogin.source = loginNm || "nover_login_bg";
            self.skGameVer.text = CONF.gameVer;
            self.skAppVer.text = String(CONF.appVer);
            self.skAppVer.visible = CONF.appVer != 0;
            game.notifiCenter.addListener("close" /* CONN_CLOSE */, function () {
                game.MsgBox.showTipBox(true, 10012 /* svrConnectErr */);
                self.enabled = true;
            }, self);
            game.notifiCenter.addListener("fail" /* CONN_FAIL */, function () {
                game.MsgBox.showTipBox(true, 10012 /* svrConnectErr */);
                self.enabled = true;
            }, self);
            for (var i = 0; i < 5; i++) {
                self['skBtn' + i].setTarget(self.btnClick, self);
            }
            var isOpenWx = !!CONF.appid;
            self.skWXLogin.visible = isOpenWx;
            var width = self.skLogin.width;
            var grp;
            if (isOpenWx) {
                self.skLogin.x = 0;
                grp = 50;
            }
            else {
                self.skLogin.x = 50;
                grp = 100;
            }
            self.skRegistered.x = self.skLogin.x + width + grp;
            self.skVtrLogin.x = self.skRegistered.x + width + grp;
            self.skWXLogin.x = self.skVtrLogin.x + width + grp;
        };
        LoginAccount.prototype.btnClick = function (item) {
            var self = this;
            var tag = item.tag;
            var accData = self._accDatas;
            var selAccData = accData[tag];
            if (selAccData) {
                self.skAccountLab.text = selAccData.nm;
                var accPwd = game.dataMgr.accMo.getPwdByPhone(selAccData.nm);
                self.skPwdLab.text = accPwd;
                self._isRemember = !!accPwd;
                self.skRemember.icon = !!accPwd ? "login@remember" : "login@noRemeber";
                self.skPwdLab.displayAsPassword = self._isLockPwd;
                self.updateMoreBtn();
                self.updateMoreAcc();
            }
        };
        LoginAccount.prototype.updateMoreBtn = function () {
            var self = this;
            var isMoreAcc = self._isMoreAcc;
            self.skShowId.icon = !isMoreAcc ? "login@hideId" : "login@showId";
            self._isMoreAcc = !isMoreAcc;
        };
        LoginAccount.prototype.updateMoreAcc = function () {
            var self = this;
            var isMoreAcc = self._isMoreAcc;
            self.skIDGroup.visible = isMoreAcc;
            if (isMoreAcc) {
                var accArrs = self._accDatas;
                for (var i = 0; i < accArrs.length; i++) {
                    var acc = accArrs[i];
                    if (acc) {
                        self['skID' + i].text = acc.nm;
                    }
                }
            }
        };
        LoginAccount.prototype.onFocus1 = function (e) {
            this.skAccountLab.text = "";
        };
        LoginAccount.prototype.onFocus2 = function (e) {
            this.skPwdLab.text = "";
        };
        LoginAccount.prototype.OnAccount = function (e) {
            this.skAccountLab.text = e.target.text;
        };
        LoginAccount.prototype.OnPwd = function (e) {
            this.skPwdLab.text = e.target.text;
        };
        LoginAccount.prototype.getOpenAni = function () {
            return null;
        };
        LoginAccount.prototype.getCloseAni = function () {
            return null;
        };
        // private keFuBtn():void{
        // }
        LoginAccount.prototype.registeredView = function () {
            TRain.soundMgr.playSFX("click" /* click */);
            var self = this;
            var view = new game.Registered();
            view.open(self);
        };
        LoginAccount.prototype.lookPwd = function () {
            var self = this;
            var tmpPwd = self._isLockPwd;
            self.skPwdLab.displayAsPassword = !tmpPwd;
            //self.skPwdLab.inputType = !tmpPwd ?  egret.TextFieldInputType.PASSWORD : egret.TextFieldInputType.TEXT ;
            self.skLookPwd.icon = !self._isLockPwd ? "login@lookPwdb" : "login@lookPwdD";
            self._isLockPwd = !tmpPwd;
        };
        LoginAccount.prototype.openForgotView = function () {
            var self = this;
            var view = new game.ForgotPwd();
            view.open(self);
        };
        LoginAccount.prototype.tapLogin = function (item) {
            TRain.soundMgr.playSFX("click" /* click */);
            var self = this;
            var tag = item.tag;
            var name;
            var pwd;
            var accMo = game.dataMgr.accMo;
            if (tag == 1 /* visitor */ || tag == 2 /* wx */) {
                name = null;
                pwd = null;
            }
            else {
                name = self.skAccountLab.text;
                pwd = self.skPwdLab.text;
                if (name != null && (name.length != 11 || name.match(/\D/g))) {
                    game.MsgBox.showTipBox(true, 10001 /* e_rmt_gold_accountnum_or_pwd_error */);
                    return;
                }
            }
            URLUtil.checkDeviceID(function () {
                if (tag == 1 /* visitor */) {
                    accMo.verlogin(name, pwd);
                }
                else if (tag == 0 /* normal */) {
                    accMo.login(name, pwd, self._isRemember);
                }
                else {
                    // 是否有缓存 微信id 
                    var wxAccInfo = game.GameUtil.getLocal("ACC_Pwd" /* ACC_Pwd */);
                    // let wxData = GameUtil.binaryToStr(wxAccInfo);
                    if (!wxAccInfo) {
                        game.GameUtil.setLocal("RELOAD" /* ISRELOAD */, false);
                        URLUtil.openWx(URLUtil.getWXCallUrl());
                    }
                    else {
                        accMo.wxLogin();
                    }
                }
                self.enabled = false;
            });
            // if(!pwd || pwd.length<=0){
            //     MsgBox.showBox( LangGrp.loginUI, langConsts.loginUI.inputname );//请输入角色密码
            // 	return;
            // }
            // if( name.indexOf(" ")>=0 ||
            // 	name.indexOf("\n")>=0 || 
            // 	name.indexOf("\\n")>=0 || 
            // 	name.indexOf("\r")>=0 || 
            // 	name.indexOf("\\r")>=0 || 
            // 	name.indexOf("\"" )>=0 ){
            // 		MsgBox.showBox( LangGrp.loginUI, langConsts.loginUI.invalidchar );
            // 		return;
            // }
        };
        LoginAccount.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.accMo.rmvAllListener(self);
            game.notifiCenter.rmvAllListener(self);
            _super.prototype.onDispose.call(this);
        };
        return LoginAccount;
    }(game.UIFullFW));
    game.LoginAccount = LoginAccount;
    __reflect(LoginAccount.prototype, "game.LoginAccount");
})(game || (game = {}));
var game;
(function (game) {
    var LoginScene = (function (_super) {
        __extends(LoginScene, _super);
        function LoginScene() {
            var _this = _super.call(this) || this;
            var self = _this;
            //启动平台管理
            // notifiCenter.addListener( AccountMgr_EVT.startup, self.onPlatStartup, self, true );
            // AccountMgr.startup();
            self.startLogin();
            return _this;
        }
        LoginScene.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            // let loginBg = new cui.Image();
            // loginBg.source = "newbg";
            // self.addChild(loginBg);
            game.BusyLayer.getInst().setParent(self);
            game.HttpUtil.busyUI = game.BusyLayer.getInst();
            var layer = new cui.Group();
            layer.hitCheckBound = false;
            layer.perWidth = 100;
            layer.perHeight = 100;
            layer.tag = 1;
            game.BoxMgr.setParent(layer, self);
            layer = new cui.Group();
            layer.touchEnabled = false;
            layer.perWidth = 100;
            layer.perHeight = 100;
            layer.tag = 1;
            game.TipsMgr.setParent(layer, self);
            if (self._platStartup) {
                self.startLogin();
            }
        };
        //启动流程 出现界面---平台/内部登录---获取自己登录过服务器列表 ---（可选）选服界面时获取全部服务器列表
        LoginScene.prototype.startLogin = function () {
            var self = this;
            URLUtil.hideLoad();
            game.dataMgr.accMo.CheckNoticeInfo();
            self.showView(0 /* kLoginAccount */);
            // notifiCenter.addListener( UserMo_EVT.no_user, function(){
            //     self.showView( LoginNavType.kLoginCreate );
            // }, self, true );
            // let platMo = dataMgr.platMo;
            // platMo.addListener(PlatMo_EVT.got_my_entrys, self.onMySvrFin, self, true);
            // if(AccountMgr.inner)
            // {
            //     self.showView(LoginNavType.kLoginAccount);
            // }
            // else
            // {
            //     if(!AccountMgr.isLogined){
            //         AccountMgr.login();
            //     }
            //     else{
            //         if( !dataMgr.platMo.syncMyEntrys() ){
            //             self.onMySvrFin();
            //         }
            //     }
            // }
        };
        LoginScene.prototype.dispose = function () {
            var self = this;
            if (!self._inited || self.disposed) {
                return;
            }
            var curView = self._curView;
            if (curView) {
                curView.dispose();
            }
            game.BoxMgr.setParent(null, null);
            game.TipsMgr.setParent(null, null);
            game.BusyLayer.getInst().setParent(null);
            game.notifiCenter.rmvAllListener(self);
            _super.prototype.dispose.call(this);
        };
        //-----------------------------------------------------------------------------
        LoginScene.prototype.showView = function (page) {
            var self = this;
            var uiView;
            switch (page) {
                case 0 /* kLoginAccount */:
                    uiView = new game.LoginAccount();
                    break;
            }
            uiView.delegate = self;
            uiView.open(self, null, self.onNormalOpen, self);
        };
        LoginScene.prototype.onNormalOpen = function (uiView) {
            var self = this;
            var popView = self._curView;
            if (popView) {
                popView.dispose();
                self._curView = null;
            }
            self._curView = uiView;
        };
        LoginScene.prototype.showLayer = function (layer) {
            this.addChild(layer);
        };
        LoginScene.prototype.hideLayer = function (layer) {
            if (layer.parent)
                this.removeChild(layer);
        };
        return LoginScene;
    }(game.BaseScene));
    game.LoginScene = LoginScene;
    __reflect(LoginScene.prototype, "game.LoginScene", ["game.LoginDelegate", "game.LayerDelegate"]);
})(game || (game = {}));
var game;
(function (game) {
    var Registered = (function (_super) {
        __extends(Registered, _super);
        //private _dom:UIIFrame;
        function Registered() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "registeredSkin";
            self._isAgreed = true;
            //self.pri = PopupPriority.normal;
            //self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            self._isCanClick = true;
            return _this;
            //self._dom = new UIIFrame();
        }
        Registered.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skGetCode.setTarget(self.getCode, self);
            self.skSure.setTarget(function () {
                if (!self._isBind) {
                    self.enSure();
                }
                else {
                    if (self._isCanClick) {
                        self.enSure();
                    }
                    else {
                        game.MsgBox.showTipBox(false, 840 /* bindAwdLate */, "mainLang" /* mainLang */);
                    }
                }
            }, self);
            self.skPhone.addEventListener(egret.Event.CHANGE, self.OnChangePhone, self);
            self.skCode.addEventListener(egret.Event.CHANGE, self.OnChangeCode, self);
            self.skPwd.addEventListener(egret.Event.CHANGE, self.OnChangePwd, self);
            self.skAgainPwd.addEventListener(egret.Event.CHANGE, self.OnChangeAgainPwd, self);
            self.skchoose.setTarget(self.chooseBtn, self);
            self.skClose.setTarget(function () {
                if (!self._isBind) {
                    self.close();
                }
                else {
                    if (self._isCanClick) {
                        self.close();
                    }
                    else {
                        game.MsgBox.showTipBox(false, 840 /* bindAwdLate */, "mainLang" /* mainLang */);
                    }
                }
            }, self);
            self.skPhone.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 405 /* Register_PhoneNum */);
            self.skCode.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 406 /* Register_GetCode */);
            self.skPwd.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 693 /* EnterChar6To20 */);
            self.skPwd.inputType = egret.TextFieldInputType.PASSWORD;
            self.skPwd.displayAsPassword = true;
            self.skAgainPwd.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 693 /* EnterChar6To20 */);
            self.skAgainPwd.inputType = egret.TextFieldInputType.PASSWORD;
            self.skAgainPwd.displayAsPassword = true;
            self.skLCode.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 695 /* VerCode */);
            self.skLPhone.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 694 /* PhoneNum */);
            self.skLPwd.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 696 /* InputPwd */);
            self.skLAgainPwd.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 697 /* ConfirmPwd */);
            self.skLAgreeConsent.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 698 /* AgreeConsent */);
            var accMo = game.dataMgr.accMo;
            accMo.addListener("reg_fin" /* reg_phone_fin */, function () {
                self.close();
                // let tip = TRain.langMgr.getTxt(LangGrp.mainLang, langConsts.mainLang.Login_RegisterSuccess);
                // TipsMgr.showPrompt(tip);
            }, self);
            accMo.addListener("bin_fin" /* bin_phone_fin */, function () {
                // let view = new SaveMoneyDialog();
                // gameScene.openPopup(view);
                self._isCanClick = true;
                self.close();
            }, self);
            accMo.addListener("bind_fail" /* bind_fail_fin */, function () {
                self._isCanClick = true;
            }, self);
            self.skBindAct.visible = false;
            // self._dom.width = 605;
            // self._dom.height = 462;
            // self._dom.x = 45;
            // self._dom.y = 129;
            // self._dom.src = "https://www.dsteach.com/notice/";
            // self.addChild( self._dom );
        };
        Registered.prototype.getOpenAni = function () {
            return null;
        };
        Registered.prototype.getCloseAni = function () {
            return null;
        };
        Registered.prototype.setData = function (value) {
            var self = this;
            self._isBind = value;
            var bindAct = game.dataMgr.actMo.getData();
            if (value && bindAct) {
                var gold = bindAct.bindGold;
                self.skBindAct.visible = gold > 0;
                var formatGold = game.DataFormat.convertYuanString2(gold);
                self.skBindAct.getChildAt(1).text = formatGold;
            }
        };
        Registered.prototype.chooseBtn = function () {
            var self = this;
            self._isAgreed = !self._isAgreed;
            self.skchoose.icon = self._isAgreed ? "login@registeredB" : "login@registeredD";
        };
        Registered.prototype.OnChangePhone = function (e) {
            this.skPhone.text = e.target.text;
        };
        Registered.prototype.OnChangeCode = function (e) {
            this.skCode.text = e.target.text;
        };
        Registered.prototype.OnChangePwd = function (e) {
            this.skPwd.text = e.target.text;
        };
        Registered.prototype.OnChangeAgainPwd = function (e) {
            this.skAgainPwd.text = e.target.text;
        };
        Registered.prototype.getCode = function () {
            var self = this;
            var phone = self.skPhone.text;
            var data = game.dataMgr.accMo.getData();
            var playId = data ? String(data.aid) : "";
            if (phone == null || phone == "" || phone.length != 11 || phone.match(/\D/g)) {
                game.MsgBox.showTipBox(true, 10003 /* e_rmt_input_correct_num */);
                return;
            }
            else {
                game.dataMgr.accMo.checkCode(phone, 1 /* reg */, playId);
            }
        };
        Registered.prototype.enSure = function () {
            var self = this;
            //挨个验证前面四个是否满足条件且同意游戏协议
            var phone = self.skPhone.text;
            var code = self.skCode.text;
            var pwd = self.skPwd.text;
            var againPwd = self.skAgainPwd.text;
            if (phone == null || phone == "" || phone.length != 11 || phone.match(/\D/g)) {
                game.MsgBox.showTipBox(true, 10003 /* e_rmt_input_correct_num */);
                return;
            }
            if (code == null || code == "" || code.length != 6 || code.match(/\D/g)) {
                game.MsgBox.showTipBox(true, 10004 /* e_rmt_input_correct_code */);
                return;
            }
            if (pwd.length < 6 || againPwd.length < 6) {
                game.MsgBox.showTipBox(true, 10009 /* e_rmt_pwd_not_less_6 */); //密码不能少于6个字符。
                return;
            }
            if (pwd != againPwd) {
                game.MsgBox.showTipBox(true, 24 /* e_rmt_pwd_not_same */);
                return;
            }
            if (!self._isAgreed) {
                game.MsgBox.showTipBox(true, 10005 /* e_rmt_agree_consent */);
                return;
            }
            var accMo = game.dataMgr.accMo;
            if (self._isBind) {
                var accName_1 = game.GameUtil.getLocal("ACC_NAME" /* ACC_NAME */);
                URLUtil.checkDeviceID(function () {
                    accMo.bind(phone, pwd, accName_1, code);
                    self._isCanClick = false;
                });
            }
            else {
                URLUtil.checkDeviceID(function () {
                    accMo.registered(phone, pwd, code);
                });
            }
        };
        Registered.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.accMo.rmvAllListener(self);
            _super.prototype.onDispose.call(this);
        };
        return Registered;
    }(game.UIPopup));
    game.Registered = Registered;
    __reflect(Registered.prototype, "game.Registered");
})(game || (game = {}));
var game;
(function (game) {
    var RoomReplayOps = (function (_super) {
        __extends(RoomReplayOps, _super);
        function RoomReplayOps() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "replayOpsView";
            return _this;
        }
        RoomReplayOps.prototype.childrenCreated = function () {
            var self = this;
            _super.prototype.childrenCreated.call(this);
            game.gameMgr.beginScaleMode();
            self._fastCount = self._stopCount = 0;
            self.initTouch();
        };
        RoomReplayOps.prototype.initTouch = function () {
            var self = this;
            self.skFast.setTarget(function () {
                self._fastCount += 1;
                var speed = (self._fastCount % 2 == 1) ? 1 : 1.5;
                game.gameMgr.setTimeScale(speed);
            }, self);
            self.skStop.setTarget(function () {
                self._stopCount += 1;
                self.skStop.icon = (self._stopCount % 2 == 0) ? "roomMode@ztBtn" : "roomMode@bfBtn";
                var speed = (self._stopCount % 2 == 1) ? 0 : 1;
                game.gameMgr.setTimeScale(speed);
            }, self);
            self.skAgain.setTarget(function () {
                self.dispatchEventWith("AGAIN" /* AGAIN */, false);
            }, self);
            self.skGuanBi.setTarget(function () {
                self.dispatchEventWith("OUT" /* OUT */, false);
            }, self);
        };
        RoomReplayOps.prototype.dispose = function () {
            game.gameMgr.endScaleMode();
            _super.prototype.dispose.call(this);
        };
        return RoomReplayOps;
    }(cui.Component));
    game.RoomReplayOps = RoomReplayOps;
    __reflect(RoomReplayOps.prototype, "game.RoomReplayOps");
})(game || (game = {}));
var game;
(function (game) {
    var SafeBoxFindPwd = (function (_super) {
        __extends(SafeBoxFindPwd, _super);
        function SafeBoxFindPwd() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "depositBoxFindCodeSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        SafeBoxFindPwd.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            generalMo.addListener("resetPass" /* resetPass */, self.resetPassWord, self);
            self.skclose.setTarget(function () {
                generalMo.rmvListener("resetPass" /* resetPass */, self);
                self.close();
            }, self);
            self.skCodeIn.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 855 /* codeS */);
            self.skCodeSure.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 854 /* codeSure */);
            self.skCodeYan.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 866 /* yanzmengma */);
            self.skBoxCode.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 862 /* boxNumber */);
            self.skBoxCode.promptColor = 0x988293;
            self.skBoxCode.addEventListener(egret.Event.CHANGE, self.OnAccount, self);
            self.skBoxCode.addEventListener(egret.Event.FOCUS_IN, self.onFocus1, self);
            self.skSureCode.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 862 /* boxNumber */);
            self.skSureCode.promptColor = 0x988293;
            self.skSureCode.addEventListener(egret.Event.CHANGE, self.OnAccount1, self);
            self.skSureCode.addEventListener(egret.Event.FOCUS_IN, self.onFocus2, self);
            self.skTips.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 859 /* boxFindCode */);
            self.skBoxYanZheng.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 878 /* boxYanZheng */);
            self.skBoxYanZheng.promptColor = 0x988293;
            self.skBoxYanZheng.addEventListener(egret.Event.CHANGE, self.OnAccount2, self);
            self.skBoxYanZheng.addEventListener(egret.Event.FOCUS_IN, self.onFocus3, self);
            self.skFindCode.setTarget(function () {
                if (self.skBoxYanZheng.text.length > 0) {
                    if (self.skBoxYanZheng.text.length == 6) {
                        if (self.skBoxCode.text.length > 0 || self.skSureCode.text.length > 0) {
                            if (self.skBoxCode.text.length < 6 || self.skSureCode.text.length < 6 || self.skBoxCode.text.length > 20 || self.skSureCode.text.length > 20) {
                                game.MsgBox.showTipBox(true, 10009 /* e_rmt_pwd_not_less_6 */);
                            }
                            else {
                                if (self.skBoxCode.text != self.skSureCode.text) {
                                    game.MsgBox.showTipBox(false, 880 /* boxPassNtoSeam */, "mainLang" /* mainLang */);
                                }
                                else {
                                    var yanzheng = self.skBoxYanZheng.text;
                                    var boxCode = md5(self.skBoxCode.text);
                                    var sureCode = md5(self.skSureCode.text);
                                    generalMo.askFindSafeBoxCode(boxCode, sureCode, yanzheng);
                                }
                            }
                        }
                        else {
                            game.MsgBox.showTipBox(false, 14 /* Login_PwdIsEmpty */, "mainLang" /* mainLang */);
                        }
                    }
                    else {
                        game.MsgBox.showTipBox(false, 390 /* err_code_error */, "mainLang" /* mainLang */);
                    }
                }
                else {
                    game.MsgBox.showTipBox(false, 246 /* VerifyNull */, "mainLang" /* mainLang */);
                }
            }, self);
            self.skGetYan.setTarget(function () {
                generalMo.askSafeBoxCode();
            }, self);
        };
        SafeBoxFindPwd.prototype.resetPassWord = function () {
            var self = this;
            if (!game.dataMgr.generalMo.getIsFind()) {
                game.dataMgr.generalMo.setIsFind(true);
                self.close();
                game.dataMgr.generalMo.rmvListener("resetPass" /* resetPass */, self);
                game.gameScene.openPopup(new game.SafeBoxOpen(false));
            }
        };
        SafeBoxFindPwd.prototype.onFocus1 = function (e) {
            this.skBoxCode.text = "";
        };
        SafeBoxFindPwd.prototype.OnAccount = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skBoxCode.text = inputText;
            self.skBoxCode.textColor = 0xffffff;
        };
        SafeBoxFindPwd.prototype.onFocus2 = function (e) {
            this.skSureCode.text = "";
        };
        SafeBoxFindPwd.prototype.OnAccount1 = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skSureCode.text = inputText;
            self.skSureCode.textColor = 0xffffff;
        };
        SafeBoxFindPwd.prototype.onFocus3 = function (e) {
            this.skBoxYanZheng.text = "";
        };
        SafeBoxFindPwd.prototype.OnAccount2 = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skBoxYanZheng.text = inputText;
            self.skBoxYanZheng.textColor = 0xffffff;
        };
        SafeBoxFindPwd.prototype.onShow = function (stage) {
            _super.prototype.onShow.call(this, stage);
            var self = this;
        };
        SafeBoxFindPwd.prototype.onHide = function () {
            _super.prototype.onHide.call(this);
            var self = this;
        };
        SafeBoxFindPwd.prototype.dispose = function () {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            generalMo.rmvListener("resetPass" /* resetPass */, self);
            _super.prototype.dispose.call(this);
        };
        return SafeBoxFindPwd;
    }(game.UIPopup));
    game.SafeBoxFindPwd = SafeBoxFindPwd;
    __reflect(SafeBoxFindPwd.prototype, "game.SafeBoxFindPwd");
})(game || (game = {}));
var game;
(function (game) {
    var chipList = [1000, 10000, 100000, 1000000];
    var nowIndex = -1;
    var SafeBoxGetOrCun = (function (_super) {
        __extends(SafeBoxGetOrCun, _super);
        function SafeBoxGetOrCun(isQu) {
            var _this = _super.call(this) || this;
            _this._distance = new egret.Point(); //鼠标点击时，鼠标全局坐标与_bird的位置差
            _this._touchStatus = false; //当前触摸状态，按下时，值为true
            var self = _this;
            self._isQu = isQu;
            self.skinName = "gameDepositBoxCQSkin";
            return _this;
        }
        SafeBoxGetOrCun.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skAdd.visible = false;
            var generalMo = game.dataMgr.generalMo;
            generalMo.addListener("cun" /* cun */, self.goldCun, self);
            generalMo.addListener("qu" /* qu */, self.goldQu, self);
            if (self.skConfGrp) {
                self._tag = self.skConfGrp.tag;
            }
            if (true)
                console.log("self._tag   ==  ", self._tag);
            if (self._tag == 1) {
                self._tuoX = 26.5;
                self._tuoMaxX = 599.5;
                self._maxSize = 573;
            }
            else if (self._tag == 2) {
                self._tuoX = 32;
                self._tuoMaxX = 570;
                self._maxSize = 538;
            }
            else {
                self._tuoX = 19.5;
                self._tuoMaxX = 519.5;
                self._maxSize = 500;
            }
            self._showGold = 0;
            self.initTouch();
            self.skLongBar.openAni = true;
            if (self.skGetOrCun)
                self.skGetOrCun.text = self._isQu ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 856 /* boxGet */) : TRain.langMgr.getTxt("mainLang" /* mainLang */, 857 /* boxIn */);
            if (self.skYuan)
                self.skYuan.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 201 /* RMBText */);
            if (self._tag == 1 || self._tag == 2) {
                self.skGold.text = game.DataFormat.convertYuanString2(generalMo.getSelfGold(), true);
            }
            else {
                self.skGold.text = game.DataFormat.convertYuanString2(generalMo.getSelfGold(), false);
            }
            self.skCunGold.text = game.DataFormat.convertYuanString2(generalMo.getHasCunGold(), false);
            if (self.skCQ)
                self.skCQ.source = self._isQu ? "txt_quchu_yuan" : "txt_cunru_yuan";
            for (var i = 0; i < 4; i++) {
                if (self["skChipLight" + i])
                    self["skChipLight" + i].visible = false;
            }
            self.skBoxGold.prompt = (!self._isQu) ? TRain.langMgr.getTxt("mainLang" /* mainLang */, 875 /* inMoney */) : TRain.langMgr.getTxt("mainLang" /* mainLang */, 876 /* outMoney */);
            self.skBoxGold.promptColor = 0x988293;
            self.skBoxGold.addEventListener(egret.Event.CHANGE, self.OnAccount, self);
            self.skBoxGold.addEventListener(egret.Event.FOCUS_IN, self.onFocus, self);
        };
        SafeBoxGetOrCun.prototype.showGoldChange = function (type) {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            var hasCun = generalMo.getHasCunGold();
            var myGold = generalMo.getSelfGold();
            var tempGold = self._showGold;
            var selfGold = 0;
            var cunGold = 0;
            if (type == 0) {
                selfGold = myGold - tempGold;
                cunGold = hasCun + tempGold;
                self.skCunGold.text = game.DataFormat.convertYuanString2(cunGold, false);
                if (self._tag == 1 || self._tag == 2) {
                    self.skGold.text = game.DataFormat.convertYuanString2(selfGold, true);
                }
                else {
                    self.skGold.text = game.DataFormat.convertYuanString2(selfGold, false);
                }
                generalMo.setHasCunGold(cunGold);
                generalMo.setSelfGold(selfGold);
                game.dataMgr.accMo.setVal("gold", generalMo.getSelfGold());
            }
            else {
                selfGold = myGold + tempGold;
                cunGold = hasCun - tempGold;
                self.skCunGold.text = game.DataFormat.convertYuanString2(cunGold, false);
                if (self._tag == 1 || self._tag == 2) {
                    self.skGold.text = game.DataFormat.convertYuanString2(selfGold, true);
                }
                else {
                    self.skGold.text = game.DataFormat.convertYuanString2(selfGold, false);
                }
                generalMo.setHasCunGold(cunGold);
                generalMo.setSelfGold(selfGold);
                game.dataMgr.accMo.setVal("gold", generalMo.getSelfGold());
            }
            if (true)
                console.log("钱变化后的数值     存的 	  generalMo.getHasCunGold()  ==  ", generalMo.getHasCunGold());
            if (true)
                console.log("钱变化后的数值     自己有的   	generalMo.getSelfGold()  ==  ", generalMo.getSelfGold());
            if (true)
                console.log("钱变化后的数值     自己有的   	game.dataMgr.accMo.getData().gold  ==  ", game.dataMgr.accMo.getData().gold);
        };
        SafeBoxGetOrCun.prototype.goldCun = function () {
            var self = this;
            if (!game.dataMgr.generalMo.getIsFinish()) {
                var tips = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 868 /* boxInCount */), self._showGold / 100);
                game.MsgBox.showTipBox(false, 868 /* boxInCount */, "mainLang" /* mainLang */, tips);
                game.dataMgr.generalMo.setIsFinish(true);
                self.showGoldChange(0);
            }
        };
        SafeBoxGetOrCun.prototype.goldQu = function () {
            var self = this;
            if (!game.dataMgr.generalMo.getIsFinish()) {
                game.dataMgr.generalMo.setIsFinish(true);
                var tips = StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, 867 /* boxGetCount */), self._showGold / 100);
                game.MsgBox.showTipBox(false, 867 /* boxGetCount */, "mainLang" /* mainLang */, tips);
                self.showGoldChange(1);
            }
        };
        SafeBoxGetOrCun.prototype.initTouch = function () {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            self.skKefu.setTarget(game.HttpUtil.gotoKeFu, game.HttpUtil);
            self.skclose.setTarget(function () {
                game.gameScene.showHallUI(10 /* bxxShouyi */);
                self.close();
            }, self);
            self.skAdd.setTarget(function () {
            }, self);
            self.sktuodong.addEventListener(egret.TouchEvent.TOUCH_BEGIN, self.onMoveBegin, self);
            self.skReset.setTarget(function () {
                self._showGold = 0;
                self.skBoxGold.text = "0";
                self.skBoxGold.textColor = 0xffffff;
                self.sktuodong.x = self._tuoX;
            }, self);
            var _loop_8 = function (i) {
                var btn = self["skchip" + i];
                btn.addEventListener(egret.TouchEvent.TOUCH_BEGIN, function () {
                    nowIndex = btn.tag;
                    if (self["skChipLight" + nowIndex])
                        self["skChipLight" + nowIndex].visible = true;
                }, self);
                btn.addEventListener(egret.TouchEvent.TOUCH_END, function () {
                    if (self["skChipLight" + nowIndex])
                        self["skChipLight" + nowIndex].visible = false;
                    self._showGold += chipList[nowIndex];
                    if (self._isQu) {
                        if (self._showGold > generalMo.getHasCunGold())
                            self._showGold = generalMo.getHasCunGold();
                    }
                    if (true)
                        console.log("self._showGold  ==  ", self._showGold);
                    if (!self._isQu) {
                        if (generalMo.getSelfGold() == 0) {
                            game.MsgBox.showTipBox(false, 895 /* boxCunIsZero */, "mainLang" /* mainLang */);
                            return;
                        }
                        self.sktuodong.x = (self._showGold <= generalMo.getSelfGold()) ? (self._maxSize * (self._showGold / generalMo.getSelfGold()) + self._tuoX) : self._tuoMaxX;
                    }
                    else {
                        if (generalMo.getHasCunGold() == 0) {
                            game.MsgBox.showTipBox(false, 896 /* boxQuIsZero */, "mainLang" /* mainLang */);
                            return;
                        }
                        self.sktuodong.x = (self._showGold <= generalMo.getHasCunGold()) ? (self._maxSize * (self._showGold / generalMo.getHasCunGold()) + self._tuoX) : self._tuoMaxX;
                    }
                    self.skBoxGold.textColor = 0xffffff;
                    if (self._isQu) {
                        self.skBoxGold.text = game.DataFormat.convertGoldString3(self._showGold);
                    }
                    else {
                        self.skBoxGold.text = (self._showGold <= generalMo.getSelfGold()) ? game.DataFormat.convertGoldString3(self._showGold) : game.DataFormat.convertGoldString3(generalMo.getSelfGold());
                    }
                }, self);
            };
            for (var i = 0; i < 4; i++) {
                _loop_8(i);
            }
            self.skSure.setTarget(self.clickBtn, self);
            self.skMax.setTarget(function () {
                self._showGold = (!self._isQu) ? generalMo.getSelfGold() : generalMo.getHasCunGold();
                self.skBoxGold.text = String(self._showGold / 100);
                self.skBoxGold.textColor = 0xffffff;
                self.sktuodong.x = self._tuoMaxX;
            }, self);
        };
        SafeBoxGetOrCun.prototype.clickBtn = function () {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            var pwd = generalMo.getPwd();
            var pwd1 = md5(pwd);
            if (self._showGold == 0) {
                if (!self._isQu) {
                    game.MsgBox.showTipBox(false, 875 /* inMoney */, "mainLang" /* mainLang */);
                }
                else {
                    game.MsgBox.showTipBox(false, 876 /* outMoney */, "mainLang" /* mainLang */);
                }
                return;
            }
            if (self._isQu) {
                if (self._showGold > generalMo.getHasCunGold()) {
                    game.MsgBox.showTipBox(false, 865 /* boxNoEnoughMoney */, "mainLang" /* mainLang */);
                }
                else {
                    generalMo.askGetMoney(self._showGold, pwd1);
                }
            }
            else {
                if (self._showGold > generalMo.getSelfGold()) {
                    game.MsgBox.showTipBox(false, 864 /* notEnoughGold */, "mainLang" /* mainLang */);
                }
                else {
                    generalMo.askCunMoney(self._showGold, pwd1);
                }
            }
        };
        SafeBoxGetOrCun.prototype.onMoveBegin = function (e) {
            var self = this;
            self._touchStatus = true;
            self._distance.x = e.stageX - self.sktuodong.x;
            self._distance.y = e.stageY - self.sktuodong.y;
            self.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, self.moveTuoDong, self);
            self.stage.addEventListener(egret.TouchEvent.TOUCH_END, self.onMoveEnd, self);
        };
        SafeBoxGetOrCun.prototype.moveTuoDong = function (e) {
            var self = this;
            var tuo = self.sktuodong;
            var maxSize = self._tuoMaxX;
            var generalMo = game.dataMgr.generalMo;
            var gold = self._isQu ? generalMo.getHasCunGold() : generalMo.getSelfGold();
            if (self._touchStatus) {
                if (tuo.x <= maxSize && tuo.x >= self._tuoX) {
                    self.skLongBar.setProgressValue(self.sktuodong.x / self._maxSize, 1);
                    tuo.x = e.stageX - self._distance.x;
                    if (tuo.x <= self._tuoX) {
                        tuo.x = self._tuoX;
                    }
                    if (tuo.x >= maxSize) {
                        tuo.x = maxSize;
                    }
                    var per = (tuo.x - self._tuoX) / self._maxSize;
                    var tempGold = Number(game.DataFormat.convertGoldString3(per * gold));
                    self.skBoxGold.text = game.DataFormat.convertGoldString3(tempGold * 100);
                    self._showGold = Number((tempGold * 100).toFixed(2));
                    self.skBoxGold.textColor = 0xffffff;
                }
            }
        };
        SafeBoxGetOrCun.prototype.onMoveEnd = function (e) {
            var self = this;
            self.removeEvent();
        };
        SafeBoxGetOrCun.prototype.removeEvent = function () {
            var self = this;
            if (self._touchStatus) {
                var stage = TRain.core.stage;
                stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, self.moveTuoDong, self);
                stage.removeEventListener(egret.TouchEvent.TOUCH_END, self.onMoveEnd, self);
                self._touchStatus = false;
            }
        };
        SafeBoxGetOrCun.prototype.onFocus = function (e) {
            this.skBoxGold.text = "";
        };
        SafeBoxGetOrCun.prototype.OnAccount = function (e) {
            var self = this;
            var inputText = e.target.text;
            var generalMo = game.dataMgr.generalMo;
            var isTrueText = self.getIsTrueNumber(inputText);
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            if (self._isQu) {
                self.skBoxGold.text = (Number(isTrueText) <= (generalMo.getHasCunGold() / 100)) ? isTrueText : String((generalMo.getHasCunGold() / 100));
            }
            else {
                self.skBoxGold.text = (Number(isTrueText) <= (generalMo.getSelfGold() / 100)) ? isTrueText : String((generalMo.getSelfGold() / 100));
            }
            self.skBoxGold.textColor = 0xffffff;
            self._showGold = Number(self.skBoxGold.text) * 100;
            var gold = self._isQu ? generalMo.getHasCunGold() : generalMo.getSelfGold();
            var per = self._showGold / gold;
            self.sktuodong.x = self.skBoxGold.text ? per * self._maxSize + self._tuoX : self._tuoX;
            if (self.sktuodong.x > self._tuoMaxX) {
                self.sktuodong.x = self._tuoMaxX;
            }
        };
        SafeBoxGetOrCun.prototype.getIsTrueNumber = function (inputText) {
            var isTrue = "";
            if (inputText.indexOf(".") > 0) {
                var tempText = inputText.slice(0);
                var tempTexthArr = tempText.split(".");
                var length_5 = tempTexthArr.length;
                for (var i = 1; i < length_5; i++) {
                }
                var tempLength = (tempTexthArr[length_5 - 1].length > 2) ? 2 : tempTexthArr[length_5 - 1].length;
                isTrue = tempTexthArr[0] + "." + tempTexthArr[length_5 - 1].slice(0, tempLength);
            }
            else {
                isTrue = inputText;
            }
            return isTrue;
        };
        SafeBoxGetOrCun.prototype.onShow = function (stage) {
            _super.prototype.onShow.call(this, stage);
        };
        SafeBoxGetOrCun.prototype.onHide = function () {
            _super.prototype.onHide.call(this);
        };
        SafeBoxGetOrCun.prototype.dispose = function () {
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            generalMo.rmvListener("cun" /* cun */, self);
            generalMo.rmvListener("qu" /* qu */, self);
            _super.prototype.dispose.call(this);
        };
        return SafeBoxGetOrCun;
    }(game.UIFullFW));
    game.SafeBoxGetOrCun = SafeBoxGetOrCun;
    __reflect(SafeBoxGetOrCun.prototype, "game.SafeBoxGetOrCun");
})(game || (game = {}));
var game;
(function (game) {
    var SafeBoxMingXi = (function (_super) {
        __extends(SafeBoxMingXi, _super);
        function SafeBoxMingXi() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "depositBoxMingXiSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        SafeBoxMingXi.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            generalMo.askSafeBoxLog(game.dataMgr.accMo.getData().create_time);
            generalMo.addListener("log" /* log */, self.showLog, self);
            self.skclose.setTarget(function () {
                generalMo.rmvListener("log" /* log */, self);
                self.close();
            }, self);
            var list = self.skMXList;
            list.itemRender = safeBoxMingXiShow;
            list.dataProvider = self._itemPro = new cui.ArrayCollection();
            self.skBtnGrp.setTarget(self.btnClickChip, self);
            self.skBtnGrp.selectTag = 0;
            self.skLogData.visible = false;
        };
        SafeBoxMingXi.prototype.showLog = function () {
            var self = this;
            self.showLab(self._tag);
        };
        SafeBoxMingXi.prototype.btnClickChip = function (item) {
            var self = this;
            TRain.soundMgr.playSFX("click" /* click */);
            var tag = self._tag = item.tag;
            self.showLab(tag);
        };
        SafeBoxMingXi.prototype.showLab = function (tag) {
            var self = this;
            var logData = game.dataMgr.generalMo.getLogInfo();
            if (logData) {
                self.skLogData.visible = false;
                var listArr = [];
                for (var i = 0; i < logData.length; i++) {
                    var temp = logData[i];
                    if (tag == 1) {
                        if (temp.gold < 0)
                            continue;
                    }
                    else if (tag == 2) {
                        if (temp.gold > 0)
                            continue;
                    }
                    var WuXianinfo = {
                        tag: (temp.gold < 0) ? 1 : 2,
                        gold: temp.gold,
                        selfgold: temp.player_gold,
                        time: temp.time
                    };
                    listArr.push(WuXianinfo);
                }
                self._itemPro.source = listArr;
            }
            else {
                self.skLogData.visible = true;
            }
        };
        SafeBoxMingXi.prototype.onShow = function (stage) {
            _super.prototype.onShow.call(this, stage);
            var self = this;
        };
        SafeBoxMingXi.prototype.onHide = function () {
            _super.prototype.onHide.call(this);
            var self = this;
        };
        return SafeBoxMingXi;
    }(game.UIPopup));
    game.SafeBoxMingXi = SafeBoxMingXi;
    __reflect(SafeBoxMingXi.prototype, "game.SafeBoxMingXi");
    var safeBoxMingXiShow = (function (_super) {
        __extends(safeBoxMingXiShow, _super);
        function safeBoxMingXiShow() {
            var _this = _super.call(this) || this;
            _this.skinName = "depositBoxMingXiListSkin";
            return _this;
        }
        safeBoxMingXiShow.prototype.GMTToStr = function (time) {
            var date = new Date(time);
            var Str = date.getFullYear() + '-' +
                (date.getMonth() + 1) + '-' +
                date.getDate() + '  ' +
                date.getHours() + ':' +
                date.getMinutes() + ':';
            return Str;
        };
        safeBoxMingXiShow.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            var labText = -1;
            var info1;
            if (data.tag == 1) {
                labText = 869 /* mingxiCun */;
                info1 = cui.htmlParser.parser(TRain.langMgr.getTxt("mainLang" /* mainLang */, 871 /* colorQU */));
            }
            else {
                labText = 870 /* mingxiQu */;
                info1 = cui.htmlParser.parser(TRain.langMgr.getTxt("mainLang" /* mainLang */, 872 /* colorCun */));
            }
            var timeString = self.GMTToStr(data.time * 1000);
            var info = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */, labText), timeString, Math.abs(data.gold / 100), Math.abs(data.selfgold / 100)));
            self.skLabel0.textFlow = info1;
            self.skLabel.textFlow = info;
        };
        return safeBoxMingXiShow;
    }(cui.DataItem));
    game.safeBoxMingXiShow = safeBoxMingXiShow;
    __reflect(safeBoxMingXiShow.prototype, "game.safeBoxMingXiShow");
})(game || (game = {}));
var game;
(function (game) {
    var SafeBoxOpen = (function (_super) {
        __extends(SafeBoxOpen, _super);
        function SafeBoxOpen(isOpen) {
            var _this = _super.call(this) || this;
            var self = _this;
            self._isisOpen = isOpen;
            self.skinName = "depositBoxSetSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        SafeBoxOpen.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var generalMo = game.dataMgr.generalMo;
            generalMo.addListener("set_box_password" /* setBoxPassword */, self.openBox, self);
            generalMo.addListener("enterBox" /* enterBox */, self.enterBox, self);
            self.skclose.setTarget(function () {
                self.rmvListen();
                self.close();
            }, self);
            var openGrp = self.skOpenGrp;
            var enterGrp = self.skEnterGrp;
            if (self._isisOpen) {
                openGrp.visible = true;
                enterGrp.visible = false;
            }
            else {
                openGrp.visible = false;
                enterGrp.visible = true;
            }
            self.skCodeIn.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 853 /* codeIn */);
            self.skCodeSure.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 854 /* codeSure */);
            self.skBoxCode.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 862 /* boxNumber */);
            self.skBoxCode.promptColor = 0x988293;
            self.skBoxCode.addEventListener(egret.Event.CHANGE, self.OnAccount, self);
            self.skBoxCode.addEventListener(egret.Event.FOCUS_IN, self.onFocus1, self);
            self.skSureCode.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 862 /* boxNumber */);
            self.skSureCode.promptColor = 0x988293;
            self.skSureCode.addEventListener(egret.Event.CHANGE, self.OnAccount1, self);
            self.skSureCode.addEventListener(egret.Event.FOCUS_IN, self.onFocus2, self);
            self.skTips.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 860 /* boxTishi */);
            self.skOpenBox.setTarget(function () {
                if (self.skBoxCode.text.length > 0 && self.skSureCode.text.length > 0) {
                    if (self.skBoxCode.text.length < 6 || self.skSureCode.text.length < 6 || self.skBoxCode.text.length > 20 || self.skSureCode.text.length > 20) {
                        game.MsgBox.showTipBox(true, 10009 /* e_rmt_pwd_not_less_6 */);
                    }
                    else {
                        if (self.skBoxCode.text != self.skSureCode.text) {
                            game.MsgBox.showTipBox(true, 24 /* e_rmt_pwd_not_same */);
                        }
                        else {
                            var boxCode = md5(self.skBoxCode.text);
                            var sureCode = md5(self.skSureCode.text);
                            generalMo.askOpenSafeBox(boxCode, sureCode);
                        }
                    }
                }
                else {
                    game.MsgBox.showTipBox(false, 14 /* Login_PwdIsEmpty */, "mainLang" /* mainLang */);
                }
            }, self);
            self.skTishi.text = TRain.langMgr.getTxt("mainLang" /* mainLang */, 855 /* codeS */);
            self.skEnterEdi.prompt = TRain.langMgr.getTxt("mainLang" /* mainLang */, 877 /* boxCodeNumber */);
            self.skEnterEdi.promptColor = 0x988293;
            self.skEnterEdi.addEventListener(egret.Event.CHANGE, self.OnAccount2, self);
            self.skEnterEdi.addEventListener(egret.Event.FOCUS_IN, self.onFocus3, self);
            self.skEnterBox.setTarget(function () {
                if (self.skEnterEdi.text.length > 0) {
                    if (self.skEnterEdi.text.length < 6 || self.skEnterEdi.text.length > 20) {
                        game.MsgBox.showTipBox(true, 10009 /* e_rmt_pwd_not_less_6 */);
                    }
                    else {
                        generalMo.setTempPwd(self.skEnterEdi.text);
                        var EnterCode = md5(self.skEnterEdi.text);
                        generalMo.askEnterSafeBox(EnterCode);
                    }
                }
                else {
                    game.MsgBox.showTipBox(false, 14 /* Login_PwdIsEmpty */, "mainLang" /* mainLang */);
                }
            }, self);
            self.skForget.setTarget(function () {
                self.rmvListen();
                self.close();
                game.gameScene.openPopup(new game.SafeBoxFindPwd());
            }, self);
        };
        SafeBoxOpen.prototype.rmvListen = function () {
            var generalMo = game.dataMgr.generalMo;
            var self = this;
            generalMo.rmvListener("set_box_password" /* setBoxPassword */, self);
            generalMo.rmvListener("enterBox" /* enterBox */, self);
        };
        SafeBoxOpen.prototype.enterBox = function () {
            var self = this;
            game.dataMgr.generalMo.setPwd(game.dataMgr.generalMo.getTempPwd());
            game.gameScene.showHallUI(10 /* bxxShouyi */);
            self.rmvListen();
            self.close();
        };
        SafeBoxOpen.prototype.openBox = function (result) {
            var self = this;
            if (result == 1) {
                game.dataMgr.accMo.getData().isSafeDepositBoxPwdEmpty = false;
                self.skOpenGrp.visible = false;
                self.skEnterGrp.visible = true;
            }
        };
        SafeBoxOpen.prototype.onFocus1 = function (e) {
            this.skBoxCode.text = "";
        };
        SafeBoxOpen.prototype.OnAccount = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skBoxCode.text = inputText;
            self.skBoxCode.textColor = 0xffffff;
        };
        SafeBoxOpen.prototype.onFocus2 = function (e) {
            this.skSureCode.text = "";
        };
        SafeBoxOpen.prototype.OnAccount1 = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skSureCode.text = inputText;
            self.skSureCode.textColor = 0xffffff;
        };
        SafeBoxOpen.prototype.onFocus3 = function (e) {
            this.skEnterEdi.text = "";
        };
        SafeBoxOpen.prototype.OnAccount2 = function (e) {
            var self = this;
            var inputText = e.target.text;
            var str = game.DataFormat.CheckStringLength(inputText);
            var len = str[0];
            var chaLen = str[1] > 8 ? 8 : str[1];
            if (len > 16) {
                var firstIdx = 16 - chaLen;
                inputText = inputText.substring(0, firstIdx);
            }
            self.skEnterEdi.text = inputText;
            self.skEnterEdi.textColor = 0xffffff;
        };
        SafeBoxOpen.prototype.onShow = function (stage) {
            _super.prototype.onShow.call(this, stage);
            var self = this;
        };
        SafeBoxOpen.prototype.onHide = function () {
            _super.prototype.onHide.call(this);
            var self = this;
        };
        return SafeBoxOpen;
    }(game.UIPopup));
    game.SafeBoxOpen = SafeBoxOpen;
    __reflect(SafeBoxOpen.prototype, "game.SafeBoxOpen");
})(game || (game = {}));
var game;
(function (game) {
    var SafeBoxRule = (function (_super) {
        __extends(SafeBoxRule, _super);
        function SafeBoxRule() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "depositBoxRuleSkin";
            self.hideBg = false;
            self.vCenter = 0;
            self.hCenter = 0;
            return _this;
        }
        SafeBoxRule.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skclose.setTarget(function () {
                self.close();
            }, self);
            self.showRule();
        };
        SafeBoxRule.prototype.showRule = function () {
            var self = this;
            var rule = game.dataMgr.generalMo.getSafeBoxRule();
            if (self.skInGrp.numChildren > 0) {
                for (var i = 0; i < self.skInGrp.numChildren; i++) {
                    var temp = self.skInGrp.getChildAt(i);
                    temp.dispose();
                }
            }
            self.skInGrp.removeChildren();
            var maxHeight = 0;
            for (var key in rule) {
                var faqConf = rule[key];
                if (faqConf.isImg) {
                    var img = new cui.Image();
                    img.source = faqConf.text;
                    img.x = faqConf.x;
                    img.y = faqConf.y;
                    self.skInGrp.addChild(img);
                    if (maxHeight < img.y)
                        maxHeight = img.y;
                }
                else {
                    var lab = new cui.Label();
                    lab.textFlow = cui.htmlParser.parser(faqConf.text);
                    lab.x = faqConf.x;
                    lab.y = faqConf.y;
                    self.skInGrp.addChild(lab);
                    if (maxHeight < lab.y)
                        maxHeight = lab.y;
                }
            }
        };
        SafeBoxRule.prototype.onShow = function (stage) {
            _super.prototype.onShow.call(this, stage);
            var self = this;
        };
        SafeBoxRule.prototype.onHide = function () {
            _super.prototype.onHide.call(this);
            var self = this;
        };
        return SafeBoxRule;
    }(game.UIPopup));
    game.SafeBoxRule = SafeBoxRule;
    __reflect(SafeBoxRule.prototype, "game.SafeBoxRule");
})(game || (game = {}));
var game;
(function (game) {
    var SafeBoxView = (function (_super) {
        __extends(SafeBoxView, _super);
        function SafeBoxView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "gameDepositBoxSkin";
            return _this;
        }
        SafeBoxView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            if (self.skConfGrp) {
                self._tag = self.skConfGrp.tag;
            }
            self.initTouch();
            var generalMo = game.dataMgr.generalMo;
            var myGold = (generalMo.getSelfGold() == -1) ? game.dataMgr.accMo.getData().gold : generalMo.getSelfGold();
            var tempGold = 0;
            if (game.dataMgr.accMo.getData().safeBoxGold > 0) {
                tempGold = game.dataMgr.accMo.getData().safeBoxGold;
            }
            else {
                tempGold = (generalMo.getHasCunGold() != -1) ? generalMo.getHasCunGold() : 0;
            }
            var cunGold = (generalMo.getHasCunGold() == -1) ? tempGold : generalMo.getHasCunGold();
            if (self._tag == 1 || self._tag == 2) {
                self.skGold.text = game.DataFormat.convertYuanString2(myGold, true);
            }
            else {
                self.skGold.text = game.DataFormat.convertYuanString2(myGold, false);
            }
            self.skCunGold.text = cunGold ? game.DataFormat.convertYuanString2(cunGold, false) : "0";
            generalMo.setSelfGold(myGold);
            generalMo.setHasCunGold(cunGold);
            if (true)
                console.log("SafeBoxView     自己有的   	game.dataMgr.accMo.getData().gold  ==  ", game.dataMgr.accMo.getData().gold);
        };
        SafeBoxView.prototype.initTouch = function () {
            var self = this;
            self.skKefu.setTarget(game.HttpUtil.gotoKeFu, game.HttpUtil);
            self.skclose.setTarget(function () {
                TRain.soundMgr.playSFX("click" /* click */);
                game.gameScene.goHome();
            }, self);
            self.skRule.setTarget(function () {
                game.gameScene.openPopup(new game.SafeBoxRule());
            }, self);
            self.skMingxi.setTarget(function () {
                game.gameScene.openPopup(new game.SafeBoxMingXi());
            }, self);
            self.skCun.setTarget(function () {
                game.gameScene.showHallUI(9 /* safeBoxCQ */, false);
            }, self);
            self.skQu.setTarget(function () {
                game.gameScene.showHallUI(9 /* safeBoxCQ */, true);
            }, self);
            self.skAdd.setTarget(function () {
                game.gameScene.showHallUI(2 /* shop */, null, true);
            }, self);
        };
        SafeBoxView.prototype.onShow = function (stage) {
            _super.prototype.onShow.call(this, stage);
        };
        SafeBoxView.prototype.onHide = function () {
            _super.prototype.onHide.call(this);
        };
        SafeBoxView.prototype.dispose = function () {
            _super.prototype.dispose.call(this);
        };
        return SafeBoxView;
    }(game.UIFullFW));
    game.SafeBoxView = SafeBoxView;
    __reflect(SafeBoxView.prototype, "game.SafeBoxView");
})(game || (game = {}));
var game;
(function (game) {
    var scoreBoxView = (function (_super) {
        __extends(scoreBoxView, _super);
        function scoreBoxView(plyCount, plydata, score) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.vCenter = 0;
            self.hCenter = 0;
            self.hideBg = true;
            self.bgClose = true;
            self.skinName = "gameScoreBoxView";
            self._plyCount = plyCount;
            self._plyData = plydata;
            self._scoreData = score;
            return _this;
        }
        scoreBoxView.prototype.setScoreData = function (score) {
            this._scoreData = score;
        };
        scoreBoxView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skBack.setTarget(function () {
                self.close();
            }, self);
            var list0 = self.skPlyList;
            list0.itemRender = ScorePlyTile;
            list0.dataProvider = self._itemPly = new cui.ArrayCollection();
            var list1 = self.skScoreList;
            list1.itemRender = ScoreBoxTile;
            list1.dataProvider = self._itemScore = new cui.ArrayCollection();
            self.updateView();
        };
        scoreBoxView.prototype.updateView = function () {
            var self = this;
            var tempData = self._plyData;
            var tempScore = self._scoreData;
            var listArr = [];
            var listArrPly = [];
            var allScore = [0, 0, 0, 0];
            var count = self._plyCount;
            for (var i = 0; i < tempScore.length; i++) {
                var score = tempScore[i];
                var scoreinfo = {
                    scores: score,
                    num: i,
                };
                listArr.push(scoreinfo);
                for (var j = 0; j < count; j++) {
                    allScore[j] += score[j];
                }
            }
            for (var i = 0; i < count; i++) {
                var ply = tempData[i];
                if (ply) {
                    var plyinfo = {
                        nickName: ply.nickName,
                        head: ply.head,
                        vip: ply.vip,
                        plyScore: allScore[i],
                        id: i,
                    };
                    listArrPly.push(plyinfo);
                }
            }
            self._itemScore.source = listArr;
            self._itemPly.source = listArrPly;
        };
        return scoreBoxView;
    }(game.UIPopup));
    game.scoreBoxView = scoreBoxView;
    __reflect(scoreBoxView.prototype, "game.scoreBoxView");
    var ScoreBoxTile = (function (_super) {
        __extends(ScoreBoxTile, _super);
        function ScoreBoxTile(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "scoreWinListSkin";
            return _this;
        }
        ScoreBoxTile.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skJu.text = String(data.num + 1);
            var score = data.scores;
            for (var i = 0; i < score.length; i++) {
                var temp = score[i];
                self["skScore" + i].text = (temp >= 0) ? ("+" + temp) : String(temp);
                self["skScore" + i].font = (temp >= 0) ? "fkScoreWin" : "fkScoreLose";
            }
        };
        return ScoreBoxTile;
    }(cui.DataItem));
    game.ScoreBoxTile = ScoreBoxTile;
    __reflect(ScoreBoxTile.prototype, "game.ScoreBoxTile");
    var ScorePlyTile = (function (_super) {
        __extends(ScorePlyTile, _super);
        function ScorePlyTile(data) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "scorePlyListSkin";
            self._data = data;
            return _this;
        }
        ScorePlyTile.prototype.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            var self = this;
            var data = self.data;
            self.skHead.source = game.DataFormat.getHeadIcon(data.head);
            self.skVip.source = "head@old" /* oldFrame */ + data.vip;
            self.skOwner.visible = data.id == 0;
            self.skNickName.text = game.DataFormat.formatName(data.nickName, 8);
            self.skGold.text = (data.plyScore > 0) ? ("+" + String(data.plyScore)) : String(data.plyScore);
            self.skGold.font = (data.plyScore >= 0) ? "fkWin" : "fkLose";
        };
        return ScorePlyTile;
    }(cui.DataItem));
    game.ScorePlyTile = ScorePlyTile;
    __reflect(ScorePlyTile.prototype, "game.ScorePlyTile");
})(game || (game = {}));
var game;
(function (game) {
    var SecondSevenView = (function (_super) {
        __extends(SecondSevenView, _super);
        function SecondSevenView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "SecondSevenSkin";
            return _this;
        }
        SecondSevenView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            //初始登陆获取任务列表info
            // dataMgr.generalMo.sendGetQuestlist(false);
            var self = this;
            var isLookSDay = game.dataMgr.generalMo.isFunOpen(5 /* sevenDay */); //是否开放七日奖励
            self.visible = (game.dataMgr.gameMo.getData().length > 7 && isLookSDay) ? true : false;
            if (self.visible) {
                var sevenDayDone_1 = game.dataMgr.accMo.getVal("sevenday_done");
                if (!sevenDayDone_1)
                    self.regHandle();
                self.skBtn.setTarget(function () {
                    game.GameUtil.playClickSound();
                    if (!sevenDayDone_1) {
                        //子游戏内点击七日图标
                        game.gameScene.showHallUI(4 /* sevenReward */);
                        // dataMgr.generalMo.sendGetQuestlist(false);
                    }
                    else {
                        game.gameScene.openPopup(new game.LimitReward2());
                    }
                }, self);
                self.setIcon();
            }
        };
        SecondSevenView.prototype.updateInfo = function () {
            var self = this;
            var isLookSDay = game.dataMgr.generalMo.isFunOpen(5 /* sevenDay */); //是否开放七日奖励
            self.skGrp.scaleX = self.skGrp.scaleY = 0;
            if (game.dataMgr.generalMo.isDone && game.dataMgr.gameMo.getData().length > 7) {
                self.skImgDone.source = game.dataMgr.generalMo.isget ? "hall_hall@txt_done" : "notice@noRead2";
                self.skImgDone.x = game.dataMgr.generalMo.isget ? 32 : 62;
                self.skImgDone.y = game.dataMgr.generalMo.isget ? 10 : 20;
            }
            var b = game.dataMgr.generalMo.isDone || game.dataMgr.generalMo.isget;
            self.skImgDone.visible = (b && game.dataMgr.gameMo.getData().length > 7 && isLookSDay) ? true : false;
            //设置七日奖励按钮的图标（不同子游戏图标不一样）
            // let icon = self.skBtn.icon;
            var sevenDayDone = game.dataMgr.accMo.getVal("sevenday_done");
            self.skBtn.icon = !!sevenDayDone ? self._xsImg : self._sdImg;
        };
        /**
         *
         * @param xsIcon 显示悬赏图片
         * @param sevenDayIcon 七日奖励图片
         */
        SecondSevenView.prototype.setIcon = function (xsIcon, sevenDayIcon) {
            var self = this;
            self._xsImg = xsIcon || "common@txt_task";
            self._sdImg = sevenDayIcon || "common@txt_qiriyoujiang";
            self.updateInfo();
        };
        SecondSevenView.prototype.updateTask = function (vo, oldCount) {
            var self = this;
            var id = vo.questid;
            var count = vo.count;
            var receive = vo.received;
            if (isNaN(id) && isNaN(count)) {
                return;
            }
            var list = game.dataMgr.generalMo.getLimitList();
            if (!list || list.length <= 0) {
                return;
            }
            var cfg = game.dataMgr.generalMo.getQuestByID(id);
            self.skLabGame.text = cfg.name;
            var completeCount = cfg.completeCount;
            if (cfg.Style == 2) {
                self.skLabPb.text = game.DataFormat.convertGold(oldCount) + "/" + game.DataFormat.convertGold(completeCount);
            }
            else {
                self.skLabPb.text = oldCount + "/" + completeCount;
            }
            self.skPb.value = oldCount / completeCount;
            if (self.skGrp.scaleX == 0 || self.skGrp.scaleY == 0) {
                self.skGrp.scaleX = self.skGrp.scaleY = 1;
                // UIUtils.move(self.skGrp, { scaleX: 1, scaleY: 1 }, undefined, 800);
            }
            var num = TRain.core.addDelayDo(function () {
                if (cfg.Style == 2) {
                    self.skLabPb.text = game.DataFormat.convertGold(count) + "/" + game.DataFormat.convertGold(completeCount);
                }
                else {
                    self.skLabPb.text = count + "/" + completeCount;
                }
                self.skPb.value = count / completeCount;
                TRain.core.rmvDelayDoByID(num);
            }, self, 1000);
            var num2 = TRain.core.addDelayDo(function () {
                self.skGrp.scaleX = self.skGrp.scaleY = 0;
                TRain.core.rmvDelayDoByID(num2);
            }, self, 3000);
        };
        SecondSevenView.prototype.dealDone = function (isdone, isget) {
            var self = this;
            var b = isdone || isget;
            var isLookSDay = game.dataMgr.generalMo.isFunOpen(5 /* sevenDay */); //是否开放七日奖励
            if (b && game.dataMgr.gameMo.getData().length > 7) {
                self.skImgDone.source = isget ? "hall_hall@txt_done" : "notice@noRead2";
                self.skImgDone.x = game.dataMgr.generalMo.isget ? 32 : 62;
                self.skImgDone.y = game.dataMgr.generalMo.isget ? 10 : 20;
            }
            self.skImgDone.visible = (b && game.dataMgr.gameMo.getData().length > 7 && isLookSDay) ? true : false;
        };
        SecondSevenView.prototype.regHandle = function () {
            var self = this;
            game.dataMgr.generalMo.addListener("UpdateTaskList2" /* UpdateTaskList2 */, self.updateTask, self);
            game.dataMgr.generalMo.addListener("IsDone" /* IsDone */, self.dealDone, self);
            game.dataMgr.generalMo.addListener("GetQuestReward" /* GetQuestReward */, function () {
                // self.skImgDone.visible = false;
                game.dataMgr.generalMo.sendGetQuestlist(false);
            }, self);
        };
        SecondSevenView.prototype.dispose = function () {
            var self = this;
            game.dataMgr.generalMo.rmvListener("UpdateTaskList2" /* UpdateTaskList2 */, self);
            game.dataMgr.generalMo.rmvListener("IsDone" /* IsDone */, self);
            game.dataMgr.generalMo.rmvListener("GetQuestReward" /* GetQuestReward */, self);
            _super.prototype.dispose.call(this);
        };
        return SecondSevenView;
    }(cui.Component));
    game.SecondSevenView = SecondSevenView;
    __reflect(SecondSevenView.prototype, "game.SecondSevenView");
})(game || (game = {}));
var game;
(function (game) {
    var colorMatrix = [
        0.3, 0.6, 0, 0, 0,
        0.3, 0.6, 0, 0, 0,
        0.3, 0.6, 0, 0, 0,
        0, 0, 0, 1, 0
    ];
    var colorFlilter = new egret.ColorMatrixFilter(colorMatrix); //黑白矩阵
    var SevenRewardView = (function (_super) {
        __extends(SevenRewardView, _super);
        function SevenRewardView() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "SevenRewardSkin";
            self._taskIndex = 0;
            self._completeCount = 0;
            self._gameTag = TRain.actionMgr.getUnitTag();
            return _this;
        }
        SevenRewardView.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.regHandle();
            game.dataMgr.generalMo.sendGetQuestlist(false);
            self.skBtnReturn.setTarget(function () {
                game.GameUtil.playClickSound();
                var gameid = game.dataMgr.accMo.gameId;
                if (isNaN(gameid) || gameid == 0) {
                    game.gameScene.goHome();
                }
                else {
                    game.gameScene.goBack();
                }
                // self.close();
            }, self);
            self.skBtnGet.setTarget(function () {
                game.GameUtil.playClickSound();
                var list = game.dataMgr.generalMo.getTaskByDay(game.dataMgr.generalMo.curDay);
                game.dataMgr.generalMo.sendGetQuestReward(list[0].cfg.id);
            }, self);
            self.skBtnGet.visible = self.skBtnGoto0.visible = self.skBtnGoto1.visible = false;
            // self.skLabToday.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt(game.LangGrp.mainLang + "", langConsts.mainLang.todayCanGet), game.DataFormat.convertGold(dataMgr.generalMo.getTaskByDay(dataMgr.generalMo.curDay)[0].cfg.awardItemCount)));
            // self.updateInfo();
        };
        SevenRewardView.prototype.updateInfo = function () {
            var self = this;
            self.skBitAll.text = game.DataFormat.convertYuanString2(game.dataMgr.generalMo.getAllGold());
            self.updateTask(game.dataMgr.generalMo.curDay);
            for (var j = 0; j < 7; j++) {
                if (self["skImgSelect" + j]) {
                    if (j + 1 > game.dataMgr.generalMo.curDay) {
                        //未开启的
                        self["skImgBG" + j].source = "sevenReward@pic_qiri_tianshudi_g";
                        self["skImgDay" + j].source = "sevenReward@txt_qiri_day" + (j + 1) + "_g";
                    }
                    else {
                        self["skImgBG" + j].source = "sevenReward@pic_qiri_tianshudi";
                        self["skImgDay" + j].source = "sevenReward@txt_qiri_day" + (j + 1);
                    }
                    if (j + 1 == game.dataMgr.generalMo.curDay) {
                        self["skImgSelect" + j].visible = true;
                    }
                }
                else {
                    if (j + 1 > game.dataMgr.generalMo.curDay) {
                        //未开启的
                        self["skImgBG" + j].source = (j + 1 == 7) ? "sevenReward@dayBight2" : "sevenReward@dayBight1";
                        self["skImgDay" + j].source = "sevenReward@txt_qiri_day" + (j + 1) + "_g";
                    }
                    else {
                        self["skImgBG" + j].source = (j + 1 == 7) ? "sevenReward@dayLight2" : "sevenReward@dayLight1";
                        self["skImgDay" + j].source = "sevenReward@txt_qiri_day" + (j + 1) + "_l";
                    }
                }
            }
            self.skLabTip.textFlow = cui.htmlParser.parse(StringUtil.printf(TRain.langMgr.getTxt("mainLang", 699 /* SevenDayRest */), game.DataFormat.convertGold(game.dataMgr.generalMo.getRestReward())));
        };
        SevenRewardView.prototype.updateTask = function (day) {
            var self = this;
            var list = game.dataMgr.generalMo.getTaskByDay(day);
            if (!list || list.length == 0) {
                return;
            }
            // self.skBitSing.text = DataFormat.convertYuanString2(list[0].cfg.awardItemCount);
            if (list[0].count >= list[0].cfg.completeCount
                && list[1].count >= list[1].cfg.completeCount
                && list[0].received
                && list[1].received) {
                self.skBitSing.text = game.DataFormat.convertYuanString2(game.dataMgr.generalMo.getRestReward());
            }
            else {
                self.skBitSing.text = game.DataFormat.convertYuanString2(game.dataMgr.generalMo.getRestReward() + list[0].cfg.awardItemCount);
            }
            var isDown = true;
            if (list[0].received) {
                self.showTalk();
                isDown = false;
            }
            var _loop_9 = function (i) {
                var vo = list[i];
                if (!vo.cfg.gameID) {
                    self._taskIndex = i;
                    self._completeCount = vo.cfg.completeCount;
                }
                self["skImgGold" + i].source = vo.cfg.icon1;
                if (vo.received) {
                    //已领取
                    // self["skImgGold" + i].source = "sevenReward@icon_qiri_renwu17";
                    self["skImgDown" + i].visible = true;
                    self["skBtnGoto" + i].visible = false;
                }
                else {
                    // self["skImgGold" + i].source = "sevenReward@icon_qiri_renwu18";
                    if (vo.count >= vo.cfg.completeCount) {
                        //已完成
                        self["skImgDown" + i].visible = true;
                        self["skBtnGoto" + i].visible = false;
                    }
                    else {
                        //未完成
                        self["skImgDown" + i].visible = false;
                        // self["skBtnGoto" + i].visible = true;
                        var goto = self["skBtnGoto" + i];
                        var gameid = game.dataMgr.accMo.gameId;
                        if (isNaN(gameid) || gameid == 0) {
                            goto.visible = true;
                        }
                        else {
                            goto.visible = false;
                        }
                        goto.setTarget(function () {
                            // if (vo.cfg.id >= 3015 && vo.cfg.id <= 3028) {
                            if (vo.cfg.IsCommon) {
                                //通用任务
                                game.gameScene.goHome();
                                // self.close();
                            }
                            else if (!vo.cfg.gameID || vo.cfg.gameID.length == 0) {
                                //微信分享
                                game.dataMgr.generalMo.setTaskByDay(i, day);
                                var index = self._taskIndex;
                                game.dataMgr.generalMo.sendWXshareTask();
                                // URLUtil.openURL("weixin://");
                                URLUtil.openWXUrl();
                                var count = self._completeCount;
                                var myCount = vo.count;
                                if (vo.cfg.Style == 2) {
                                    count = game.DataFormat.convertGold(count);
                                    myCount = game.DataFormat.convertGold(vo.count);
                                }
                                if (myCount > count) {
                                    self["skLabPer" + index].text = count + "/" + count;
                                }
                                else {
                                    self["skLabPer" + index].text = myCount + "/" + count;
                                }
                                self["skPb" + index].value = myCount / count;
                                if (myCount == count) {
                                    self["skBtnGoto" + index].visible = false;
                                    self["skImgDown" + index].visible = true;
                                }
                                self["skLabPer" + index].textColor = 0x99e815;
                                if (vo.count >= count) {
                                    self.updateTask(game.dataMgr.generalMo.curDay);
                                }
                            }
                            else if (vo.cfg.gameID.length > 1) {
                                //对应多个游戏
                                if (vo.cfg.gameID.indexOf(1 /* jinchanbuyu */) >= 0) {
                                    game.gameScene.goHome();
                                    game.dataMgr.generalMo.showGameClass(5 /* fish */);
                                    // self.close();
                                }
                            }
                            else {
                                game.gameScene.goHome();
                                game.gameScene.startGame(vo.cfg.gameID[0]);
                                // self.close();
                            }
                        }, self);
                        isDown = false;
                    }
                }
                self["skLabDesc" + i].textFlow = cui.htmlParser.parse(vo.cfg.desc);
                if (vo.cfg.Style == 2) {
                    if (vo.count > vo.cfg.completeCount) {
                        self["skLabPer" + i].text = game.DataFormat.convertGold(vo.cfg.completeCount) + "/" + game.DataFormat.convertGold(vo.cfg.completeCount);
                    }
                    else {
                        self["skLabPer" + i].text = game.DataFormat.convertGold(vo.count) + "/" + game.DataFormat.convertGold(vo.cfg.completeCount);
                    }
                    self["skLabPer" + i].textColor = game.DataFormat.convertGold(vo.count) == game.DataFormat.convertGold(vo.cfg.completeCount) ? 0x99e815 : 0xff9000;
                }
                else {
                    if (vo.count > vo.cfg.completeCount) {
                        self["skLabPer" + i].text = vo.cfg.completeCount + "/" + vo.cfg.completeCount;
                    }
                    else {
                        self["skLabPer" + i].text = vo.count + "/" + vo.cfg.completeCount;
                    }
                    self["skLabPer" + i].textColor = vo.count == vo.cfg.completeCount ? 0x99e815 : 0xff9000;
                }
                self["skPb" + i].value = vo.count / vo.cfg.completeCount;
            };
            for (var i = 0; i < 2; i++) {
                _loop_9(i);
            }
            if (list[0].received) {
                self.skImgHas.visible = true;
                self.skBtnGet.visible = false;
            }
            else {
                self.skImgHas.visible = false;
                self.skBtnGet.visible = true;
                if (day == game.dataMgr.generalMo.curDay && isDown) {
                    self.skBtnGet.enabled = true;
                    self.skBtnGet.filters = undefined;
                }
                else {
                    self.skBtnGet.enabled = false;
                    self.skBtnGet.filters = [colorFlilter];
                }
            }
        };
        //掉金币动画
        SevenRewardView.prototype.fallGoldAni = function () {
            var self = this;
            //金币数量
            var count = 40;
            var duration = 800;
            var _loop_10 = function (i) {
                var db = new game.UIDBAni();
                // let db = new cui.Image("chip@10");
                db.dbNm = "sgjGoldTurn" /* sgjGoldTurn */ + "";
                db.x = Math.floor(self.stage.stageWidth * Math.random());
                db.y = Math.floor(-800 * Math.random());
                var dur = Math.floor(duration * Math.random()) + 800;
                self.addChild(db);
                db.gotoAndPlay("shuiguojijinbizhuan" /* sgjGold */ + "", 0, 5);
                game.UIUtils.move(db, { y: self.stage.stageHeight }, undefined, dur, undefined, function () {
                    if (db && self.$children.indexOf(db) >= 0) {
                        self.removeChild(db);
                        db.dispose();
                    }
                }, self._gameTag);
            };
            for (var i = 0; i < count; i++) {
                _loop_10(i);
            }
        };
        SevenRewardView.prototype.showTalk = function () {
            var self = this;
            game.UIUtils.move(self.skGrp, { scaleX: 1, scaleY: 1 }, undefined, 500, undefined, undefined, self._gameTag);
        };
        SevenRewardView.prototype.regHandle = function () {
            var self = this;
            game.dataMgr.generalMo.addListener("GetQuestReward" /* GetQuestReward */ + "", function () {
                self.fallGoldAni();
                self.updateInfo();
            }, self);
            game.dataMgr.generalMo.addListener("quest_list" /* Quest_List_Result */ + "", function () {
                //七日奖励
                var dayData = game.dataMgr.generalMo.getTaskByDay(game.dataMgr.generalMo.curDay);
                var count = dayData[0].cfg.awardItemCount;
                self.skLabToday.textFlow = cui.htmlParser.parser(StringUtil.printf(TRain.langMgr.getTxt("mainLang" /* mainLang */ + "", 782 /* todayCanGet */), game.DataFormat.convertGold(count)));
                self.updateInfo();
            }, self);
        };
        // public onHide() {
        //     let self = this;
        //     for (let temp of self.$children) {
        //         if (temp instanceof game.UIDBAni) {
        //             if (self.$children.indexOf(temp) >= 0 && temp) {
        //                 // temp.dispose();
        //                 self.removeChild(temp);
        //             }
        //         }
        //     }
        //     super.onHide();
        // }
        SevenRewardView.prototype.onDispose = function () {
            var self = this;
            game.dataMgr.generalMo.rmvListener("GetQuestReward" /* GetQuestReward */ + "", self);
            game.dataMgr.generalMo.rmvListener("quest_list" /* Quest_List_Result */ + "", self);
            TRain.actionMgr.rmvActsByTag(self._gameTag);
            for (var _i = 0, _a = self.$children; _i < _a.length; _i++) {
                var temp = _a[_i];
                if (temp instanceof game.UIDBAni) {
                    if (temp && self.$children.indexOf(temp) >= 0) {
                        self.removeChild(temp);
                        temp.dispose();
                    }
                }
            }
            _super.prototype.onDispose.call(this);
        };
        return SevenRewardView;
    }(game.UIFullFW));
    game.SevenRewardView = SevenRewardView;
    __reflect(SevenRewardView.prototype, "game.SevenRewardView");
})(game || (game = {}));
var game;
(function (game) {
    /**
     * doudizhu = 16,  //斗地主
        jinchanbuyu = 1,  //金蟾捕鱼
        jinshayinsha = 12,  //金鲨银鲨
        zhajinhua = 17,  //炸金花
        bjl = 5,  //百家乐
        heihongmeifang = 10,  //黑红梅方
        longhudou = 32,  //龙虎斗
        brniuniu = 4,  //百人牛牛
        robcow = 18,  //抢庄牛牛
        benchibaoma = 23,  //奔驰宝马
     */
    var AchieveShareDialog = (function (_super) {
        __extends(AchieveShareDialog, _super);
        function AchieveShareDialog() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "AchieveShareSkin";
            self.hCenter = self.vCenter = 0;
            //self.hideBg = true;
            self.bgClose = true;
            self.pri = 100 /* layer1 */;
            return _this;
        }
        AchieveShareDialog.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            game.UIUtils.getQRCodePly(function (data) {
                self.skerwei.source = data;
            });
            // self.createImg();
            self.skBtnClose.setTarget(function () {
                TRain.soundMgr.playSFX("click" /* click */ + "");
                self.close();
            }, self);
            //默认分享成功
            self.skBtnP.setTarget(function () {
                TRain.soundMgr.playSFX("click" /* click */ + "");
                game.dataMgr.generalMo.sendshareReward();
                // URLUtil.openURL("mqq://");
                URLUtil.openQQUrl();
                self.close();
            }, self);
            self.skBtnW.setTarget(function () {
                TRain.soundMgr.playSFX("click" /* click */ + "");
                game.dataMgr.generalMo.sendshareReward();
                // URLUtil.openURL("weixin://");
                URLUtil.openWXUrl();
                self.close();
            }, self);
            self.updateInfo();
        };
        AchieveShareDialog.prototype.updateInfo = function () {
            var self = this;
            self.skLabMan.text = TRain.langMgr.getTxt("mainLang", 703 /* mainMan */);
            self.skLabWoman.text = TRain.langMgr.getTxt("mainLang", 704 /* mainWoman */);
            self.skLabTip.text = TRain.langMgr.getTxt("mainLang", 705 /* mainRewardTip */);
        };
        AchieveShareDialog.prototype.openImpl = function (data) {
            if (!data || !data.win_gold) {
                return;
            }
            var self = this;
            self.skImgGame.source = "txt_fenxiang_" + data.game_id;
            //一把翻了     txt_fenxiang_yibafanle
            //一把赢了     txt_fenxiang_yibayingle
            //一炮赚了     txt_fenxiang_yipaozhuanle
            //倍          share@txt_fenxiang_bei
            //元          share@txt_fenxiang_yuan
            if (data.game_id == 1 /* jinchanbuyu */) {
                self.skImgGet.source = "txt_fenxiang_yipaozhuanle";
            }
            else if (data.game_id == 16 /* doudizhu */ || data.game_id == 74 /* bxpDdz */) {
                self.skImgGet.source = "txt_fenxiang_yibafanle";
                self.skimgKind.source = "share@txt_fenxiang_bei";
            }
            if (data.game_id == 16 /* doudizhu */ || data.game_id == 74 /* bxpDdz */) {
                self.skBitMoney.text = data.win_gold.toFixed(2);
            }
            else {
                self.skBitMoney.text = game.DataFormat.convertGoldString5(data.win_gold);
            }
            if (isNaN(data.share_reward) || data.share_reward == 0) {
                self.skBitGold.visible = self.skBitNum.visible = self.skLabTip.visible = false;
            }
            else {
                self.skBitGold.text = game.DataFormat.convertGold(data.share_reward) + "";
                self.skBitGold.visible = self.skBitNum.visible = self.skLabTip.visible = true;
            }
        };
        return AchieveShareDialog;
    }(game.UIPopup));
    game.AchieveShareDialog = AchieveShareDialog;
    __reflect(AchieveShareDialog.prototype, "game.AchieveShareDialog");
})(game || (game = {}));
var game;
(function (game) {
    var ChipTile = (function (_super) {
        __extends(ChipTile, _super);
        function ChipTile() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.width = self.height = 99;
            var image = self.skChip = new cui.Image();
            image.anthorPerX = image.anthorPerY = 0.5;
            self.addChild(image);
            var bitImg = self.skBitImg = new cui.ImageLabel();
            bitImg.font = "customNum";
            bitImg.width = bitImg.height = 99;
            bitImg.textAlign = "center";
            bitImg.anchorOffsetX = 99 / 2;
            bitImg.anchorOffsetY = 99 / 5;
            self.addChild(bitImg);
            return _this;
        }
        /**
         *
         * @param id 筹码下标
         *
         * @param gold 筹码金币
         */
        ChipTile.prototype.setData = function (id, gold, chipTp, isSelfBet) {
            var self = this;
            var customId = game.DataFormat.convertGoldString4(gold);
            self.skChip.source = (chipTp || "custom@" /* customChip */) + id;
            self.skBitImg.text = customId;
            self.isSelfBet = isSelfBet || false;
        };
        ChipTile.prototype.clear = function () {
            var self = this;
            self.scaleX = self.scaleY = 1;
        };
        return ChipTile;
    }(cui.Group));
    game.ChipTile = ChipTile;
    __reflect(ChipTile.prototype, "game.ChipTile");
})(game || (game = {}));
var game;
(function (game) {
    var OpenFWAni = (function (_super) {
        __extends(OpenFWAni, _super);
        function OpenFWAni(tar) {
            var _this = _super.call(this, tar) || this;
            var self = _this;
            var action = new TRain.ActionPropTween(100);
            action.setProps(OpenFWAni.props);
            self.action = action;
            self._props = { touchEnabled: false, x: 0, y: 0, anchorOffsetX: 0, anchorOffsetY: 0, alpha: 1 };
            return _this;
        }
        OpenFWAni.prototype.beforeAni = function () {
            _super.prototype.beforeAni.call(this);
            var props = this._props;
            var tar = this.tar;
            var hw = Math.floor(tar.width / 2);
            var hh = Math.floor(tar.height / 2);
            tar.anchorOffsetX = hw;
            tar.anchorOffsetY = hh;
            tar.x = props.x + hw;
            tar.y = props.y + hh;
            tar.touchEnabled = false;
        };
        OpenFWAni.props = {
            scaleX: { b: 0.9, r: 0.1 },
            scaleY: { b: 0.9, r: 0.1 },
            alpha: { b: 0.3, r: 0.7 }
        };
        return OpenFWAni;
    }(TRain.AniBase));
    game.OpenFWAni = OpenFWAni;
    __reflect(OpenFWAni.prototype, "game.OpenFWAni");
    var CloseFWAni = (function (_super) {
        __extends(CloseFWAni, _super);
        function CloseFWAni(tar) {
            var _this = _super.call(this, tar) || this;
            var self = _this;
            var action = new TRain.ActionPropTween(100);
            action.setProps(CloseFWAni.props);
            self.action = action;
            self._props = { touchEnabled: false, x: 0, y: 0, anchorOffsetX: 0, anchorOffsetY: 0, alpha: 1 };
            return _this;
        }
        CloseFWAni.prototype.beforeAni = function () {
            _super.prototype.beforeAni.call(this);
            var props = this._props;
            var tar = this.tar;
            var hw = Math.floor(tar.width / 2);
            var hh = Math.floor(tar.height / 2);
            tar.anchorOffsetX = hw;
            tar.anchorOffsetY = hh;
            tar.x = props.x + hw;
            tar.y = props.y + hh;
            tar.touchEnabled = false;
        };
        CloseFWAni.props = {
            scaleX: { b: 1, r: -0.1 },
            scaleY: { b: 1, r: -0.1 },
            alpha: { b: 1, r: -0.7 }
        };
        return CloseFWAni;
    }(TRain.AniBase));
    game.CloseFWAni = CloseFWAni;
    __reflect(CloseFWAni.prototype, "game.CloseFWAni");
    var MoveXFWAni = (function (_super) {
        __extends(MoveXFWAni, _super);
        function MoveXFWAni(tar, pent, isOut, isHorizontal) {
            var _this = _super.call(this, tar) || this;
            var self = _this;
            self._props = { touchEnabled: false, x: 0, y: 0 };
            var w = tar.width * (pent / 100);
            var h = tar.height * (pent / 100);
            var x = tar.x;
            var y = tar.y;
            self._isHori = isHorizontal;
            var action = new TRain.ActionPropTween(200);
            action.setEaseFun(EaseUtil.quadOut);
            var b = 0, r = 0;
            if (isHorizontal) {
                if (isOut) {
                    b = x - w;
                    r = w;
                }
                else {
                    b = x;
                    r = -w;
                }
                action.setProps({ x: { b: b, r: r } });
            }
            else {
                if (isOut) {
                    b = y - h;
                    r = h;
                }
                else {
                    b = y;
                    r = -h;
                }
                action.setProps({ y: { b: b, r: r } });
            }
            self.action = action;
            return _this;
        }
        MoveXFWAni.prototype.endAni = function () {
            var self = this;
            var props = self._props;
            var tar = self.tar;
            tar.touchEnabled = props.touchEnabled;
            if (self._isHori) {
                tar.x = props.x;
            }
            else {
                tar.y = props.y;
            }
        };
        return MoveXFWAni;
    }(TRain.AniBase));
    game.MoveXFWAni = MoveXFWAni;
    __reflect(MoveXFWAni.prototype, "game.MoveXFWAni");
    var CloseDoorAni = (function (_super) {
        __extends(CloseDoorAni, _super);
        function CloseDoorAni(leftTar, rightTar, aniTm, data, LHaveAlpha, RHaveAlpha) {
            var _this = _super.call(this, CloseDoorAni) || this;
            var self = _this;
            self._leftTar = leftTar;
            self._rightTar = rightTar;
            self._leftBeginX = data.leftX || leftTar.width;
            self._rightBeginX = data.rightX || rightTar.parent.width;
            self._leftEndX = data.leftEndX || rightTar.x;
            self._rightEndX = data.rightEndX || rightTar.x;
            self._LEndAlpha = leftTar.alpha;
            self._REndAlpha = rightTar.alpha;
            self._LHaveAlpha = LHaveAlpha;
            self._RHaveAlpha = RHaveAlpha;
            self._leftTar.y = data.leftY || leftTar.y;
            self._rightTar.y = data.rightY || rightTar.y;
            var action = new TRain.ActionTweenCall(aniTm);
            action.setEaseFun(EaseUtil.quadOut);
            action.setCall(self.update, self);
            self.action = action;
            return _this;
        }
        CloseDoorAni.prototype.beforeAni = function () {
            _super.prototype.beforeAni.call(this);
            this.update(0);
        };
        CloseDoorAni.prototype.update = function (v) {
            var self = this;
            self._leftTar.x = -self._leftBeginX + v * self._leftEndX;
            self._rightTar.x = self._rightBeginX - v * (self._rightBeginX - self._rightEndX);
            if (self._LHaveAlpha)
                self._leftTar.alpha = v * self._LEndAlpha;
            if (self._RHaveAlpha)
                self._rightTar.alpha = v * self._REndAlpha;
        };
        return CloseDoorAni;
    }(TRain.AniBase));
    game.CloseDoorAni = CloseDoorAni;
    __reflect(CloseDoorAni.prototype, "game.CloseDoorAni");
    var ScrollAni = (function (_super) {
        __extends(ScrollAni, _super);
        function ScrollAni(tar, aniTm, isHorizontal, isOut) {
            var _this = _super.call(this, tar) || this;
            var self = _this;
            self._props = { touchEnabled: false, scrollRect: null };
            self._isHori = isHorizontal;
            self._isOut = isOut;
            self._mask = new egret.Rectangle(0, 0, tar.width, tar.height);
            var action = new TRain.ActionTweenCall(aniTm);
            action.setEaseFun(EaseUtil.quadOut);
            action.setCall(self.update, self);
            self.action = action;
            return _this;
        }
        ScrollAni.prototype.update = function (v) {
            var self = this;
            var mask = self._mask;
            if (self._isOut)
                v = 1 - v;
            if (self._isHori) {
                mask.x = Math.floor(mask.width * v);
            }
            else {
                mask.y = Math.floor(mask.height * v);
            }
            self.tar.scrollRect = mask;
        };
        ScrollAni.prototype.beforeAni = function () {
            _super.prototype.beforeAni.call(this);
            this.update(0);
        };
        return ScrollAni;
    }(TRain.AniBase));
    game.ScrollAni = ScrollAni;
    __reflect(ScrollAni.prototype, "game.ScrollAni");
    var CircleMaskAni = (function (_super) {
        __extends(CircleMaskAni, _super);
        function CircleMaskAni(tar, aniTm, isOut, beginTm, isBeginMask) {
            var _this = _super.call(this, tar) || this;
            beginTm = beginTm || 0;
            aniTm -= beginTm;
            var self = _this;
            self._isOut = isOut;
            self._beginTm = beginTm;
            self._aniTm = aniTm;
            self._isBeginMask = isBeginMask;
            self.centerX = Math.floor(tar.width / 2 + 0.5);
            self.centerY = Math.floor(tar.height / 2 + 0.5);
            self.mask = new egret.Shape();
            var action = new TRain.ActionTweenCall(aniTm);
            action.once = false;
            action.setCall(self.update, self);
            self.action = action;
            return _this;
        }
        CircleMaskAni.prototype.resetBeginTm = function (beTm, aniTm) {
            var self = this;
            self._beginTm = beTm || 0;
            if (aniTm) {
                var action = new TRain.ActionTweenCall(aniTm);
                action.once = false;
                action.setCall(self.update, self);
                self.action = action;
            }
        };
        CircleMaskAni.prototype.update = function (tm) {
            var self = this;
            //从某一个位置开始转
            if (self._beginTm)
                tm = (self._beginTm + self._aniTm * tm) / self._aniTm;
            self._endAngle = self._isOut ? (-90 + tm * 360) : (270 - tm * 360);
            self.drawFan();
        };
        CircleMaskAni.prototype.beforeAni = function () {
            var self = this;
            var tar = self.tar;
            var mask = self.mask;
            self._radius = Math.ceil(Math.sqrt(self.centerX * self.centerX + self.centerY * self.centerY));
            mask.x = tar.x;
            mask.y = tar.y;
            tar.parent.addChild(mask);
            tar.mask = mask;
            self.update(0);
        };
        CircleMaskAni.prototype.endAni = function () {
            var self = this;
            var tar = self.tar;
            tar.parent.removeChild(self.mask);
            tar.mask = null;
        };
        CircleMaskAni.prototype.drawFan = function () {
            var self = this;
            var shape = self.mask;
            var g = shape.graphics;
            g.clear();
            var startAngle = -90;
            var endAngle = self._endAngle;
            if (startAngle == endAngle)
                return;
            if (self._isBeginMask) {
                startAngle = endAngle;
                endAngle = -90;
            }
            var centerX = self.centerX;
            var centerY = self.centerY;
            var radius = self._radius;
            g.beginFill(0xff0000);
            g.moveTo(centerX, centerY);
            var radians = startAngle / 180 * Math.PI;
            var tx = radius * (1 + Math.cos(radians));
            var ty = radius * (1 + Math.sin(radians));
            g.lineTo(tx, ty);
            g.drawArc(centerX, centerY, radius, radians, endAngle / 180 * Math.PI);
            g.lineTo(centerX, centerY);
            g.endFill();
        };
        return CircleMaskAni;
    }(TRain.AniBase));
    game.CircleMaskAni = CircleMaskAni;
    __reflect(CircleMaskAni.prototype, "game.CircleMaskAni");
    var CircleMask = (function () {
        function CircleMask(tar, isOut) {
            var self = this;
            self._isOut = isOut;
            self.centerX = Math.floor(tar.width / 2 + 0.5);
            self.centerY = Math.floor(tar.height / 2 + 0.5);
            self._radius = Math.ceil(Math.sqrt(self.centerX * self.centerX + self.centerY * self.centerY));
            self._tar = tar;
            self._val = 0;
            var mask = self._mask = new egret.Shape();
            tar.parent.addChild(mask);
            tar.mask = mask;
        }
        Object.defineProperty(CircleMask.prototype, "value", {
            //0~100
            set: function (val) {
                val = +val;
                if (val > 100)
                    val = 100;
                var self = this;
                if (self._val == val)
                    return;
                self._val = val;
                //从某一个位置开始转
                var progress = val / 100;
                self._endAngle = self._isOut ? (-90 + progress * 360) : (270 - progress * 360);
                self.drawFan();
            },
            enumerable: true,
            configurable: true
        });
        CircleMask.prototype.dispose = function () {
            var self = this;
            var mask = self._mask;
            if (mask.parent)
                mask.parent.removeChild(mask);
            self._tar.mask = null;
        };
        CircleMask.prototype.drawFan = function () {
            var self = this;
            var shape = self._mask;
            var g = shape.graphics;
            g.clear();
            var startAngle = -90;
            var endAngle = self._endAngle;
            if (startAngle == endAngle)
                return;
            var centerX = self.centerX;
            var centerY = self.centerY;
            var radius = self._radius;
            g.beginFill(0xff0000);
            g.moveTo(centerX, centerY);
            var radians = startAngle / 180 * Math.PI;
            var tx = radius * (1 + Math.cos(radians));
            var ty = radius * (1 + Math.sin(radians));
            g.lineTo(tx, ty);
            g.drawArc(centerX, centerY, radius, radians, endAngle / 180 * Math.PI);
            g.lineTo(centerX, centerY);
            g.endFill();
        };
        return CircleMask;
    }());
    game.CircleMask = CircleMask;
    __reflect(CircleMask.prototype, "game.CircleMask");
    var QuakeAni = (function (_super) {
        __extends(QuakeAni, _super);
        function QuakeAni(tar, aniTm, xRange, yRange) {
            var _this = _super.call(this, tar) || this;
            var self = _this;
            self._props = { x: 0, y: 0 };
            aniTm = aniTm || 400;
            xRange = xRange || 2;
            yRange = yRange || 8;
            var action1 = new TRain.ActionPropTween(aniTm, 1, { x: { b: tar.x, r: xRange } });
            action1.setEaseFun(EaseUtil.waveRandFun);
            var action2 = new TRain.ActionPropTween(aniTm, 1, { y: { b: tar.y, r: yRange } });
            action2.setEaseFun(game.UIUtils.quakeFun);
            self.action = new TRain.ActionSpawn([action1, action2]);
            return _this;
        }
        return QuakeAni;
    }(TRain.AniBase));
    game.QuakeAni = QuakeAni;
    __reflect(QuakeAni.prototype, "game.QuakeAni");
    var StarParticleAni = (function (_super) {
        __extends(StarParticleAni, _super);
        function StarParticleAni(parent, starSource) {
            if (starSource === void 0) { starSource = "common@xing" /* xing */.toString(); }
            var _this = _super.call(this) || this;
            _this._bomName = "Bomb";
            var self = _this;
            self.parent = parent;
            var star = new cui.Image();
            star.anthorPerX = star.anthorPerY = 0.5;
            star.source = starSource;
            var movConf = {
                einte: 16.7,
                emax: -1,
                oneMin: 1,
                oneMax: 0,
                src: "common@star" /* star */,
                anchor: { x: 27, y: 26 },
                prop: {
                    x: { bb: -5, br: 10 },
                    y: { bb: -5, br: 10 },
                    rot: { br: 360, rr: 180 },
                    ttm: { bb: 500, br: 200 },
                    scale: { bb: 1, rb: -0.5 },
                    alpha: { bb: 1, rb: -0.5 }
                }
            };
            // let bomConf = {
            //     einte: 16.7,
            //     emax: 60,
            //     oneMin: 6,
            //     oneMax: 12,
            //     src: confConsts.ComResTp.star,
            //     anchor: { x: 27, y: 26 },
            //     prop: {
            //         dist: { bb: 100, br: 20 },
            //         angle: { br: 360 },
            //         xEase: { bb: "cubicIn" },
            //         yEase: { bb: "cubicIn" },
            //         rot: { br: 360 },
            //         ttm: { bb: 100, br: 300 },
            //         scale: { bb: 2, br: -1.5, rb: -0.5 },
            //         alpha: { bb: 1, rb: -0.3 }
            //     }
            // };
            var sys = self._movsys = new cui.ParticleSys(movConf);
            sys.particleCls = cui.GlobalParticle;
            // sys = self._bomsys = new cui.ParticleSys(bomConf);
            // sys.particleCls = cui.MovParticle;
            var clip = self._bomClip = new cui.UIMovieClip();
            clip.aniName = self._bomName;
            var gp = self.tar = new cui.Group();
            gp.addChild(self._movsys);
            gp.addChild(star);
            var movTm = self._movTm = 1000;
            var movxAct = new TRain.ActionPropTween(movTm, 1, { x: { b: 0, r: 0 } });
            var movyAct = new TRain.ActionPropTween(movTm, 1, { y: { b: 0, r: 0 } });
            movyAct.setEaseFun(EaseUtil.quadIn);
            var step1FinAct = new TRain.ActionCallDo(movTm);
            step1FinAct.once = false;
            step1FinAct.setCall(function () {
                // let bomsys = self._bomsys;
                // self.tar.addChild(bomsys);
                // bomsys.start(StarParticleConst.bomEmitTm);
                var bomClip = self._bomClip;
                self.tar.addChild(bomClip);
                bomClip.gotoAndPlay(0, 1);
            }, self);
            self._movActs = [movxAct, movyAct, step1FinAct];
            var tmAct = new TRain.Action(1000 /* bomTm */);
            var spawnAct = self._spawnAct = new TRain.ActionSpawn(self._movActs);
            self.action = new TRain.ActionSequence([spawnAct, tmAct]);
            return _this;
        }
        StarParticleAni.prototype.clear = function () {
            var tar = this.tar;
            if (tar.parent)
                tar.parent.removeChild(tar);
            tar.dispose();
            _super.prototype.clear.call(this);
        };
        StarParticleAni.prototype.setData = function (from, to) {
            var self = this;
            var offx = from.x - to.x;
            var offy = from.y - to.y;
            var dist = Math.sqrt(offx * offx + offy * offy);
            var movTm = self._movTm = Math.floor(dist * 1.3);
            var acts = self._movActs;
            var movAct = acts[0];
            movAct.addProp("x", from.x, to.x);
            movAct.duration = movTm;
            movAct = acts[1];
            movAct.addProp("y", from.y, to.y);
            movAct.duration = movTm;
            acts[2].duration = movTm;
            self._spawnAct.duration = movTm;
            self.action.duration = movTm + 1000 /* bomTm */;
        };
        StarParticleAni.prototype.beforeAni = function () {
            var self = this;
            // let bomsys = self._bomsys;
            // if (bomsys.parent) bomsys.parent.removeChild(bomsys);
            var bomClip = self._bomClip;
            if (bomClip.parent)
                bomClip.parent.removeChild(bomClip);
            self.parent.addChild(self.tar);
            self._movsys.start(self._movTm);
        };
        StarParticleAni.prototype.endAni = function () {
            var self = this;
            var tar = self.tar;
            if (tar.parent)
                tar.parent.removeChild(tar);
            self._movsys.stop(true);
            // self._bomsys.stop(true);
            self._bomClip.stop();
            _super.prototype.endAni.call(this);
        };
        return StarParticleAni;
    }(TRain.AniBase));
    game.StarParticleAni = StarParticleAni;
    __reflect(StarParticleAni.prototype, "game.StarParticleAni");
})(game || (game = {}));
///<reference path="./ItemTile.ts" />
var game;
(function (game) {
    var CustomTile = (function (_super) {
        __extends(CustomTile, _super);
        function CustomTile() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CustomTile.prototype.hasProp = function (key) {
            if (key == "lab")
                return true;
            return _super.prototype.hasProp.call(this, key);
        };
        Object.defineProperty(CustomTile.prototype, "lab", {
            set: function (val) {
                var ctrl = this.skLab;
                if (ctrl) {
                    ctrl.visible = !!val;
                    ctrl.text = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        return CustomTile;
    }(game.ItemTile));
    game.CustomTile = CustomTile;
    __reflect(CustomTile.prototype, "game.CustomTile");
})(game || (game = {}));
///<reference path="./ItemTile.ts" />
var game;
(function (game) {
    var GameTile = (function (_super) {
        __extends(GameTile, _super);
        function GameTile() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GameTile.prototype.hasProp = function (key) {
            if (key == "state" || key == "hot" || key == "offX" || key == "upState" || key == "power")
                return true;
            return _super.prototype.hasProp.call(this, key);
        };
        GameTile.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skAni.addEventListener("created" /* EVT_CREATED */, self.upLoadBg, self);
        };
        GameTile.prototype.dataChanged = function () {
            var self = this;
            if (self._data) {
                //清除上一个动画
                TRain.actionMgr.rmvActsByTar(self);
                self.visible = true;
                self.skGrp.x = 0;
                self.alpha = 1;
                _super.prototype.dataChanged.call(this);
                self.skBtn.setTarget(function () {
                    self._data.handle.clickTile(self);
                }, self);
            }
            else {
                self.visible = false;
            }
        };
        Object.defineProperty(GameTile.prototype, "ani", {
            set: function (val) {
                var self = this;
                var ctrl = self.skAni;
                if (ctrl && ctrl.dbNm != val) {
                    ctrl.dbNm = val;
                    if (self.skBg) {
                        var url = game.dbMgr.getUrl(val);
                        self.skBg.visible = !RES.getUrlRes(url, "mc" /* MC */);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameTile.prototype, "state", {
            set: function (val) {
                var self = this;
                var isClick = val.isClick;
                if (isClick) {
                    val.isClick = false;
                    // self.visible = false;
                    // let action:TRain.ActionPropDo = new TRain.ActionPropDo(val.tm*100,{visible:true,alpha:0});
                    // let actionProp: TRain.ActionPropTo = new TRain.ActionPropTo(200, 1, {alpha:val.alpha});
                    // actionProp.setEaseFun(EaseUtil.quadIn);
                    // let actionSeq = new TRain.ActionSequence([action, actionProp]);
                    // TRain.actionMgr.addAction(actionSeq,self, false);
                    // if(dataMgr.accMo.isApi){
                    // let moveX = self.x;
                    // self.x += 200;
                    // let arr: Array<TRain.Action> = [];
                    // let action1 = new TRain.Action(val.tm*100);
                    // arr.push(action1);
                    // let action2 = new TRain.ActionPropTo(500, 1, { x: moveX });
                    // action2.setEaseFun(EaseUtil.sineOut);
                    // arr.push(action2);
                    // self.visible = true;
                    // game.UIUtils.startActCB(self, arr, null);
                    // }
                }
            },
            enumerable: true,
            configurable: true
        });
        //是否显示默认icon
        GameTile.prototype.upLoadBg = function () {
            var self = this;
            if (self.skBg) {
                self.skBg.visible = false;
            }
        };
        Object.defineProperty(GameTile.prototype, "hot", {
            set: function (val) {
                this.skHot.visible = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameTile.prototype, "power", {
            set: function (val) {
                if (this.skPower)
                    this.skPower.visible = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameTile.prototype, "offX", {
            set: function (val) {
                var self = this;
                var curOffX = parseInt(val);
                self.skGrp.x += Math.abs(curOffX);
                self.width = self.skGrp.width + Math.abs(curOffX);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameTile.prototype, "upState", {
            set: function (val) {
                var self = this;
                var circleMask = self._circleMask;
                if (!circleMask) {
                    circleMask = self._circleMask = new game.CircleMask(self.skProBar, true);
                }
                var state = val.state || 0 /* NONE */;
                var proVal = val.proBar;
                self.skLoadGrp.visible = (state != 0 /* NONE */);
                self.skProBar.visible = self.skBarNum.visible = (state == 2 /* UPDATING */ && proVal > 0);
                self.skState.visible = (state == 2 /* UPDATING */ && proVal == 0);
                self.skXzBg.visible = state == 2 /* UPDATING */;
                self.skUpdate.visible = state == 1 /* NEED_UPDATE */ || state == 3 /* FAIL */;
                // if(proVal > 0){
                //     self.skState.source = "hall_hall@xzStop";
                // }else{
                // self.skUpdate.visible = true;
                // }
                if (state == 2 /* UPDATING */) {
                    if (proVal == 0) {
                        self.skState.source = "hall_hall@txt_wait";
                    }
                    else {
                        self.skBarNum.text = proVal + "%";
                        circleMask.value = proVal;
                    }
                }
                // else if(state == GMD_UPDATE_STATE.FAIL ){
                //     self.skUpdate.visible = true;
                // }
                //else if(state == GMD_UPDATE_STATE.NONE){ //这里是暂停状态 
                //self.skState.source = "hall_hall@xzStop";
            },
            enumerable: true,
            configurable: true
        });
        GameTile.prototype.dispose = function () {
            var self = this;
            if (self._circleMask) {
                self._circleMask.dispose();
            }
            _super.prototype.dispose.call(this);
        };
        GameTile.props = ["state", "hot", "offX", "upState", "power"];
        return GameTile;
    }(game.ItemTile));
    game.GameTile = GameTile;
    __reflect(GameTile.prototype, "game.GameTile");
})(game || (game = {}));
///<reference path="./ItemTile.ts" />
var game;
(function (game) {
    var GoodRdTile = (function (_super) {
        __extends(GoodRdTile, _super);
        function GoodRdTile() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        GoodRdTile.prototype.hasProp = function (key) {
            if (key == "lab")
                return true;
            return _super.prototype.hasProp.call(this, key);
        };
        Object.defineProperty(GoodRdTile.prototype, "lab", {
            set: function (val) {
                var ctrl = this.skLab;
                if (ctrl) {
                    ctrl.visible = !!val;
                    ctrl.text = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        return GoodRdTile;
    }(game.ItemTile));
    game.GoodRdTile = GoodRdTile;
    __reflect(GoodRdTile.prototype, "game.GoodRdTile");
})(game || (game = {}));
///<reference path="./ItemTile.ts" />
var game;
(function (game) {
    var HeadTile = (function (_super) {
        __extends(HeadTile, _super);
        function HeadTile() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        HeadTile.prototype.hasProp = function (key) {
            if (key == "mk" || key == "lab")
                return true;
            return _super.prototype.hasProp.call(this, key);
        };
        Object.defineProperty(HeadTile.prototype, "mk", {
            set: function (val) {
                var ctrl = this.skMask;
                if (ctrl) {
                    ctrl.visible = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HeadTile.prototype, "lab", {
            set: function (val) {
                var ctrl = this.skLab;
                if (ctrl) {
                    ctrl.visible = !!val;
                    ctrl.textFlow = cui.htmlParser.parse(val);
                }
            },
            enumerable: true,
            configurable: true
        });
        return HeadTile;
    }(game.ItemTile));
    game.HeadTile = HeadTile;
    __reflect(HeadTile.prototype, "game.HeadTile");
})(game || (game = {}));
var game;
(function (game) {
    // export class RoutesTile extends cui.DataItem{
    //     private _tiles:RouteStateTile;
    //     constructor( tileSkinNm:string ){
    //     }
    //     protected dataChanged( datas:any[] ): void{
    //     }
    // }
    var RouteStateTile = (function (_super) {
        __extends(RouteStateTile, _super);
        function RouteStateTile(skinName) {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = skinName;
            self.visible = false;
            return _this;
        }
        // protected onPartAdded(){
        //     let self = this;
        //     // let ctrl = self.skDot;
        //     // if( ctrl && self.getChildIndex(ctrl)) self.removeChild( ctrl );
        //     // ctrl = self.skDot1;
        //     // if( ctrl && self.getChildIndex(ctrl)) self.removeChild( ctrl );
        // }
        RouteStateTile.prototype.hasProp = function (key) {
            return RouteStateTile.props.indexOf(key) >= 0;
        };
        RouteStateTile.prototype.dataChanged = function () {
            if (this._data) {
                this.visible = true;
                _super.prototype.dataChanged.call(this);
            }
            else {
                this.visible = false;
            }
        };
        Object.defineProperty(RouteStateTile.prototype, "r", {
            set: function (val) {
                var ctrl = this.skBg;
                var lastIdx = ctrl.source.lastIndexOf("_");
                var curStr = ctrl.source.slice(0, lastIdx);
                if (ctrl) {
                    ctrl.source = curStr + "_" + val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouteStateTile.prototype, "pt", {
            set: function (val) {
                var ctrl = this.skNum;
                if (ctrl) {
                    var lastIdx = ctrl.source.lastIndexOf("_");
                    var curStr = ctrl.source.slice(0, lastIdx);
                    if (val > 0) {
                        ctrl.visible = true;
                        ctrl.source = curStr + "_" + val;
                        if (!ctrl.parent)
                            this.addChild(ctrl);
                    }
                    else {
                        ctrl.visible = false;
                        if (ctrl.parent)
                            ctrl.parent.removeChild(ctrl);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouteStateTile.prototype, "up", {
            set: function (val) {
                var ctrl = this.skDot;
                if (ctrl) {
                    if (val) {
                        if (!ctrl.parent)
                            this.addChild(ctrl);
                    }
                    else {
                        if (ctrl.parent)
                            ctrl.parent.removeChild(ctrl);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouteStateTile.prototype, "down", {
            set: function (val) {
                var ctrl = this.skDot1;
                if (ctrl) {
                    if (val) {
                        if (!ctrl.parent)
                            this.addChild(ctrl);
                    }
                    else {
                        if (ctrl.parent)
                            ctrl.parent.removeChild(ctrl);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        RouteStateTile.props = ["r", "pt", "up", "down"];
        return RouteStateTile;
    }(cui.UITile));
    game.RouteStateTile = RouteStateTile;
    __reflect(RouteStateTile.prototype, "game.RouteStateTile");
})(game || (game = {}));
var game;
(function (game) {
    var WalletTile = (function (_super) {
        __extends(WalletTile, _super);
        function WalletTile() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WalletTile.prototype.hasProp = function (key) {
            if (key == "nm" || key == "lab")
                return true;
            return _super.prototype.hasProp.call(this, key);
        };
        Object.defineProperty(WalletTile.prototype, "nm", {
            set: function (val) {
                var ctrl = this.skName;
                if (ctrl) {
                    ctrl.visible = !!val;
                    ctrl.textFlow = cui.htmlParser.parse(val);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WalletTile.prototype, "lab", {
            set: function (val) {
                var ctrl = this.skLab;
                if (ctrl) {
                    ctrl.visible = !!val;
                    ctrl.textFlow = cui.htmlParser.parse(val);
                }
            },
            enumerable: true,
            configurable: true
        });
        return WalletTile;
    }(game.ItemTile));
    game.WalletTile = WalletTile;
    __reflect(WalletTile.prototype, "game.WalletTile");
})(game || (game = {}));
var chatProtocols;
(function (chatProtocols) {
    var type;
    (function (type) {
        //normal
        type.c2sSendMessageType = 'c2sSendMessage';
        type.c2sFillMessageType = 'c2sFillMessage';
        type.c2sRequestType = 'c2sRequest';
        type.s2cSendMessageResultType = 's2cSendMessageResult';
        type.s2cFillMessageResultType = 's2cFillMessageResult';
        type.s2cBcMessageType = 's2cBcMessage';
        type.s2cResponseType = 's2cResponse';
    })(type = chatProtocols.type || (chatProtocols.type = {}));
})(chatProtocols || (chatProtocols = {}));
var game;
(function (game) {
    var HttpUtil;
    (function (HttpUtil) {
        function accLogin(args, showBusy, cb, target) {
            var url = md5(args.urlKey);
            var postData = args.nm + ':' + args.channel + ':' + args.agentId + ':' + args.hardwareId + ':' + url + ':' + args.clientIp + ':' + args.packAgeTp;
            reqURL("/Web/WebLogin.aspx", makeSign(postData), showBusy, cb, target);
        }
        HttpUtil.accLogin = accLogin;
        function wxLogin(args, showBusy, cb, target) {
            var url = md5(args.urlKey);
            var postData = args.openid + ':' + args.openSign + ':' + args.nickname + ':' + args.headimgurl + ':' + args.agentId + ':' + args.channel + ':' + args.hardwareId + ':' + url + ':' + args.clientIp + ':' + args.packAgeTp;
            reqURL("/Web/WeChatLogin.aspx", makeSign(postData), showBusy, cb, target);
        }
        HttpUtil.wxLogin = wxLogin;
        function serverList(args, showBusy, cb, target) {
            var postData = makeSign(args.nm);
            reqURL("/Web/ServerList.aspx", postData, showBusy, cb, target);
        }
        HttpUtil.serverList = serverList;
        function checkCode(args, showBusy, cb, target) {
            var postData = args.phone + ':' + args.agentId + ':' + args.opType + ':' + args.channel + ':' + args.playId;
            reqURL("/Web/WebCode.aspx", makeSign(postData), showBusy, cb, target);
        }
        HttpUtil.checkCode = checkCode;
        function resetPwd(args, showBusy, cb, target) {
            var signedPsw = args.pwd;
            var data = args.agentId + ':' + args.hardwareId + ':' + args.channel + ':' + args.phone + ':' + signedPsw + ':' + args.checkcode;
            reqURL("/Web/WebResetPwd.aspx", makeSign(data), showBusy, cb, target);
        }
        HttpUtil.resetPwd = resetPwd;
        function regAcc(args, showBusy, cb, target) {
            var signedPsw = args.pwd;
            var url = md5(args.urlKey);
            var data = args.phone + ':' + args.checkcode + ':' + signedPsw + ':' + args.channel + ':' + args.agentId + ':' + args.hardwareId + ':' + url + ':' + args.clientIp + ':' + args.packAgeTp;
            reqURL("/Web/WebRegAccount.aspx", makeSign(data), showBusy, cb, target);
        }
        HttpUtil.regAcc = regAcc;
        function loginAcc(args, showBusy, cb, target) {
            var signedPsw = args.pwd;
            var url = md5(args.urlKey);
            var data = args.phone + ':' + signedPsw + ':' + args.channel + ':' + args.agentId + ':' + args.hardwareId + ':' + url + ':' + args.clientIp + ':' + args.packAgeTp;
            reqURL("/Web/WebPhoneLogin.aspx", makeSign(data), showBusy, cb, target);
        }
        HttpUtil.loginAcc = loginAcc;
        function bindAcc(args, showBusy, cb, target) {
            var signedPsw = args.pwd;
            var data = args.nm + ':' + args.phone + ':' + args.checkcode + ':' + signedPsw + ':' + args.agentId + ':' + args.hardwareId + ':' + args.channel;
            reqURL("/Web/WebBindAccount.aspx", makeSign(data), showBusy, cb, target);
        }
        HttpUtil.bindAcc = bindAcc;
        function CheckNotice(args, showBusy, cb, target) {
            var data = "agentId=" + args.agentId;
            reqURL("/Server/CheckNotice.aspx", data, showBusy, cb, target);
        }
        HttpUtil.CheckNotice = CheckNotice;
        // export function getIp( showBusy:boolean, cb:Function, target:any ){
        //     reqURL( "/service/getIpInfo.php", "ip=myip", showBusy, cb, target,CONF.taotaoUrl);
        // }
        // export function sendLogInfo(info:any,showBusy:boolean, cb:Function, target:any ){
        //     let data = "info=" + info;
        //     reqURL( "/LogService/LogIpInfo.aspx", data,showBusy, cb, target);
        // }
        /**
         *
         * @param args
         *  playerId 玩家ID，若还没获取到,传空
            hardwareId  设备号,网页端传空
            channelId 包的渠道号
            url  如果是http访问的过程中出错，这里填请求的地址
            error  具体错误内容
            ip  本机IP
            gameId  若是在子游戏内报错,填游戏ID
            gameVer 子游戏版本号
            lobbyVer 大厅版本号
            clientVer 包的版本号
         * @param showBusy
         * @param cb
         * @param target
         */
        function webLogInfo(args) {
            // let baseError = Base64.base64Encode(args.error);
            // let clientVer = CONF.gameVer;
            // let hardwareId = CONF.deviceId;
            // let channel = CONF.channelId;
            // let clientIp = CONF.clientIp;
            // let data = args.playId + ":" + hardwareId + ":" + channel + ":" + "" + ":" + baseError + ":" + clientIp + ":" + args.gameId + ":" +  args.gameVer + ":" + "" + ":" + clientVer ;
            // reqURL( "/LogService/WebErrorInfo.aspx", makeSign(data),false, function(){}, this);
            if (!!CONF.logUrl) {
                var info = args;
                info.clientVer = CONF.gameVer;
                info.channelId = CONF.channelId;
                info.ip = CONF.clientIp;
                info.info = args.error;
                info.deviceId = CONF.deviceId;
                delete args.error;
                var infoStr = Base64.base64Encode(JSON.stringify(info));
                // infoStr = "?value=" + infoStr ;
                // infoStr = JSON.stringify( { records:[{value:infoStr}] } );
                infoStr = encodeURIComponent(infoStr);
                var request = new egret.HttpRequest();
                // request.setRequestHeader("Content-Type","application/json");
                request.open(CONF.logUrl + "?value=" + infoStr, egret.HttpMethod.GET);
                request.send(infoStr);
            }
        }
        HttpUtil.webLogInfo = webLogInfo;
        function channelCfgInfo(args, showBusy, cb, target) {
            var data = args.agentId + ":" + args.channelId;
            reqURL("/Server/GetChannelConfig.aspx", makeSign(data), showBusy, cb, target);
        }
        HttpUtil.channelCfgInfo = channelCfgInfo;
        function gotoKeFu() {
            URLUtil.checkDeviceID(function () {
                var uid = "";
                var uname = "游客";
                var token = "";
                //let avatar = StringUtil.printf(tempUrl, "static/img/female.a384e7e.jpg");
                var avatar = "head_nan_3.png";
                var agentId = CONF.agentId;
                var data = game.dataMgr.accMo.getData();
                var theme = game.GameUtil.getAllSkinId();
                if (data != null) {
                    uid = data.aid.toString();
                    uname = data.nickname;
                    token = data.cs_token;
                    avatar = data.icon_custom;
                }
                //let tempSign = StringUtil.printf(uid, agentId, deviceID, encodeURI(uname), encodeURI(avatar), "3C3831AD16D3A32AD8E26CEB505DB57D");
                var urlCode1 = encodeURIComponent(uname).toLowerCase();
                var urlCode2 = encodeURIComponent(avatar).toLowerCase();
                var tempSign = uid + agentId + CONF.deviceId + urlCode1 + urlCode2 + theme + (CONF.kefuSign || "3C3831AD16D3A32AD8E26CEB505DB57D");
                var sign = md5(tempSign);
                var url = CONF.kefuUrl +
                    "?uid=" + uid +
                    "&uname=" + urlCode1 +
                    "&agentid=" + agentId +
                    "&avatar=" + urlCode2 +
                    "&theme=" + theme +
                    "&sign=" + sign +
                    "&mac=" + CONF.deviceId +
                    "&token=" + token +
                    "&ip=" + CONF.clientIp +
                    "&platform=" + game.GameUtil.os;
                URLUtil.openURL(url, { orientation: "portait", usecache: true, showloading: true });
            });
        }
        HttpUtil.gotoKeFu = gotoKeFu;
        function askCreateImg(args, showBusy, cb, target) {
            var data = Base64.base64Encode(args.link);
            var postData = makeSign(data);
            reqURL("/QrCode/WebCreateQr.aspx", postData, showBusy, cb, target);
        }
        HttpUtil.askCreateImg = askCreateImg;
        function makeSign(data) {
            var sign = md5(data + "8DB1C7CE26C2A748FA3627410DB0FB0F");
            return "data=" + data + "&sign=" + sign;
        }
        function sendLocation() {
            var myID = game.dataMgr.accMo.getData().aid;
            var key = "Location" + myID;
            var val = game.GameUtil.getLocal(key);
            if (val) {
            }
            else {
                URLUtil.getClipboardText(function (datas) {
                    var txt;
                    if (datas) {
                        var temp = URLUtil.getLocationValue(datas);
                        var clipRecommendId = temp.RecommendId || "";
                        var clipChannelId = temp.ChannelId || "";
                        txt = "PlayerId=" + myID + "&PackageChannelId=" + CONF.shareId + "&clipRecommendId=" + clipRecommendId + "&clipChannelId=" + clipChannelId;
                    }
                    else {
                        txt = "PlayerId=" + myID + "&PackageChannelId=" + CONF.shareId;
                    }
                    reqURL("location", txt, false, function () {
                        var tempKey = "myID";
                        game.GameUtil.setLocal(key, tempKey);
                    }, self, CONF.location);
                });
            }
        }
        HttpUtil.sendLocation = sendLocation;
        function reqURL(url, data, showBusy, cb, target, svrUrl) {
            var request = new egret.HttpRequest();
            request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            //request.responseType = egret.HttpResponseType.TEXT;
            request.open((svrUrl || CONF.svrUrl) + url + "?" + data, egret.HttpMethod.GET);
            request.addEventListener(egret.Event.COMPLETE, function (e) {
                if (showBusy && HttpUtil.busyUI)
                    HttpUtil.busyUI.hideBusy();
                var req = e.currentTarget;
                var data = JSON.parse(req.response);
                if (cb)
                    cb.call(target, data);
            }, this);
            request.addEventListener(egret.IOErrorEvent.IO_ERROR, function (e) {
                if (showBusy && HttpUtil.busyUI)
                    HttpUtil.busyUI.hideBusy();
                if (cb)
                    cb.call(target);
            }, this);
            if (showBusy && HttpUtil.busyUI)
                HttpUtil.busyUI.showBusy();
            request.send();
        }
        HttpUtil.reqURL = reqURL;
    })(HttpUtil = game.HttpUtil || (game.HttpUtil = {}));
})(game || (game = {}));
var game;
(function (game) {
    var Net;
    (function (Net) {
        var _conned = false; //已连接成功过
        var _inConning = false;
        var _sockClose = false; //信息失效，需要重新取过token
        var _sock;
        var _tryCnt = 0;
        //let _doReconn:boolean = false;
        var _handles = {};
        function connect() {
            _tryCnt = 0;
            doConnect();
        }
        Net.connect = connect;
        function loginFin(succ) {
            if (_inConning) {
                if (Net.busyUI)
                    Net.busyUI.hideBusy();
                _inConning = false;
            }
            _sockClose = !succ;
            if (succ) {
                _tryCnt = 0;
            }
        }
        Net.loginFin = loginFin;
        function createSock() {
            if (_sock) {
                clearSock();
            }
            _sock = new egret.WebSocket();
            _sock.type = egret.WebSocket.TYPE_BINARY;
            _sock.once(egret.Event.CONNECT, onConnect, Net);
            //_sock.addEventListener(egret.IOErrorEvent.IO_ERROR, onErr, Net);
            _sock.once(egret.Event.CLOSE, onClose, Net);
            _sock.connectByUrl(Net.ip);
        }
        function clearSock() {
            _sock.removeEventListener(egret.Event.CONNECT, onConnect, Net);
            //_sock.removeEventListener(egret.IOErrorEvent.IO_ERROR, onErr, Net);
            _sock.removeEventListener(egret.Event.CLOSE, onClose, Net);
            _sock.removeEventListener(egret.ProgressEvent.SOCKET_DATA, onData, Net);
            _sock.close();
            _sock = null;
        }
        function onConnect() {
            if (true)
                console.log("net connected");
            _conned = true;
            //_inConning = false;
            game.notifiCenter.postEvent("succ" /* CONN_SUCC */);
            _sock.addEventListener(egret.ProgressEvent.SOCKET_DATA, onData, Net);
        }
        // function onErr(){
        //     if(DEBUG) console.log( "net io error tryCnt=" + _tryCnt );
        //     if( _inConning ){
        //         return;
        //     }
        //     TRain.core.addDelayDo( doConnect, Net, 1000+_tryCnt*500 );
        // }
        function onClose() {
            if (_sockClose)
                return;
            game.notifiCenter.postEvent("close" /* CONN_CLOSE */);
            if (_conned) {
                Net.isReCon = true;
                TRain.core.addDelayDo(doConnect, Net, 1000);
            }
            else {
                game.notifiCenter.postEvent("fail" /* CONN_FAIL */);
            }
            if (500 /* connIntervalTime */ > 0) {
                game.GameUtil.sendIntervalTm("Close", 0);
            }
        }
        function doConnect() {
            _tryCnt++;
            if (_tryCnt >= 3) {
                if (Net.busyUI && _inConning)
                    Net.busyUI.hideBusy();
                // if( _doReconn ){
                //     notifiCenter.postEvent( CONN_EVT.CONN_FAIL );
                // }
                // else{
                //     _doReconn = true;
                game.notifiCenter.postEvent("re" /* RECONN */);
                //}
                return;
            }
            if (!_inConning) {
                if (Net.busyUI) {
                    Net.busyUI.hideBusy(); //先关闭上一个，发送消息返回的
                    Net.busyUI.showBusy();
                }
                _inConning = true;
            }
            _sockClose = false;
            if (true)
                console.log("net connect " + Net.ip);
            createSock();
        }
        //---------------------------------------------------
        function regHandle(msgId, handler, tar) {
            _handles[msgId] = { fun: handler, tar: tar };
        }
        Net.regHandle = regHandle;
        function unregHandle(msgId) {
            delete _handles[msgId];
        }
        Net.unregHandle = unregHandle;
        function onData() {
            var buf = new egret.ByteArray();
            buf.endian = egret.Endian.LITTLE_ENDIAN;
            _sock.readBytes(buf);
            var msg = game.Package.decode(buf);
            decodeMsg(msg.id, msg.len, buf);
        }
        function decodeMsg(msgId, len, buf) {
            if (true)
                console.log("receive id=" + msgId);
            var handle = _handles[msgId];
            if (handle) {
                var data = game.Protobuf.decode(msgId, buf.position + len, buf);
                handle.fun.call(handle.tar, data);
            }
            else if (true) {
                egret.log("msg not handle id=" + msgId);
            }
            if (Net.busyUI) {
                if (_waitMsg[msgId]) {
                    _waitMsg[msgId] = 0;
                    Net.busyUI.hideBusy();
                }
            }
        }
        Net.decodeMsg = decodeMsg;
        //----------------------------------------------------
        function _sendMsg(msgId, args) {
            //console.log( "SendMsg msgId=" + msgId + "  args=" + JSON.stringify(args) );
            var buf = new egret.ByteArray();
            buf.endian = egret.Endian.LITTLE_ENDIAN;
            var start = 6;
            buf.position = start;
            game.Protobuf.encode(msgId, args, buf);
            var len = buf.position - start;
            buf.position = 0;
            game.Package.encode(msgId, len, buf);
            _sock.writeBytes(buf);
            _sock.flush();
        }
        function sendMsg(msgId, args) {
            if (!_sock.connected)
                return;
            _sendMsg(msgId, args);
        }
        Net.sendMsg = sendMsg;
        /**
         * 过滤掉 所有在间隔时间内发送的相同消息（即id一样）
         * intervalMaxTm 最长间隔时间
         * */
        var _sameMsgs = {};
        function sendMsgFilter(msgId, args, intervalMaxTm) {
            if (!_sock.connected)
                return;
            var curTm = egret.getTimer();
            var oldTm = _sameMsgs[msgId];
            if (oldTm) {
                if (curTm < oldTm) {
                    return;
                }
            }
            _sameMsgs[msgId] = curTm + intervalMaxTm;
            _sendMsg(msgId, args);
        }
        Net.sendMsgFilter = sendMsgFilter;
        /**
         * 发送消息后进入等待，直到结果消息返回
         * resultMsgId 结果消息
         * */
        var _waitMsg = {};
        function sendMsgWait(msgId, args, resultMsgId) {
            if (!_sock.connected)
                return;
            if (Net.busyUI) {
                _waitMsg[resultMsgId] = 1;
                Net.busyUI.showBusy();
            }
            _sendMsg(msgId, args);
        }
        Net.sendMsgWait = sendMsgWait;
    })(Net = game.Net || (game.Net = {}));
})(game || (game = {}));
var game;
(function (game) {
    var Package;
    (function (Package) {
        function encode(msgId, len, buf) {
            buf.writeInt(msgId);
            buf.writeShort(len);
        }
        Package.encode = encode;
        function decode(data) {
            var msgId = data.readInt();
            var msgLen = data.readShort();
            return { id: msgId, len: msgLen };
        }
        Package.decode = decode;
    })(Package = game.Package || (game.Package = {}));
})(game || (game = {}));
var game;
(function (game) {
    var Protobuf;
    (function (Protobuf) {
        function addEncodeProtos(routeProtos, typeProtos) {
            Encoder.add(routeProtos, typeProtos);
        }
        Protobuf.addEncodeProtos = addEncodeProtos;
        function rmvEncodeProtos(routeProtos, typeProtos) {
            Encoder.rmv(routeProtos, typeProtos);
        }
        Protobuf.rmvEncodeProtos = rmvEncodeProtos;
        function addDecodeProtos(routeProtos, typeProtos) {
            Decoder.add(routeProtos, typeProtos);
        }
        Protobuf.addDecodeProtos = addDecodeProtos;
        function rmvDecodeProtos(routeProtos, typeProtos) {
            Decoder.rmv(routeProtos, typeProtos);
        }
        Protobuf.rmvDecodeProtos = rmvDecodeProtos;
        function encode(msgId, data, buff) {
            return Encoder.encode(msgId, data, buff);
        }
        Protobuf.encode = encode;
        function decode(msgId, len, data) {
            return Decoder.decode(msgId, len, data);
        }
        Protobuf.decode = decode;
        function getProto(protoList, id) {
            for (var i = protoList.length - 1; i >= 0; i--) {
                var tyProtos = protoList[i][id];
                if (tyProtos)
                    return tyProtos;
            }
            return null;
        }
        //--------------------------------------------------------
        var Encoder;
        (function (Encoder) {
            var _routeProtos = [];
            var _tpProtos = [];
            var _tmpProtos = {};
            function add(routeProtos, typeProtos) {
                _routeProtos.push(routeProtos);
                if (typeProtos) {
                    if (true && _tpProtos.length > 0) {
                        for (var key in typeProtos) {
                            if (parseInt(key) < 30) {
                                egret.error("协议错误：请检查协议批处理(.bat)文件中的 游戏ID 是否设置");
                            }
                            break;
                        }
                    }
                    _tpProtos.push(typeProtos);
                }
            }
            Encoder.add = add;
            function rmv(routeProtos, typeProtos) {
                var idx = _routeProtos.indexOf(routeProtos);
                if (idx >= 0)
                    _routeProtos.splice(idx, 1);
                if (typeProtos) {
                    idx = _tpProtos.indexOf(typeProtos);
                    if (idx >= 0) {
                        _tpProtos.splice(idx, 1);
                        _tmpProtos = {};
                    }
                }
            }
            Encoder.rmv = rmv;
            function encode(route, msg, buff) {
                // Get protos from protos map use the route as key
                var protos = getProto(_routeProtos, route);
                if (!protos) {
                    console.error("error: route=" + route + "  protos not exist");
                    return;
                }
                encodeMsg(buff, protos, msg);
                return buff;
            }
            Encoder.encode = encode;
            function encodeMsg(buff, protos, msg) {
                for (var name_3 in msg) {
                    var proto = protos[name_3];
                    if (proto) {
                        var protoTp = proto[1 /* type */];
                        var tag = makeTag(protoTp, proto[0 /* tag */]);
                        var val = msg[name_3];
                        if (proto[3 /* isArr */]) {
                            encodeArray(buff, protoTp, val, tag);
                        }
                        else {
                            Coder.writeUInt32(buff, tag);
                            encodeProp(buff, protoTp, val);
                        }
                    }
                }
            }
            function encodeProp(buff, protoTp, value) {
                switch (protoTp) {
                    case 0 /* uint32 */:
                        Coder.writeUInt32(buff, value);
                        break;
                    case 1 /* int32 */:
                        Coder.writeInt32(buff, value);
                        break;
                    case 2 /* bool */:
                        Coder.writeBool(buff, value);
                        break;
                    case 3 /* int64 */:
                        Coder.writeInt64(buff, value);
                        break;
                    case 5 /* string */:
                        var byteLen = utf8.length(value);
                        Coder.writeUInt32(buff, byteLen);
                        utf8.write(value, buff);
                        break;
                    default:
                        var tmpProtos = getTpProto(protoTp);
                        var subBuff = new egret.ByteArray();
                        encodeMsg(subBuff, tmpProtos, value);
                        Coder.writeUInt32(buff, subBuff.length);
                        buff.writeBytes(subBuff);
                        break;
                }
            }
            function getTpProto(protoTp) {
                var tmpProtos = _tmpProtos[protoTp];
                if (!tmpProtos) {
                    var tpProtos = getProto(_tpProtos, protoTp);
                    tmpProtos = {};
                    for (var key in tpProtos) {
                        var protoInfo = tpProtos[key].slice(0);
                        var protoKey = protoInfo[0];
                        protoInfo[0] = parseInt(key);
                        tmpProtos[protoKey] = protoInfo;
                    }
                    _tmpProtos[protoTp] = tmpProtos;
                }
                return tmpProtos;
            }
            function encodeArray(buff, protoTp, valArr, tag) {
                var i = 0, arrLen = valArr.length;
                //if( protoTp<ProtoType.msgstart ){
                // Coder.writeUInt32(buff, tag);
                // Coder.writeUInt32(buff, arrLen );
                switch (protoTp) {
                    case 0 /* uint32 */:
                        for (; i < arrLen; ++i) {
                            Coder.writeUInt32(buff, tag);
                            Coder.writeUInt32(buff, valArr[i]);
                        }
                        break;
                    case 1 /* int32 */:
                        for (; i < arrLen; ++i) {
                            Coder.writeUInt32(buff, tag);
                            Coder.writeInt32(buff, valArr[i]);
                        }
                        break;
                    case 2 /* bool */:
                        for (; i < arrLen; ++i) {
                            Coder.writeUInt32(buff, tag);
                            Coder.writeBool(buff, valArr[i]);
                        }
                        break;
                    case 3 /* int64 */:
                        for (; i < arrLen; ++i) {
                            Coder.writeUInt32(buff, tag);
                            Coder.writeInt64(buff, valArr[i]);
                        }
                        break;
                    case 5 /* string */:
                        for (; i < arrLen; ++i) {
                            Coder.writeUInt32(buff, tag);
                            var str = valArr[i];
                            var byteLen = utf8.length(str);
                            Coder.writeUInt32(buff, byteLen);
                            utf8.write(str, buff);
                        }
                        break;
                    default:
                        var tmpProtos = getTpProto(protoTp);
                        for (; i < arrLen; ++i) {
                            Coder.writeUInt32(buff, tag);
                            var subBuff = new egret.ByteArray();
                            encodeMsg(subBuff, tmpProtos, valArr[i]);
                            Coder.writeUInt32(buff, subBuff.length);
                            buff.writeBytes(subBuff);
                        }
                }
                //}
                // else{
                //     let tyProtos = _tpProtos[protoTp];
                //     for( ; i<arrLen; ++i ){
                //         Coder.writeVarint32(buff, tag);
                //         encodeMsg(opData, tyProtos, valArr[i]);
                //     }
                // }
            }
            function makeTag(type, tag) {
                var wireTp = 2;
                switch (type) {
                    case 0 /* uint32 */:
                    case 1 /* int32 */:
                    case 2 /* bool */:
                    case 3 /* int64 */:
                        wireTp = 0;
                        break;
                }
                return (tag << 3) | wireTp;
            }
        })(Encoder || (Encoder = {}));
        //----------------------------------------------------------------
        var Decoder;
        (function (Decoder) {
            var _routeProtos = [];
            var _tpProtos = [];
            function add(routeProtos, typeProtos) {
                _routeProtos.push(routeProtos);
                if (typeProtos) {
                    if (true && _tpProtos.length > 0) {
                        for (var key in typeProtos) {
                            if (parseInt(key) < 30) {
                                egret.error("协议错误：请检查协议批处理(.bat)文件中的 游戏ID 是否设置");
                            }
                            break;
                        }
                    }
                    _tpProtos.push(typeProtos);
                }
            }
            Decoder.add = add;
            function rmv(routeProtos, typeProtos) {
                var idx = _routeProtos.indexOf(routeProtos);
                if (idx >= 0)
                    _routeProtos.splice(idx, 1);
                if (typeProtos) {
                    idx = _tpProtos.indexOf(typeProtos);
                    if (idx >= 0)
                        _tpProtos.splice(idx, 1);
                }
            }
            Decoder.rmv = rmv;
            function decode(route, len, buff) {
                var protos = getProto(_routeProtos, route);
                if (!protos) {
                    console.error("error: route=" + route + "  protos not exist");
                    return;
                }
                return decodeMsg(buff, len, protos);
            }
            Decoder.decode = decode;
            function decodeMsg(buff, len, protos) {
                var msg = {};
                while (buff.position < len) {
                    var head = Coder.readUInt32(buff);
                    var tag = head >>> 3;
                    var proto = protos[tag];
                    if (!proto) {
                        // let protoStr = JSON.stringify( protos );
                        // console.error( `error: decodeMsg tag=${tag} not exist  protos=${protoStr}`);
                        skipType(buff, len, head & 7);
                        continue;
                    }
                    var protoTp = proto[1 /* type */];
                    var protoKey = proto[0 /* name */];
                    if (proto[3 /* isArr */]) {
                        //arr length
                        var arr = msg[protoKey];
                        if (!arr) {
                            arr = [];
                            msg[protoKey] = arr;
                        }
                        decodeArr(buff, protoTp, /*head&7*/ 0, arr);
                    }
                    else {
                        msg[protoKey] = decodeProp(buff, protoTp);
                    }
                }
                if (buff.position > len) {
                    buff.position = len;
                }
                return msg;
            }
            function skipType(buff, validLen, wireType) {
                var len = 0;
                switch (wireType) {
                    case 0:
                        while (buff.readUnsignedByte() & 128) {
                            if (buff.position >= validLen)
                                break;
                        }
                        break;
                    case 1:
                        len = 8;
                        break;
                    case 2:
                        len = Coder.readUInt32(buff);
                        break;
                    case 3:
                        do {
                            if ((wireType = Coder.readUInt32(buff) & 7) === 4)
                                break;
                            skipType(buff, validLen, wireType);
                        } while (true);
                        break;
                    case 5:
                        len = 4;
                        break;
                    default:
                        throw Error("invalid wire type " + wireType + " at offset " + buff.position);
                }
                if (len > 0) {
                    var tmpPos = buff.position + len;
                    if (tmpPos > validLen)
                        tmpPos = validLen;
                    buff.position = tmpPos;
                }
            }
            ;
            function decodeProp(buff, tp) {
                var strLen;
                switch (tp) {
                    case 0 /* uint32 */:
                        return Coder.readUInt32(buff);
                    case 1 /* int32 */:
                        return Coder.readInt32(buff);
                    case 2 /* bool */:
                        return Coder.readBool(buff);
                    case 3 /* int64 */:
                        return Coder.readInt64(buff);
                    case 5 /* string */:
                        strLen = Coder.readUInt32(buff);
                        return utf8.read(buff, strLen);
                    case 6 /* bytes */:
                        strLen = Coder.readUInt32(buff);
                        var subBuff = new egret.ByteArray();
                        subBuff.endian = egret.Endian.LITTLE_ENDIAN;
                        buff.readBytes(subBuff, 0, strLen);
                        return subBuff;
                    default:
                        var tyProtos = getProto(_tpProtos, tp);
                        var msgLen = Coder.readUInt32(buff);
                        return decodeMsg(buff, buff.position + msgLen, tyProtos);
                }
            }
            function decodeArr(buff, tp, wireTp, ret) {
                var i = 0, tmpVal;
                if (tp < 10 /* msgstart */) {
                    //if( wireTp!=2 ){
                    ret.push(decodeProp(buff, tp));
                    // }
                    // else{
                    //     let arrLen = Coder.readUInt32( buff );
                    //     switch ( tp ) {
                    //         case ProtoType.uint32:
                    //         case ProtoType.int32:
                    //             for( ;i<arrLen;++i){
                    //                 tmpVal = Coder.readUInt32( buff );
                    //                 ret.push( tmpVal );
                    //             }
                    //             break;
                    //         case ProtoType.int64:
                    //             break;
                    //         case ProtoType.bool:
                    //             for( ;i<arrLen;++i){
                    //                 tmpVal = !!buff.readUnsignedByte();
                    //                 ret.push( tmpVal );
                    //             }
                    //             break;
                    //         case ProtoType.string:
                    //             for( ; i<arrLen; ++i ){
                    //                 let strLen = Coder.readUInt32( buff );
                    //                 tmpVal = utf8.read( buff, strLen );
                    //                 ret.push( tmpVal );
                    //             }
                    //             break;
                    //         }
                    // }
                }
                else {
                    var tyProtos = getProto(_tpProtos, tp);
                    var msgLen = Coder.readUInt32(buff);
                    tmpVal = decodeMsg(buff, buff.position + msgLen, tyProtos);
                    ret.push(tmpVal);
                }
            }
            // function getHead( buff:egret.ByteArray ):number[] {
            //     let tag = Coder.readVarint32( buff );
            //     return [tag & 0x7,tag >> 3];
            // }
        })(Decoder || (Decoder = {}));
    })(Protobuf = game.Protobuf || (game.Protobuf = {}));
    var Coder;
    (function (Coder) {
        function readUInt32(buf) {
            return readVarint32(buf);
        }
        Coder.readUInt32 = readUInt32;
        ;
        function readInt32(buf) {
            return readVarint32(buf) | 0;
        }
        Coder.readInt32 = readInt32;
        ;
        function readBool(buf) {
            return !!buf.readUnsignedByte();
        }
        Coder.readBool = readBool;
        ;
        function readInt64(buf) {
            var bits = readLongVarint(buf);
            return longBits2Num(bits, false);
        }
        Coder.readInt64 = readInt64;
        ;
        function writeUInt32(buf, val) {
            writeVarint32(buf, val);
        }
        Coder.writeUInt32 = writeUInt32;
        function writeInt32(buf, val) {
            if (val < 0) {
                var longBit = num2LongBits(val);
                writeVarint64(buf, longBit);
            }
            else {
                writeVarint32(buf, val);
            }
        }
        Coder.writeInt32 = writeInt32;
        function writeInt64(buf, val) {
            var longBit = num2LongBits(val);
            writeVarint64(buf, longBit);
        }
        Coder.writeInt64 = writeInt64;
        function writeBool(buf, val) {
            buf.writeByte(val ? 1 : 0);
        }
        Coder.writeBool = writeBool;
        ;
        function writeVarint32(buf, val) {
            while (val > 127) {
                buf.writeByte(val & 127 | 128);
                val >>>= 7;
            }
            buf.writeByte(val);
        }
        function writeVarint64(buf, longBit) {
            while (longBit.hi) {
                buf.writeByte(longBit.lo & 127 | 128);
                longBit.lo = (longBit.lo >>> 7 | longBit.hi << 25) >>> 0;
                longBit.hi >>>= 7;
            }
            while (longBit.lo > 127) {
                buf.writeByte(longBit.lo & 127 | 128);
                longBit.lo = longBit.lo >>> 7;
            }
            buf.writeByte(longBit.lo);
        }
        function readVarint32(buf) {
            // let n = 0, m=0, bit=0;
            // while( 1 ){
            //     m = buf.readUnsignedByte();
            //     n = n + ((m&127)<<bit);
            //     if (m < 128) break;
            //     bit += 7;
            // }
            var tmp = buf.readUnsignedByte();
            var value = tmp & 127;
            if (tmp < 128)
                return value;
            tmp = buf.readUnsignedByte();
            value = (value | (tmp & 127) << 7) >>> 0;
            if (tmp < 128)
                return value;
            tmp = buf.readUnsignedByte();
            value = (value | (tmp & 127) << 14) >>> 0;
            if (tmp < 128)
                return value;
            tmp = buf.readUnsignedByte();
            value = (value | (tmp & 127) << 21) >>> 0;
            if (tmp < 128)
                return value;
            tmp = buf.readUnsignedByte();
            value = (value | (tmp & 15) << 28) >>> 0;
            if (tmp < 128)
                return value;
            buf.position += 5;
            return value;
        }
        function readLongVarint(buf) {
            // tends to deopt with local vars for octet etc.
            var bits = { lo: 0, hi: 0 };
            var i = 0, tmp = 0;
            if (buf.length - buf.position > 4) {
                for (; i < 4; ++i) {
                    // 1st..4th
                    tmp = buf.readUnsignedByte();
                    bits.lo = (bits.lo | (tmp & 127) << i * 7) >>> 0;
                    if (tmp < 128)
                        return bits;
                }
                // 5th
                tmp = buf.readUnsignedByte();
                bits.lo = (bits.lo | (tmp & 127) << 28) >>> 0;
                bits.hi = (bits.hi | (tmp & 127) >> 4) >>> 0;
                if (tmp < 128)
                    return bits;
                i = 0;
            }
            else {
                for (; i < 3; ++i) {
                    // 1st..3th
                    tmp = buf.readUnsignedByte();
                    bits.lo = (bits.lo | (tmp & 127) << i * 7) >>> 0;
                    if (tmp < 128)
                        return bits;
                }
                // 4th
                tmp = buf.readUnsignedByte();
                bits.lo = (bits.lo | (tmp & 127) << i * 7) >>> 0;
                return bits;
            }
            if (buf.length - buf.position > 4) {
                for (; i < 5; ++i) {
                    // 6th..10th
                    tmp = buf.readUnsignedByte();
                    bits.hi = (bits.hi | (tmp & 127) << i * 7 + 3) >>> 0;
                    if (tmp < 128)
                        return bits;
                }
            }
            else {
                for (; i < 5; ++i) {
                    // 6th..10th
                    tmp = buf.readUnsignedByte();
                    bits.hi = (bits.hi | (tmp & 127) << i * 7 + 3) >>> 0;
                    if (tmp < 128)
                        return bits;
                }
            }
            /* istanbul ignore next */
            throw Error("invalid varint encoding");
        }
        function longBits2Num(val, isUnsigned) {
            if (!isUnsigned && val.hi >>> 31) {
                var lo = ~val.lo + 1 >>> 0, hi = ~val.hi >>> 0;
                if (!lo)
                    hi = hi + 1 >>> 0;
                return -(lo + hi * 4294967296);
            }
            return val.lo + val.hi * 4294967296;
        }
        ;
        function num2LongBits(value) {
            if (value === 0)
                return { hi: 0, lo: 0 };
            var sign = value < 0;
            if (sign)
                value = -value;
            var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
            if (sign) {
                hi = ~hi >>> 0;
                lo = ~lo >>> 0;
                if (++lo > 4294967295) {
                    lo = 0;
                    if (++hi > 4294967295)
                        hi = 0;
                }
            }
            return { hi: hi, lo: lo };
        }
        ;
    })(Coder || (Coder = {}));
    var utf8;
    (function (utf8) {
        /**
         * Calculates the UTF8 byte length of a string.
         * @param {string} str String
         * @returns {number} Byte length
         */
        function length(str) {
            var len = 0, c = 0;
            for (var i = 0, strLen = str.length; i < strLen; ++i) {
                c = str.charCodeAt(i);
                if (c < 128)
                    len += 1;
                else if (c < 2048)
                    len += 2;
                else if ((c & 0xFC00) === 0xD800 && (str.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
                    ++i;
                    len += 4;
                }
                else
                    len += 3;
            }
            return len;
        }
        utf8.length = length;
        ;
        /**
         * Reads UTF8 bytes as a string.
         * @param {egret.ByteArray} buffer Source buffer
         * @param {number} len Source len
         * @returns {string} String read
         */
        function read(buff, len) {
            if (len < 1)
                return "";
            var end = buff.position + len;
            var i = 0, t = 0;
            var chunk = [];
            var parts = null;
            while (buff.position < end) {
                t = buff.readUnsignedByte();
                if (t < 128)
                    chunk[i++] = t;
                else if (t > 191 && t < 224)
                    chunk[i++] = (t & 31) << 6 | buff.readUnsignedByte() & 63;
                else if (t > 239 && t < 365) {
                    t = ((t & 7) << 18 | (buff.readUnsignedByte() & 63) << 12 | (buff.readUnsignedByte() & 63) << 6 | buff.readUnsignedByte() & 63) - 0x10000;
                    chunk[i++] = 0xD800 + (t >> 10);
                    chunk[i++] = 0xDC00 + (t & 1023);
                }
                else
                    chunk[i++] = (t & 15) << 12 | (buff.readUnsignedByte() & 63) << 6 | buff.readUnsignedByte() & 63;
                if (i > 8191) {
                    (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
                    i = 0;
                }
            }
            if (parts) {
                if (i)
                    parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
                return parts.join("");
            }
            return String.fromCharCode.apply(String, chunk.slice(0, i));
        }
        utf8.read = read;
        ;
        /**
         * Writes a string as UTF8 bytes.
         * @param {string} string Source string
         * @param {egret.ByteArray} buffer Destination buffer
         * @returns {number} Bytes written
         */
        function write(str, buff) {
            var start = buff.position;
            var c1 = 0, c2 = 0; // character 1  character 2
            for (var i = 0, len = str.length; i < len; ++i) {
                c1 = str.charCodeAt(i);
                if (c1 < 128) {
                    buff.writeByte(c1);
                }
                else if (c1 < 2048) {
                    buff.writeByte(c1 >> 6 | 192);
                    buff.writeByte(c1 & 63 | 128);
                }
                else if ((c1 & 0xFC00) === 0xD800 && ((c2 = str.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
                    c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
                    ++i;
                    buff.writeByte(c1 >> 18 | 240);
                    buff.writeByte(c1 >> 12 & 63 | 128);
                    buff.writeByte(c1 >> 6 & 63 | 128);
                    buff.writeByte(c1 & 63 | 128);
                }
                else {
                    buff.writeByte(c1 >> 12 | 224);
                    buff.writeByte(c1 >> 6 & 63 | 128);
                    buff.writeByte(c1 & 63 | 128);
                }
            }
            return buff.position - start;
        }
        utf8.write = write;
        ;
    })(utf8 || (utf8 = {}));
})(game || (game = {}));
var NET_CONF;
(function (NET_CONF) {
    NET_CONF.c2sEncode = { "301": { "packet_id": [1, 0, 1] }, "5001": { "packet_id": [1, 0, 1], "account": [2, 5, 1], "token": [3, 5, 1], "sign": [4, 5, 1], "platform": [5, 5, 1], "login_platform": [6, 5, 1], "machine_code": [7, 5, 1], "machine_type": [8, 5, 1], "channelid": [9, 1, 1] }, "5003": { "packet_id": [1, 0, 1], "channelid": [2, 5, 1] }, "5004": { "packet_id": [1, 0, 1], "gameid": [2, 1, 1], "gamever": [3, 1, 1], "roomid": [4, 1, 1], "unique_id": [5, 5, 1], "roomcard_num": [6, 1, 1], "sel_config": [7, 30027, 1], "game_code": [8, 5, 1] }, "5005": { "packet_id": [1, 0, 1], "command": [2, 5, 1] }, "5006": { "packet_id": [1, 0, 1], "orderid": [2, 5, 1] }, "5007": { "packet_id": [1, 0, 1], "pay_type": [2, 1, 1], "pay_value": [3, 1, 1] }, "5008": { "packet_id": [1, 0, 1] }, "5010": { "packet_id": [1, 0, 1], "headStr": [2, 5, 1] }, "5011": { "packet_id": [1, 0, 1], "nickName": [2, 5, 1] }, "5012": { "packet_id": [1, 0, 1], "sex": [2, 1, 1] }, "5029": { "packet_id": [1, 0, 1], "pwd1": [2, 5, 1], "pwd2": [3, 5, 1] }, "5030": { "packet_id": [1, 0, 1], "gold": [2, 3, 1], "pwd": [3, 5, 1] }, "5031": { "packet_id": [1, 0, 1], "gold": [2, 3, 1], "pwd": [3, 5, 1] }, "5034": { "packet_id": [1, 0, 1], "old_pwd": [2, 5, 1], "new_pwd1": [3, 5, 1], "new_pwd2": [4, 5, 1] }, "5037": { "packet_id": [1, 0, 1] }, "5044": { "packet_id": [1, 0, 1] }, "5058": { "packet_id": [1, 0, 1] }, "5059": { "packet_id": [1, 0, 1], "questid": [2, 1, 1] }, "5066": { "packet_id": [1, 0, 1], "pwd1": [2, 5, 1], "pwd2": [3, 5, 1], "safeCode": [4, 5, 1] }, "5067": { "packet_id": [1, 0, 1], "lastTime": [2, 1, 1] }, "5068": { "packet_id": [1, 0, 1], "pwd": [2, 5, 1] }, "5080": { "packet_id": [1, 0, 1] }, "5081": { "packet_id": [1, 0, 1], "delete_list": [2, 5, 0, 1] }, "5082": { "packet_id": [1, 0, 1], "id": [2, 5, 1] }, "5091": { "packet_id": [1, 0, 1] }, "5092": { "packet_id": [1, 0, 1] }, "5093": { "packet_id": [1, 0, 1], "index": [2, 1, 1] }, "5094": { "packet_id": [1, 0, 1] }, "5097": { "packet_id": [1, 0, 1], "text": [2, 5, 1] }, "5098": { "packet_id": [1, 0, 1] }, "5100": { "packet_id": [1, 0, 1] }, "5111": { "packet_id": [1, 0, 1] }, "5120": { "packet_id": [1, 0, 1] }, "5121": { "packet_id": [1, 0, 1] }, "5122": { "packet_id": [1, 0, 1], "player_id": [2, 1, 1] }, "5123": { "packet_id": [1, 0, 1] }, "5124": { "packet_id": [1, 0, 1], "count": [2, 1, 1], "nick_name": [3, 5, 1] }, "5125": { "packet_id": [1, 0, 1] }, "5126": { "packet_id": [1, 0, 1], "team_id": [3, 1, 1] }, "5127": { "packet_id": [1, 0, 1], "optype": [2, 1, 1], "team_id": [3, 1, 1], "limit": [4, 1, 1], "nick_name": [5, 5, 1] }, "5128": { "packet_id": [1, 0, 1] }, "5129": { "packet_id": [1, 0, 1] }, "5130": { "packet_id": [1, 0, 1] }, "5131": { "packet_id": [1, 0, 1] }, "5132": { "packet_id": [1, 0, 1] }, "5133": { "packet_id": [1, 0, 1] }, "5150": { "packet_id": [1, 0, 1], "skin": [2, 1, 1] }, "5174": { "packet_id": [1, 0, 1], "params": [2, 5, 1], "channel_id": [3, 5, 1] }, "5175": { "packet_id": [1, 0, 1], "game_id": [2, 1, 1] }, "5176": { "packet_id": [1, 0, 1], "game_id": [2, 1, 1] }, "5179": { "packet_id": [1, 0, 1], "guild_id": [2, 1, 1] }, "5182": { "packet_id": [1, 0, 1], "game_id": [2, 1, 1] }, "5184": { "packet_id": [1, 0, 1], "gold": [2, 3, 1] }, "5185": { "packet_id": [1, 0, 1] }, "5186": { "packet_id": [1, 0, 1] }, "5187": { "packet_id": [1, 0, 1] }, "5188": { "packet_id": [1, 0, 1], "ts": [2, 3, 1] }, "5189": { "packet_id": [1, 0, 1] }, "5190": { "packet_id": [1, 0, 1] }, "5192": { "packet_id": [1, 0, 1] }, "5193": { "packet_id": [1, 0, 1], "filte": [2, 1, 1] }, "5194": { "packet_id": [1, 0, 1] }, "5195": { "packet_id": [1, 0, 1], "info": [2, 30062, 1] }, "5196": { "packet_id": [1, 0, 1], "info": [2, 30062, 1] }, "5197": { "packet_id": [1, 0, 1], "info": [2, 30062, 1] }, "5198": { "packet_id": [1, 0, 1] }, "5203": { "packet_id": [1, 0, 1], "game_id": [2, 1, 1] }, "30001": { "packet_id": [1, 0, 1], "playerid": [2, 1, 1], "gameid": [3, 1, 1], "agentid": [4, 1, 1] }, "30002": { "packet_id": [1, 0, 1], "playerid": [2, 1, 1] }, "30003": { "packet_id": [1, 0, 1], "gameid": [2, 1, 1], "idx_st": [3, 1, 1], "count": [4, 1, 1] }, "30004": { "packet_id": [1, 0, 1], "player_id": [2, 1, 1], "guild_id": [3, 1, 1] }, "30005": { "packet_id": [1, 0, 1], "game_id": [2, 1, 1], "log_id": [3, 5, 1] }, "30006": { "packet_id": [1, 0, 1] }, "30007": { "packet_id": [1, 0, 1], "state": [2, 0, 1] }, "40105": { "packet_id": [1, 0, 1] }, "40109": { "packet_id": [1, 0, 1], "skin": [2, 1, 1] }, "50001": { "packet_id": [1, 0, 1], "player_id": [2, 1, 1], "ops": [3, 1, 1], "param": [4, 1, 1] }, "50002": { "packet_id": [1, 0, 1], "ops": [2, 1, 1] }, "50003": { "packet_id": [1, 0, 1], "roomcard_number": [2, 1, 1] }, "50004": { "packet_id": [1, 0, 1], "new_notice": [2, 5, 1] }, "50005": { "packet_id": [1, 0, 1], "new_name": [2, 5, 1] } };
    NET_CONF.s2cDecode = { "401": { "1": ["packet_id", 0, 1], "3": ["msgpaks", 30010, 0, 1] }, "404": { "1": ["packet_id", 0, 1] }, "444": { "1": ["packet_id", 0, 1] }, "7501": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["servertime", 1, 1], "4": ["gaming", 1, 1], "5": ["ver", 5, 1] }, "7503": { "1": ["packet_id", 0, 1], "2": ["account_info", 30012, 1], "3": ["game_list", 30011, 0, 1], "4": ["gaming", 1, 1], "5": ["bind_phone_demo", 2, 1], "6": ["bin_gold", 3, 1], "7": ["benefits_limit", 3, 1], "8": ["benefits_gold", 3, 1], "9": ["benefits_count", 1, 1], "10": ["guild_asks", 30051, 0, 1], "11": ["sort_class", 1, 0, 1] }, "7504": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["result_param", 1, 1], "4": ["server_down_start", 1, 1], "5": ["server_down_end", 1, 1], "6": ["game_id", 1, 1], "7": ["game_url", 5, 1] }, "7505": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7506": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["pay_type", 1, 1], "4": ["pay_value", 1, 1], "5": ["vip_exp", 1, 1], "6": ["orderid", 5, 1] }, "7507": { "1": ["packet_id", 0, 1], "2": ["shutdown", 2, 1], "3": ["result", 1, 1] }, "7509": { "1": ["packet_id", 0, 1], "2": ["headstr", 5, 1], "3": ["result", 1, 1] }, "7510": { "1": ["packet_id", 0, 1], "2": ["nickName", 5, 1], "3": ["result", 1, 1] }, "7511": { "1": ["packet_id", 0, 1], "2": ["sex", 1, 1], "3": ["result", 1, 1] }, "7523": { "1": ["packet_id", 0, 1], "2": ["content", 5, 1], "3": ["notifyType", 1, 1], "4": ["talkerNickName", 5, 1], "5": ["playerId", 1, 1], "6": ["talkerVIPLevel", 1, 1], "7": ["hasMonthCard", 2, 1], "8": ["repCount", 1, 1], "9": ["interval", 1, 1], "10": ["moneyNum", 1, 1] }, "7531": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7532": { "1": ["packet_id", 0, 1], "2": ["gold", 3, 1], "3": ["result", 1, 1] }, "7533": { "1": ["packet_id", 0, 1], "2": ["gold", 3, 1], "3": ["result", 1, 1] }, "7534": { "1": ["packet_id", 0, 1], "2": ["photoFrameId", 1, 1], "3": ["result", 1, 1] }, "7536": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7539": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7541": { "1": ["packet_id", 0, 1], "2": ["kick_type", 1, 1] }, "7548": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7561": { "1": ["packet_id", 0, 1], "2": ["questlist", 30013, 0, 1], "3": ["is_new", 2, 1] }, "7562": { "1": ["packet_id", 0, 1], "2": ["questid", 1, 1], "3": ["result", 1, 1] }, "7563": { "1": ["packet_id", 0, 1], "3": ["qinfo", 30013, 1] }, "7572": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7573": { "1": ["packet_id", 0, 1], "2": ["logList", 30022, 0, 1], "3": ["lastTime", 1, 1] }, "7574": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7586": { "1": ["packet_id", 0, 1], "2": ["result", 2, 1], "3": ["msg_list", 30014, 0, 1] }, "7587": { "1": ["packet_id", 0, 1], "2": ["result", 2, 1] }, "7588": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["id", 5, 1] }, "7589": { "1": ["packet_id", 0, 1], "2": ["reward_gold", 1, 1], "3": ["reward_gold_new", 3, 1] }, "7599": { "1": ["packet_id", 0, 1], "2": ["game_id", 1, 1], "3": ["room_id", 1, 1], "4": ["win_gold", 3, 1], "5": ["share_reward", 1, 1] }, "7600": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["reward", 3, 1] }, "7601": { "1": ["packet_id", 0, 1], "2": ["faq_list", 30016, 0, 1] }, "7602": { "1": ["packet_id", 0, 1], "2": ["faq", 30016, 1] }, "7603": { "1": ["packet_id", 0, 1], "2": ["qq", 5, 1] }, "7606": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["suggest", 30017, 1] }, "7607": { "1": ["packet_id", 0, 1], "2": ["list", 30017, 0, 1] }, "7609": { "1": ["packet_id", 0, 1] }, "7621": { "1": ["packet_id", 0, 1], "2": ["ipinfo", 5, 1] }, "7622": { "1": ["packet_id", 0, 1], "2": ["gold", 3, 1], "3": ["roomcard", 3, 1] }, "7631": { "1": ["packet_id", 0, 1], "2": ["info", 30018, 0, 1] }, "7632": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["gain", 3, 1] }, "7633": { "1": ["packet_id", 0, 1], "2": ["info", 30018, 1] }, "7634": { "1": ["packet_id", 0, 1], "2": ["gain", 3, 1] }, "7635": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["team_id", 1, 1], "4": ["count", 1, 1], "5": ["nick_name", 5, 1], "6": ["code_tag", 1, 1] }, "7636": { "1": ["packet_id", 0, 1], "2": ["teams", 30019, 0, 1] }, "7637": { "1": ["packet_id", 0, 1], "2": ["team", 30019, 0, 1] }, "7638": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["optype", 1, 1], "4": ["team_id", 1, 1], "5": ["code_tag", 1, 1] }, "7639": { "1": ["packet_id", 0, 1], "2": ["commission_today_team", 3, 1], "3": ["commission_today_self", 3, 1], "4": ["commission_today_agent", 3, 1], "5": ["commission_yesterday_team", 3, 1], "6": ["commission_yesterday_self", 3, 1], "7": ["commission_yesterday_agent", 3, 1], "8": ["per_today_team", 3, 1], "9": ["per_today_self", 3, 1], "10": ["per_today_agent", 3, 1], "11": ["per_yesterday_team", 3, 1], "12": ["per_yesterday_self", 3, 1], "13": ["per_yesterday_agent", 3, 1], "14": ["per_today", 3, 1], "15": ["per_this_week", 3, 1], "16": ["rebate_today", 3, 1], "17": ["rebate_this_week", 3, 1], "18": ["per_b_self_today", 3, 1], "19": ["per_b_child_today", 3, 1], "20": ["per_b_self_yesterday", 3, 1], "21": ["per_b_child_yesterday", 3, 1], "22": ["ac", 1, 1], "23": ["ac_inc", 1, 1], "24": ["ac_inc_yd", 1, 1], "25": ["ac_inc_tw", 1, 1], "26": ["ac_inc_lw", 1, 1], "27": ["ac_inc_tm", 1, 1], "28": ["ac_inc_lm", 1, 1], "29": ["parent", 1, 1], "30": ["gain_all", 3, 1], "31": ["ac_inc_dir", 3, 1], "32": ["count_dir", 3, 1] }, "7640": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7641": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7642": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7643": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "7644": { "1": ["packet_id", 0, 1] }, "7660": { "1": ["packet_id", 0, 1], "2": ["viplv", 1, 1], "3": ["vipexp", 3, 1], "4": ["ac_list", 30020, 0, 1] }, "7684": { "1": ["packet_id", 0, 1], "2": ["url", 5, 1] }, "7685": { "1": ["packet_id", 0, 1], "2": ["game_id", 1, 1], "3": ["GameTax", 1, 1], "4": ["LotteryTax", 2, 1], "5": ["LotteryBackzjh1", 1, 1], "6": ["LotteryBackrobcow1", 1, 1], "7": ["LotteryBackrobcow2", 1, 1], "8": ["LotteryBackrobcow3", 1, 1], "9": ["LotteryBackrobcow4", 1, 1], "10": ["room_cfg", 30023, 0, 1] }, "7686": { "1": ["packet_id", 0, 1], "2": ["rates", 30024, 0, 1], "3": ["rebates", 30025, 0, 1] }, "7687": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["server_down_start", 1, 1], "4": ["server_down_end", 1, 1], "5": ["yyhd_enable", 2, 1], "6": ["wxdl_enable", 2, 1] }, "7689": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["param", 1, 1] }, "7690": { "1": ["packet_id", 0, 1], "2": ["id", 1, 1] }, "7692": { "1": ["packet_id", 0, 1], "2": ["guild_id", 1, 1] }, "7693": { "1": ["packet_id", 0, 1], "2": ["record_list", 30053, 0, 1] }, "7694": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["gold", 3, 1] }, "7695": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["gold", 3, 1] }, "7696": { "1": ["packet_id", 0, 1], "2": ["info", 30054, 0, 1] }, "7697": { "1": ["packet_id", 0, 1], "2": ["info", 30055, 0, 1] }, "7698": { "1": ["packet_id", 0, 1], "2": ["info", 30054, 0, 1] }, "7699": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["gain", 3, 1] }, "7701": { "1": ["packet_id", 0, 1], "2": ["filte", 1, 1] }, "7702": { "1": ["packet_id", 0, 1], "2": ["filte", 1, 1] }, "7703": { "1": ["packet_id", 0, 1], "2": ["infos", 30062, 0, 1] }, "7704": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["info", 30062, 1], "4": ["gold", 3, 1], "5": ["err_code", 1, 1] }, "7705": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["info", 30062, 1], "4": ["gold", 3, 1], "5": ["err_code", 1, 1] }, "7706": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["info", 30062, 1] }, "7711": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["info", 30062, 1] }, "19998": { "1": ["packet_id", 0, 1], "2": ["detailid", 5, 1] }, "31001": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "31002": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1] }, "31600": { "1": ["packet_id", 0, 1], "2": ["records", 30028, 0, 1] }, "31601": { "1": ["packet_id", 0, 1], "2": ["replay_deldata", 30032, 1], "3": ["hand_card", 30031, 0, 1], "4": ["ops", 30033, 0, 1], "5": ["hu_data", 30041, 0, 1], "6": ["dice_count", 1, 1], "7": ["banker_user", 1, 1], "8": ["huang_fan_cnt", 1, 1] }, "31602": { "1": ["packet_id", 0, 1], "2": ["replay_deldata", 30032, 1], "3": ["hand_card", 30031, 0, 1], "4": ["ops", 30034, 0, 1], "5": ["card_type", 1, 0, 1], "6": ["banker_user", 1, 1], "7": ["win", 2, 0, 1] }, "31603": { "1": ["packet_id", 0, 1], "2": ["replay_deldata", 30032, 1], "4": ["ops", 30035, 0, 1], "5": ["back_card", 1, 0, 1], "6": ["banker_user", 1, 1], "8": ["task_id", 1, 1], "9": ["total_times", 1, 0, 1], "10": ["spring", 2, 1], "11": ["task_ok", 1, 1] }, "31604": { "1": ["packet_id", 0, 1], "2": ["replay_deldata", 30032, 1], "4": ["banker_user", 1, 1], "5": ["dice_count", 1, 1], "6": ["hand_card", 30031, 0, 1], "7": ["bu_hua", 30036, 0, 1], "8": ["ops", 30037, 0, 1], "9": ["FanType1", 1, 0, 1], "10": ["FanType2", 1, 0, 1], "11": ["FanType3", 1, 0, 1], "12": ["Fan_Cnt", 1, 1], "13": ["Hu_Card", 1, 1] }, "31605": { "1": ["packet_id", 0, 1], "2": ["replay_deldata", 30032, 1], "3": ["hand_card", 30031, 0, 1], "4": ["ops", 30038, 0, 1], "5": ["card_type", 1, 0, 1], "6": ["banker_user", 1, 1] }, "31606": { "1": ["packet_id", 0, 1], "2": ["replay_deldata", 30032, 1], "3": ["hand_card", 30031, 0, 1], "4": ["ops", 30039, 0, 1], "5": ["hu_data", 30040, 0, 1], "6": ["dice_count", 1, 1], "7": ["banker_user", 1, 1], "8": ["huan_type", 1, 1], "9": ["huan_old", 30031, 0, 1], "10": ["huan_new", 30031, 0, 1] }, "31607": { "1": ["packet_id", 0, 1], "2": ["info", 30056, 0, 1] }, "31608": { "1": ["packet_id", 0, 1], "2": ["info_append", 30057, 1] }, "41105": { "1": ["packet_id", 0, 1], "2": ["ac_reward", 3, 1], "3": ["ac_per", 3, 1], "4": ["ac_per_cur", 3, 1], "5": ["log_list", 30021, 0, 1] }, "41109": { "1": ["packet_id", 0, 1], "2": ["ac_list", 30020, 0, 1] }, "50201": { "1": ["packet_id", 0, 1], "2": ["guild_id", 1, 1], "3": ["guild_name", 5, 1], "4": ["roomcard_cnt", 1, 1], "5": ["member", 30044, 0, 1], "6": ["games", 30049, 0, 1], "7": ["guild_notice", 5, 1], "8": ["changed_name", 2, 1] }, "50202": { "1": ["packet_id", 0, 1], "2": ["roomcard_cnt", 1, 1] }, "50203": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["new_name", 5, 1] }, "50204": { "1": ["packet_id", 0, 1], "2": ["member", 30044, 1] }, "50205": { "1": ["packet_id", 0, 1], "2": ["player_id", 1, 1], "3": ["prop", 1, 1], "4": ["value", 1, 1] }, "50206": { "1": ["packet_id", 0, 1], "2": ["ask", 30048, 0, 1] }, "50207": { "1": ["packet_id", 0, 1], "2": ["guild_msg", 30046, 1] }, "50208": { "1": ["packet_id", 0, 1], "2": ["points_msg", 30047, 1] }, "50209": { "1": ["packet_id", 0, 1], "2": ["multi_points", 30050, 0, 1] }, "50210": { "1": ["packet_id", 0, 1], "2": ["room_no", 1, 1], "3": ["player_id", 1, 1], "4": ["game_id", 1, 1], "5": ["sel_config", 30027, 1], "6": ["room_type", 1, 1] }, "50211": { "1": ["packet_id", 0, 1], "2": ["room_no", 1, 1], "3": ["player_id", 1, 1], "4": ["enter", 2, 1] }, "50212": { "1": ["packet_id", 0, 1], "2": ["room_no", 1, 1] }, "50213": { "1": ["packet_id", 0, 1], "2": ["new_notice", 5, 1] }, "50214": { "1": ["packet_id", 0, 1], "2": ["ask", 30048, 0, 1], "3": ["guild_msg", 30046, 0, 1], "4": ["points_msg", 30047, 0, 1], "5": ["expends", 30052, 0, 1] }, "50215": { "1": ["packet_id", 0, 1], "2": ["points_msg", 30047, 0, 1] }, "50216": { "1": ["packet_id", 0, 1], "2": ["expends_msg", 30052, 1] }, "50217": { "1": ["packet_id", 0, 1], "2": ["result", 1, 1], "3": ["param", 1, 1] } };
    NET_CONF.typeDecode = { "30010": { "1": ["msgid", 1, 1], "2": ["msginfo", 6, 1] }, "30011": { "1": ["gameid", 1, 1], "2": ["gamever", 1, 1], "3": ["curOnlineNum", 1, 1], "4": ["isHot", 2, 1], "5": ["sort", 1, 1], "6": ["minVer", 1, 1], "7": ["h5GameVer", 5, 0, 1], "8": ["isPowerful", 2, 1], "9": ["roomcard_config", 30026, 1], "10": ["pure_model", 2, 1], "11": ["wallet", 1, 1] }, "30012": { "1": ["aid", 1, 1], "2": ["channelId", 5, 1], "3": ["nickname", 5, 1], "4": ["gold", 3, 1], "5": ["viplvl", 1, 1], "6": ["vipexp", 1, 1], "8": ["icon_custom", 5, 1], "9": ["sex", 1, 1], "14": ["Ticket", 1, 1], "16": ["curPhotoFrameId", 1, 1], "19": ["payids", 1, 0, 1], "20": ["isSafeDepositBoxPwdEmpty", 2, 1], "21": ["safeBoxGold", 3, 1], "22": ["collected", 1, 1], "26": ["updateNicknameCount", 1, 1], "27": ["isBindMobilePhone", 2, 1], "36": ["create_time", 1, 1], "44": ["Privilege", 1, 1], "46": ["lastGameId", 1, 1], "47": ["isFormal", 2, 1], "48": ["BindInfo", 5, 1], "49": ["RealName", 5, 1], "52": ["Recharged", 1, 1], "53": ["inviter_id", 1, 1], "54": ["water", 1, 1], "55": ["inviter_reward_count", 1, 1], "56": ["withdraw", 1, 1], "57": ["sevenday_done", 2, 1], "58": ["quest_list", 1, 0, 1], "59": ["limit_time_photo", 1, 1], "60": ["ipinfo", 5, 1], "61": ["inviter_reward", 3, 1], "62": ["performance", 3, 1], "63": ["ts_ac_bind", 1, 1], "64": ["can_bind_alipay", 2, 1], "65": ["cs_token", 5, 1], "66": ["LogOutTime", 3, 1], "67": ["bindphone", 5, 1], "68": ["room_card", 3, 1], "69": ["guild_id", 1, 1], "70": ["guild_points", 1, 1], "71": ["join_guild_time", 1, 1], "72": ["acctype", 5, 1], "73": ["wechat_headimg", 5, 1], "74": ["flag_agent_status", 1, 1], "75": ["GuildWeChat", 5, 1], "76": ["rebate_open", 2, 1], "77": ["guild_icon", 2, 1] }, "30013": { "1": ["questid", 1, 1], "2": ["count", 1, 1], "3": ["received", 2, 1] }, "30014": { "1": ["id", 5, 1], "2": ["userId", 1, 1], "3": ["timeValue", 3, 1], "4": ["msgInfo", 5, 1], "5": ["read", 1, 1], "6": ["items", 30015, 0, 1] }, "30015": { "1": ["id", 1, 1], "2": ["count", 1, 1] }, "30016": { "1": ["index", 1, 1], "2": ["text", 5, 1] }, "30017": { "1": ["text", 5, 1], "2": ["time", 3, 1] }, "30018": { "1": ["player_id", 1, 1], "2": ["photo_frame", 1, 1], "3": ["nick_name", 5, 1], "4": ["parent", 1, 1], "5": ["per_today", 3, 1], "6": ["per_yesterday", 3, 1], "7": ["per_sub_today", 3, 1], "8": ["per_sub_yesterday", 3, 1], "9": ["per_tw", 3, 1], "10": ["per_lw", 3, 1], "11": ["per_sub_tw", 3, 1], "12": ["per_sub_lw", 3, 1], "13": ["ts_create", 1, 1], "14": ["ac", 1, 1], "15": ["ac_inc", 1, 1], "16": ["ac_inc_yd", 1, 1], "17": ["ac_inc_tw", 1, 1], "18": ["ac_inc_lw", 1, 1], "19": ["ac_inc_tm", 1, 1], "20": ["ac_inc_lm", 1, 1], "21": ["gain_yd", 3, 1], "22": ["gain_tw", 3, 1], "23": ["gain_lw", 3, 1], "24": ["gain", 3, 1] }, "30019": { "1": ["id", 1, 1], "2": ["name", 5, 1], "3": ["count", 1, 1], "4": ["count_limit", 1, 1], "5": ["code_tag", 1, 1], "6": ["ac_inc", 1, 1], "7": ["member_infos", 30018, 0, 1] }, "30020": { "1": ["Uid", 1, 1], "2": ["Aid", 1, 1], "3": ["Tid", 1, 1], "4": ["Title", 5, 1], "5": ["indexSort", 1, 1] }, "30021": { "1": ["uid", 1, 1], "2": ["ts", 3, 1], "3": ["reward", 3, 1], "4": ["per", 3, 1], "5": ["Title", 5, 1] }, "30022": { "1": ["time", 1, 1], "2": ["gold", 3, 1], "3": ["player_gold", 3, 1] }, "30023": { "1": ["RoomID", 1, 1], "2": ["unique_id", 5, 1], "3": ["BankerCondition", 3, 1], "4": ["FirstBankerCost", 3, 1], "5": ["AddBankerCost", 3, 1], "6": ["AutoLeaveBanker", 3, 1], "7": ["PlayerMaxCount", 3, 1], "8": ["GoldCondition", 3, 1], "9": ["BetCondition", 3, 1], "10": ["BaseGold", 3, 1], "11": ["WeightList", 3, 0, 1], "12": ["BetLimit", 3, 0, 1], "13": ["BetRange", 3, 0, 1], "14": ["customList", 3, 0, 1], "15": ["platList", 3, 0, 1], "16": ["RoomName", 5, 1], "17": ["RoomIDTxt", 5, 1], "18": ["RoomType", 1, 1], "19": ["RoomNmType", 1, 1], "20": ["CarryRest", 1, 1], "21": ["BigBlind", 1, 1], "22": ["SmallBlind", 1, 1], "23": ["RateList", 1, 0, 1], "24": ["FreeGold", 1, 1], "25": ["MaxAnte", 1, 1], "26": ["HuaGold", 1, 1], "27": ["isBankerOn", 2, 1] }, "30024": { "1": ["gameid", 1, 1], "2": ["performancerate", 3, 1], "3": ["desc", 5, 1] }, "30025": { "1": ["pbutton", 3, 1], "2": ["ptop", 3, 1], "3": ["rate", 3, 1], "4": ["desc", 5, 1] }, "30026": { "1": ["game_id", 1, 1], "2": ["base_golds", 1, 0, 1], "3": ["durations", 1, 0, 1], "4": ["models", 1, 0, 1], "5": ["types", 1, 0, 1], "6": ["rate_limits", 1, 0, 1], "7": ["rounds", 1, 0, 1], "8": ["cost_counts", 1, 0, 1], "9": ["player_counts", 1, 0, 1], "10": ["small_blinds", 1, 0, 1], "11": ["big_blinds", 1, 0, 1], "12": ["hua_golds", 1, 0, 1], "13": ["gold_conditions", 1, 0, 1], "14": ["room_type", 1, 1] }, "30027": { "1": ["game_id", 1, 1], "2": ["base_gold", 1, 1], "3": ["duration", 1, 1], "4": ["model", 1, 1], "5": ["type", 1, 0, 1], "6": ["rate_limit", 1, 1], "7": ["round", 1, 1], "8": ["cost_count", 1, 1], "9": ["player_count", 1, 1], "10": ["small_blind", 1, 1], "11": ["big_blind", 1, 1], "12": ["hua_gold", 1, 1], "13": ["gold_condition", 1, 1] }, "30028": { "1": ["game_id", 1, 1], "2": ["table_id", 1, 1], "3": ["rounds_cnt", 1, 1], "4": ["begin_time", 1, 1], "5": ["players", 30029, 0, 1], "6": ["rounds", 30030, 0, 1], "7": ["base_score", 1, 1] }, "30029": { "1": ["player_id", 1, 1], "2": ["player_name", 5, 1], "3": ["head_frame", 1, 1], "4": ["head_custom", 5, 1], "5": ["player_sex", 1, 1], "6": ["vip_level", 1, 1], "7": ["player_win", 1, 1] }, "30030": { "1": ["player_win", 1, 0, 1], "2": ["log_id", 5, 1] }, "30031": { "1": ["cards", 1, 0, 1] }, "30032": { "1": ["dismiss", 2, 1], "2": ["detail_id", 5, 1], "3": ["StartGold", 3, 0, 1], "4": ["win_limited", 2, 0, 1], "5": ["low_limited", 2, 0, 1] }, "30033": { "1": ["player_id", 1, 1], "2": ["operate_id", 1, 1], "3": ["card", 1, 1], "4": ["confirm", 2, 1], "5": ["first_bu_hua", 1, 0, 1] }, "30034": { "1": ["player_id", 1, 1], "2": ["operate_id", 1, 1], "3": ["operate_param", 1, 1] }, "30035": { "1": ["player_id", 1, 1], "2": ["operate_id", 1, 1], "3": ["operate_param", 1, 0, 1] }, "30036": { "1": ["player_id", 1, 1], "2": ["hua_cards", 1, 0, 1], "3": ["bu_cards", 1, 0, 1] }, "30037": { "1": ["player_id", 1, 1], "2": ["operate_id", 1, 1], "3": ["card", 1, 1] }, "30038": { "1": ["player_id", 1, 1], "2": ["operate_id", 1, 1], "3": ["operate_param", 1, 1] }, "30039": { "1": ["player_id", 1, 1], "2": ["operate_id", 1, 1], "3": ["card", 1, 1], "4": ["con", 2, 1] }, "30040": { "1": ["win_idx", 1, 1], "2": ["win_account", 1, 1], "3": ["win_limited", 2, 1], "4": ["lose", 30043, 0, 1], "5": ["fan_cnt", 1, 1], "6": ["result1", 0, 0, 1], "7": ["result2", 0, 0, 1], "8": ["result3", 0, 0, 1], "9": ["win_root_cnt", 1, 1], "10": ["user_action", 1, 1] }, "30041": { "1": ["win_idx", 1, 1], "2": ["win_total", 1, 1], "3": ["win_account", 1, 1], "4": ["win_limited", 2, 1], "5": ["lose", 30042, 0, 1], "6": ["fan_cnt", 1, 1], "7": ["result1", 0, 0, 1], "8": ["result2", 0, 0, 1], "9": ["result3", 0, 0, 1], "10": ["hua_di", 1, 1] }, "30042": { "1": ["lose_idx", 1, 1], "2": ["lose_total", 1, 1], "3": ["lose_account", 1, 1], "4": ["lose_limited", 2, 1] }, "30043": { "1": ["lose_idx", 1, 1], "2": ["lose_account", 1, 1], "3": ["lose_limited", 2, 1] }, "30044": { "1": ["player", 30045, 1], "2": ["points", 1, 1], "3": ["online", 2, 1], "4": ["gaming_id", 1, 1] }, "30045": { "1": ["player_id", 1, 1], "2": ["player_name", 5, 1], "3": ["head_frame", 1, 1], "4": ["head_custom", 5, 1], "5": ["player_sex", 1, 1], "6": ["vip_level", 1, 1] }, "30046": { "1": ["player", 30045, 1], "2": ["time", 1, 1], "3": ["msg", 1, 1] }, "30047": { "1": ["player", 30045, 1], "2": ["time", 1, 1], "3": ["points", 1, 1] }, "30048": { "1": ["player", 30045, 1], "2": ["time", 1, 1] }, "30049": { "1": ["room_no", 1, 1], "2": ["game_id", 1, 1], "3": ["players", 1, 0, 1], "4": ["sel_config", 30027, 1], "5": ["room_type", 1, 1], "6": ["create_time", 1, 1] }, "30050": { "1": ["player_id", 1, 1], "2": ["points", 1, 1] }, "30051": { "1": ["time", 1, 1], "2": ["guild_id", 1, 1], "3": ["ask_status", 1, 1] }, "30052": { "1": ["player", 30045, 1], "2": ["time", 1, 1], "3": ["game_id", 1, 1], "4": ["roomcard_cnt", 1, 1] }, "30053": { "1": ["log_id", 5, 1], "2": ["game_id", 1, 1], "3": ["room_id", 1, 1], "4": ["room_id_txt", 5, 1], "5": ["room_name_type", 1, 1], "6": ["old_gold", 3, 1], "7": ["new_gold", 3, 1], "8": ["add_gold", 3, 1], "9": ["bet_gold", 3, 1], "10": ["win_gold", 3, 1], "11": ["profit_gold", 3, 1], "12": ["reason", 1, 1], "13": ["log_time", 3, 1] }, "30054": { "1": ["gameid", 1, 1], "2": ["bet", 3, 1], "3": ["rebate", 3, 1] }, "30055": { "1": ["bet", 3, 1], "2": ["rebate", 3, 1], "3": ["ts", 1, 1] }, "30056": { "1": ["gameid", 1, 1], "2": ["roomid", 1, 1], "3": ["handicapid", 1, 1], "4": ["haolu_type", 1, 1], "5": ["flag", 2, 1], "6": ["result_2", 2, 0, 1], "7": ["result_3", 1, 0, 1] }, "30057": { "1": ["agentid", 1, 1], "2": ["gameid", 1, 1], "3": ["roomid", 1, 1], "4": ["hand", 30058, 0, 1] }, "30058": { "1": ["handicapid", 1, 1], "2": ["result", 1, 1], "3": ["type", 1, 1] }, "30059": { "1": ["gameid", 1, 1], "2": ["flag_type", 2, 1], "3": ["room", 30060, 0, 1] }, "30060": { "1": ["roomid", 1, 1], "2": ["handicap", 30061, 0, 1] }, "30061": { "1": ["handicapid", 1, 1], "2": ["result_src", 1, 0, 1], "3": ["result_3", 1, 0, 1], "4": ["result_2", 2, 0, 1], "5": ["haolu_type", 1, 1] }, "30062": { "1": ["game_id", 1, 1], "2": ["gold", 3, 1] } };
})(NET_CONF || (NET_CONF = {}));
var Base64;
(function (Base64) {
    //----------------base64--------------
    var base64Tab = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
        'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
        'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
        'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
        'w', 'x', 'y', 'z', '0', '1', '2', '3',
        '4', '5', '6', '7', '8', '9', '+', '/'];
    function base64Encode(str) {
        var utf8 = utf16TpUtf8(str); // 转成UTF8
        var i = 0; // 遍历索引
        var len = utf8.length;
        var res = [];
        var table = base64Tab;
        while (i < len) {
            var c1 = utf8.charCodeAt(i++) & 0xFF;
            res.push(table[c1 >> 2]);
            // 需要补2个=
            if (i == len) {
                res.push(table[(c1 & 0x3) << 4]);
                res.push('==');
                break;
            }
            var c2 = utf8.charCodeAt(i++);
            // 需要补1个=
            if (i == len) {
                res.push(table[((c1 & 0x3) << 4) | ((c2 >> 4) & 0x0F)]);
                res.push(table[(c2 & 0x0F) << 2]);
                res.push('=');
                break;
            }
            var c3 = utf8.charCodeAt(i++);
            res.push(table[((c1 & 0x3) << 4) | ((c2 >> 4) & 0x0F)]);
            res.push(table[((c2 & 0x0F) << 2) | ((c3 & 0xC0) >> 6)]);
            res.push(table[c3 & 0x3F]);
        }
        return res.join('');
    }
    Base64.base64Encode = base64Encode;
    function decode(str) {
        var len = str.length;
        var i = 0;
        var res = [];
        var table = base64Tab;
        while (i < len) {
            var code1 = table.indexOf(str.charAt(i++));
            var code2 = table.indexOf(str.charAt(i++));
            var code3 = table.indexOf(str.charAt(i++));
            var code4 = table.indexOf(str.charAt(i++));
            var c1 = (code1 << 2) | (code2 >> 4);
            var c2 = ((code2 & 0xF) << 4) | (code3 >> 2);
            var c3 = ((code3 & 0x3) << 6) | code4;
            res.push(String.fromCharCode(c1));
            if (code3 != 64) {
                res.push(String.fromCharCode(c2));
            }
            if (code4 != 64) {
                res.push(String.fromCharCode(c3));
            }
        }
        return utf8TpUtf16(res.join(''));
    }
    Base64.decode = decode;
    function utf16TpUtf8(str) {
        var res = [], len = str.length;
        for (var i = 0; i < len; i++) {
            var code = str.charCodeAt(i);
            if (code > 0x0000 && code <= 0x007F) {
                // 单字节，这里并不考虑0x0000，因为它是空字节
                // U+00000000 – U+0000007F  0xxxxxxx
                res.push(str.charAt(i));
            }
            else if (code >= 0x0080 && code <= 0x07FF) {
                // 双字节
                // U+00000080 – U+000007FF  110xxxxx 10xxxxxx
                // 110xxxxx
                var byte1 = 0xC0 | ((code >> 6) & 0x1F);
                // 10xxxxxx
                var byte2 = 0x80 | (code & 0x3F);
                res.push(String.fromCharCode(byte1), String.fromCharCode(byte2));
            }
            else if (code >= 0x0800 && code <= 0xFFFF) {
                // 三字节
                // U+00000800 – U+0000FFFF  1110xxxx 10xxxxxx 10xxxxxx
                // 1110xxxx
                var byte1 = 0xE0 | ((code >> 12) & 0x0F);
                // 10xxxxxx
                var byte2 = 0x80 | ((code >> 6) & 0x3F);
                // 10xxxxxx
                var byte3 = 0x80 | (code & 0x3F);
                res.push(String.fromCharCode(byte1), String.fromCharCode(byte2), String.fromCharCode(byte3));
            }
            else if (code >= 0x00010000 && code <= 0x001FFFFF) {
                // 四字节
                // U+00010000 – U+001FFFFF  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
            }
            else if (code >= 0x00200000 && code <= 0x03FFFFFF) {
                // 五字节
                // U+00200000 – U+03FFFFFF  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
            }
            else {
                // 六字节
                // U+04000000 – U+7FFFFFFF  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
            }
        }
        return res.join('');
    }
    function utf8TpUtf16(str) {
        var res = [], len = str.length, utf16;
        for (var i = 0; i < len; i++) {
            var code = str.charCodeAt(i);
            // 对第一个字节进行判断
            if (((code >> 7) & 0xFF) == 0x0) {
                // 单字节
                // 0xxxxxxx
                res.push(str.charAt(i));
            }
            else if (((code >> 5) & 0xFF) == 0x6) {
                // 双字节
                // 110xxxxx 10xxxxxx
                var code2 = str.charCodeAt(++i);
                var byte1 = (code & 0x1F) << 6;
                var byte2 = code2 & 0x3F;
                utf16 = byte1 | byte2;
                res.push(String.fromCharCode(utf16));
            }
            else if (((code >> 4) & 0xFF) == 0xE) {
                // 三字节
                // 1110xxxx 10xxxxxx 10xxxxxx
                var code2 = str.charCodeAt(++i);
                var code3 = str.charCodeAt(++i);
                var byte1 = (code << 4) | ((code2 >> 2) & 0x0F);
                var byte2 = ((code2 & 0x03) << 6) | (code3 & 0x3F);
                utf16 = ((byte1 & 0x00FF) << 8) | byte2;
                res.push(String.fromCharCode(utf16));
            }
            else if (((code >> 3) & 0xFF) == 0x1E) {
                // 四字节
                // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
            }
            else if (((code >> 2) & 0xFF) == 0x3E) {
                // 五字节
                // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
            }
            else {
                // 六字节
                // 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx
            }
        }
        return res.join('');
    }
})(Base64 || (Base64 = {}));
var CacheUtil;
(function (CacheUtil) {
    var _arrs = [];
    function getArr() {
        return _arrs.length > 0 ? _arrs.pop() : [];
    }
    CacheUtil.getArr = getArr;
    function freeArr(arr) {
        arr.length = 0;
        if (_arrs.length < 100) {
            _arrs.push(arr);
        }
    }
    CacheUtil.freeArr = freeArr;
})(CacheUtil || (CacheUtil = {}));
/*
* name;
*/
function md5(string) {
    function md5_RotateLeft(lValue, iShiftBits) {
        return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
    }
    function md5_AddUnsigned(lX, lY) {
        var lX4, lY4, lX8, lY8, lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            }
            else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        }
        else {
            return (lResult ^ lX8 ^ lY8);
        }
    }
    function md5_F(x, y, z) {
        return (x & y) | ((~x) & z);
    }
    function md5_G(x, y, z) {
        return (x & z) | (y & (~z));
    }
    function md5_H(x, y, z) {
        return (x ^ y ^ z);
    }
    function md5_I(x, y, z) {
        return (y ^ (x | (~z)));
    }
    function md5_FF(a, b, c, d, x, s, ac) {
        a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_F(b, c, d), x), ac));
        return md5_AddUnsigned(md5_RotateLeft(a, s), b);
    }
    ;
    function md5_GG(a, b, c, d, x, s, ac) {
        a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_G(b, c, d), x), ac));
        return md5_AddUnsigned(md5_RotateLeft(a, s), b);
    }
    ;
    function md5_HH(a, b, c, d, x, s, ac) {
        a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_H(b, c, d), x), ac));
        return md5_AddUnsigned(md5_RotateLeft(a, s), b);
    }
    ;
    function md5_II(a, b, c, d, x, s, ac) {
        a = md5_AddUnsigned(a, md5_AddUnsigned(md5_AddUnsigned(md5_I(b, c, d), x), ac));
        return md5_AddUnsigned(md5_RotateLeft(a, s), b);
    }
    ;
    function md5_ConvertToWordArray(string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWords_temp1 = lMessageLength + 8;
        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
        var lWordArray = Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while (lByteCount < lMessageLength) {
            lWordCount = (lByteCount - (lByteCount % 4)) / 4;
            lBytePosition = (lByteCount % 4) * 8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount - (lByteCount % 4)) / 4;
        lBytePosition = (lByteCount % 4) * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);
        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray;
    }
    ;
    function md5_WordToHex(lValue) {
        var WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
        for (lCount = 0; lCount <= 3; lCount++) {
            lByte = (lValue >>> (lCount * 8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
        }
        return WordToHexValue;
    }
    ;
    function md5_Utf8Encode(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    }
    ;
    var x = Array();
    var k, AA, BB, CC, DD, a, b, c, d;
    var S11 = 7, S12 = 12, S13 = 17, S14 = 22;
    var S21 = 5, S22 = 9, S23 = 14, S24 = 20;
    var S31 = 4, S32 = 11, S33 = 16, S34 = 23;
    var S41 = 6, S42 = 10, S43 = 15, S44 = 21;
    string = md5_Utf8Encode(string);
    x = md5_ConvertToWordArray(string);
    a = 0x67452301;
    b = 0xEFCDAB89;
    c = 0x98BADCFE;
    d = 0x10325476;
    for (k = 0; k < x.length; k += 16) {
        AA = a;
        BB = b;
        CC = c;
        DD = d;
        a = md5_FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
        d = md5_FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
        c = md5_FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
        b = md5_FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
        a = md5_FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
        d = md5_FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
        c = md5_FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
        b = md5_FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
        a = md5_FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
        d = md5_FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
        c = md5_FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
        b = md5_FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
        a = md5_FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
        d = md5_FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
        c = md5_FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
        b = md5_FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
        a = md5_GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
        d = md5_GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
        c = md5_GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
        b = md5_GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
        a = md5_GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
        d = md5_GG(d, a, b, c, x[k + 10], S22, 0x2441453);
        c = md5_GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
        b = md5_GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
        a = md5_GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
        d = md5_GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
        c = md5_GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
        b = md5_GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
        a = md5_GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
        d = md5_GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
        c = md5_GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
        b = md5_GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
        a = md5_HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
        d = md5_HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
        c = md5_HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
        b = md5_HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
        a = md5_HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
        d = md5_HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
        c = md5_HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
        b = md5_HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
        a = md5_HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
        d = md5_HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
        c = md5_HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
        b = md5_HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
        a = md5_HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
        d = md5_HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
        c = md5_HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
        b = md5_HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
        a = md5_II(a, b, c, d, x[k + 0], S41, 0xF4292244);
        d = md5_II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
        c = md5_II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
        b = md5_II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
        a = md5_II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
        d = md5_II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
        c = md5_II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
        b = md5_II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
        a = md5_II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
        d = md5_II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
        c = md5_II(c, d, a, b, x[k + 6], S43, 0xA3014314);
        b = md5_II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
        a = md5_II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
        d = md5_II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
        c = md5_II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
        b = md5_II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
        a = md5_AddUnsigned(a, AA);
        b = md5_AddUnsigned(b, BB);
        c = md5_AddUnsigned(c, CC);
        d = md5_AddUnsigned(d, DD);
    }
    return (md5_WordToHex(a) + md5_WordToHex(b) + md5_WordToHex(c) + md5_WordToHex(d)).toUpperCase();
}
// function loginEncrypt(accountName : string, password : string, code : string = "", param1 : string = "", param2 : string = "")
// {
//     var deviceID = "9646BD29066FC6B79863ECF04D3C5EB7";
// } 
var StringUtil;
(function (StringUtil) {
    /**
     * 字符串补全。
     * @param src
     * @param fillStr
     * @param isPre
     * @returns {*}
     */
    function fill(src, fillStr, isPre) {
        if (isPre === void 0) {
            isPre = true;
        }
        src = src + "";
        var sl = src.length, fl = fillStr.length;
        if (sl >= fl)
            return src;
        if (isPre) {
            return fillStr.substring(0, fl - sl) + src;
        }
        else {
            return src + fillStr.substring(sl);
        }
    }
    StringUtil.fill = fill;
    /**
     * 格式化字符串
     * */
    function format(str) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        var num = arguments.length;
        for (var i = 1; i < num; i++) {
            var pattern = "\\{" + (i - 1) + "\\}";
            var re = new RegExp(pattern, "g");
            str = str.replace(re, arguments[i]);
        }
        return str;
    }
    StringUtil.format = format;
    /**
     * 替换字符串，将字符串中%s\%d\%f等 使用后续的参数进行替换
     * @param str 要替换的字符串
     * @param ...rest 后续要进行替换的参数
     * @returns 替换结果后的字符串
     **/
    var _regexp = new RegExp("(%([%]|(\\-)?(\\+| )?(0)?(\\d+)?(\\.(\\d)?)?([bcdfosxX])))", "g");
    function printf(str) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        if (!str)
            return "";
        var matches = new Array();
        var strings = new Array();
        var convCount = 0;
        var stringPosStart = 0;
        var stringPosEnd = 0;
        var matchPosEnd = 0;
        var newString = '';
        var match;
        while (match = _regexp.exec(str)) {
            if (match[9]) {
                convCount += 1;
            }
            stringPosStart = matchPosEnd;
            stringPosEnd = _regexp.lastIndex - match[0].length;
            strings.push(str.substring(stringPosStart, stringPosEnd));
            matchPosEnd = _regexp.lastIndex;
            matches.push({
                match: match[0],
                left: match[3] ? true : false,
                sign: match[4] || '',
                pad: match[5] || ' ',
                min: match[6] || 0,
                precision: match[8],
                code: match[9] || '%',
                negative: parseInt(arguments[convCount]) < 0 ? true : false,
                argument: String(arguments[convCount])
            });
        }
        strings[strings.length] = str.substring(matchPosEnd);
        if (matches.length === 0) {
            return str;
        }
        if ((arguments.length - 1) < convCount) {
            return null;
        }
        var substitution;
        var i = 0;
        for (; i < matches.length; i++) {
            match = matches[i];
            switch (match.code) {
                case '%':
                    substitution = '%';
                    break;
                // case 'b':
                //     match.argument = String(Math.abs(parseInt(match.argument)).toString(2));
                //     substitution = convert(match, true);
                //     break;
                // case 'c':
                //     match.argument = String.fromCharCode( parseInt( String(Math.abs( parseInt(match.argument)) )));
                //     substitution = convert(match, true);
                //     break;
                case 'd':
                    match.argument = String(Math.abs(parseInt(match.argument)));
                    substitution = convert(match);
                    break;
                // case 'f':               
                //     match.argument = String(Math.abs(parseFloat(match.argument)).toFixed(match.precision ? match.precision : 6));
                //     substitution = convert(match);
                //     break;
                // case 'o':
                //     match.argument = String(Math.abs(parseInt(match.argument)).toString(8));
                //     substitution = convert(match);
                //     break;
                case 's':
                    match.argument = match.argument.substring(0, match.precision ? match.precision : match.argument.length);
                    substitution = convert(match, true);
                    break;
                // case 'x':
                //     match.argument = String(Math.abs(parseInt(match.argument)).toString(16));
                //     substitution = convert(match);
                //     break;
                // case 'X':
                //     match.argument = String(Math.abs(parseInt(match.argument)).toString(16));
                //     substitution = convert(match).toUpperCase();
                //     break;
                default:
                    substitution = match.match;
            }
            newString += strings[i];
            newString += substitution;
        }
        newString += strings[i];
        return newString;
    }
    StringUtil.printf = printf;
    function convert(match, nosign) {
        if (nosign === void 0) { nosign = false; }
        if (nosign) {
            match.sign = '';
        }
        else {
            match.sign = match.negative ? '-' : match.sign;
        }
        var l = match.min - match.argument.length + 1 - match.sign.length;
        var pad = new Array(l < 0 ? 0 : l).join(match.pad);
        if (!match.left) {
            if (match.pad === "0" || nosign) {
                return match.sign + pad + match.argument;
            }
            else {
                return pad + match.sign + match.argument;
            }
        }
        else {
            if (match.pad === "0" || nosign) {
                return match.sign + match.argument + pad.replace(/0/g, ' ');
            }
            else {
                return match.sign + match.argument + pad;
            }
        }
    }
})(StringUtil || (StringUtil = {}));
var TimeUtil;
(function (TimeUtil) {
    //-------------------------------------------------------------------
    var _svrBegin; //开服当天，0点， 单位毫秒
    var _localTm;
    var _svrTm;
    function setBeginTm(beginTm_s) {
        _svrBegin = getTodayTm(beginTm_s * 1000);
    }
    TimeUtil.setBeginTm = setBeginTm;
    function isFirstDay() {
        var severTm = getSvrMS();
        return TimeUtil.getTodayTm(severTm) == _svrBegin;
    }
    TimeUtil.isFirstDay = isFirstDay;
    function setSvrTm(svrTm) {
        _localTm = Date.now();
        _svrTm = svrTm * 1000;
    }
    TimeUtil.setSvrTm = setSvrTm;
    /**
     * 获取当前服务器的时间戳，单位毫秒
     *
     * */
    function getSvrMS() {
        return _svrTm + Math.floor((Date.now() - _localTm));
    }
    TimeUtil.getSvrMS = getSvrMS;
    function getSvrSec() {
        return Math.floor(getSvrMS() / 1000);
    }
    TimeUtil.getSvrSec = getSvrSec;
    /**
     * 返回时间戳转换成时间表达式
     * @param ts: timestamp
     * @return string xxxx/xx/xx xx:xx
     */
    function formatTsStr(ts) {
        var date = new Date(ts * 1000);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hour = date.getHours();
        var minute = date.getMinutes();
        var mStr = minute.toString();
        if (minute < 10) {
            mStr = "0" + minute;
        }
        var str = year + "/" + month + "/" + day + " " + hour + ":" + mStr;
        return str;
    }
    TimeUtil.formatTsStr = formatTsStr;
    function formatHmsTime(ts) {
        var date = new Date(ts * 1000);
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hour = date.getHours();
        var minute = date.getMinutes();
        var second = date.getSeconds();
        var mStr = minute.toString();
        var sStr = second.toString();
        if (minute < 10) {
            mStr = "0" + minute;
        }
        if (second < 10) {
            sStr = "0" + second;
        }
        var str = year + "-" + month + "-" + day + " " + hour + ":" + mStr + ":" + sStr;
        return str;
    }
    TimeUtil.formatHmsTime = formatHmsTime;
    //--------------------------------------------------------------
    /**
     *	@brief	获取相对当天具体时间点的时间
        *
        *	@param 	svrTm 服务器时间  单位毫秒
        *	@param 	offHour 	相当于0点的 移动值  时间点 单位小时
        *
        *	@return 时间戳 单位秒
        */
    function getRefreshTm(svrTm, refreshHour) {
        if (refreshHour === void 0) { refreshHour = 0; }
        var nowDate = new Date(svrTm);
        var nowHour = nowDate.getHours();
        nowDate.setHours(0, 0, 0, 0);
        var retTm = Math.floor(nowDate.getTime() / 1000) + refreshHour * 3600;
        if (nowHour < refreshHour) {
            retTm -= 86400;
        }
        return retTm;
    }
    TimeUtil.getRefreshTm = getRefreshTm;
    /**
     *	@brief	获取参数now当天的几点几分的time_t
        *
        *	@param 	time 要获取的当前时间 单位毫秒
        *	@param 	h 	时
        *	@param 	m 	分
        *	@param 	s 	秒
        *
        *	@return 时间戳 单位毫秒
        */
    function getTodayTm(msTm, h, m, s, ms) {
        if (h === void 0) { h = 0; }
        if (m === void 0) { m = 0; }
        if (s === void 0) { s = 0; }
        if (ms === void 0) { ms = 0; }
        var date = new Date(msTm);
        date.setHours(h, m, s, ms);
        return date.getTime();
    }
    TimeUtil.getTodayTm = getTodayTm;
    //明天0点
    function getTowTm(now, h, m, s) {
        if (h === void 0) { h = 0; }
        if (m === void 0) { m = 0; }
        if (s === void 0) { s = 0; }
        return TimeUtil.getTodayTm(now, h, m, s) + 86400000 /* MILLIS_PER_DAY */;
    }
    TimeUtil.getTowTm = getTowTm;
    //到明天还有多久
    function getTowDiff(now, h, m, s) {
        if (h === void 0) { h = 0; }
        if (m === void 0) { m = 0; }
        if (s === void 0) { s = 0; }
        return TimeUtil.getTowTm(now, h, m, s) - now;
    }
    TimeUtil.getTowDiff = getTowDiff;
    /**
     * 判断是否为同一天
     * */
    function equalsDay(secTm1, secTm2) {
        var tm1 = new Date(secTm1);
        var tm2 = new Date(secTm2);
        return tm1.getFullYear() == tm2.getFullYear() && tm1.getMonth() == tm2.getMonth() && tm1.getDate() == tm2.getDate();
    }
    TimeUtil.equalsDay = equalsDay;
    /**
     * 本期结束还有几天几时几分几秒 周一 和周五零点结束
     */
    function formatTm() {
        var svrTm = getSvrMS();
        var tm = new Date(svrTm);
        //获取今天0点的时间戳
        var todayZeroTm = getRefreshTm(svrTm) * 1000;
        //获取今天周几
        var weekDay = tm.getDay();
        if (weekDay == 0)
            weekDay = 7;
        var finTm = 0; //单位毫秒
        if (weekDay > 0 && weekDay < 5) {
            finTm = todayZeroTm + 86400000 /* MILLIS_PER_DAY */ * (5 - weekDay);
        }
        else {
            finTm = todayZeroTm + 86400000 /* MILLIS_PER_DAY */ * (8 - weekDay);
        }
        //获取现在时间到结束时间的差值 
        var offTm = finTm - svrTm;
        return getHourMinSec(offTm);
    }
    TimeUtil.formatTm = formatTm;
    /**
     *
     * @param tm 毫秒
     */
    function getHourMinSec(offTm) {
        var date = {};
        var day = 0;
        var hour = 0;
        var min = 0;
        var sec = 0;
        day = offTm >= 86400000 /* MILLIS_PER_DAY */ ? Math.floor(offTm / 86400000 /* MILLIS_PER_DAY */) : 0;
        date.day = day;
        offTm -= day * 86400000 /* MILLIS_PER_DAY */;
        hour = offTm >= 3600000 /* MILLIS_PER_HOUR */ ? Math.floor(offTm / 3600000 /* MILLIS_PER_HOUR */) : 0;
        date.hour = hour;
        offTm -= hour * 3600000 /* MILLIS_PER_HOUR */;
        min = offTm >= 60000 /* MILLIS_PER_MINUTE */ ? Math.floor(offTm / 60000 /* MILLIS_PER_MINUTE */) : 0;
        date.min = min;
        offTm -= min * 60000 /* MILLIS_PER_MINUTE */;
        sec = offTm >= 1000 /* MILLIS_PER_SECOND */ ? Math.floor(offTm / 1000 /* MILLIS_PER_SECOND */) : 0;
        date.sec = sec;
        offTm -= sec * 1000 /* MILLIS_PER_SECOND */;
        return date;
    }
    TimeUtil.getHourMinSec = getHourMinSec;
    /**
     *
     * @param myMonth 1-12
     */
    function getMonthDays(myMonth) {
        var svrTm = getSvrMS();
        var year = new Date(svrTm).getFullYear();
        var monthStartDate = new Date(year, myMonth - 1, 1);
        var monthEndDate = new Date(year, myMonth, 1);
        var days = (monthEndDate - monthStartDate) / 86400000 /* MILLIS_PER_DAY */;
        return days;
    }
    TimeUtil.getMonthDays = getMonthDays;
})(TimeUtil || (TimeUtil = {}));
var game;
(function (game) {
    var DefeatGeneral = (function (_super) {
        __extends(DefeatGeneral, _super);
        function DefeatGeneral() {
            var _this = _super.call(this) || this;
            var self = _this;
            self.skinName = "DefeatGeneralSkin";
            self._idx = 0;
            self.vCenter = 0;
            self.hCenter = 0;
            self.pri = 10000 /* top */;
            return _this;
        }
        DefeatGeneral.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            self.skRecharge.setTarget(function () {
                self.close();
                if (game.dataMgr.generalMo.isFunOpen(7 /* shop */)) {
                    game.gameScene.showHallUI(2 /* shop */);
                }
            }, self);
            self.skClose.setTarget(function () {
                TRain.soundMgr.playSFX("click" /* click */);
                self.close();
            }, self);
            var list = self.skList;
            list.itemRender = DefeatGItem;
            var dataPro = list.dataProvider = new cui.ArrayCollection();
            var count = 6 /* almsMaxCount */ - game.dataMgr.accMo.getData().collected;
            var shwoArr = [];
            if (count > 0) {
                shwoArr.push({
                    handle: self,
                    id: 0,
                    isAlms: true,
                });
            }
            var actDatas = game.dataMgr.actMo.getData().reviveList;
            if (actDatas) {
                for (var i = 0, len = actDatas.length; i < len; i++) {
                    var actData = actDatas[i];
                    var showData = {
                        handle: self,
                        id: i + 1,
                        isAlms: false,
                        uId: actData.uId,
                    };
                    shwoArr.push(showData);
                }
            }
            dataPro.source = shwoArr;
            self.skLeft.visible = self._idx != 0;
            self.skRight.visible = self._idx > 0;
        };
        DefeatGeneral.prototype.click = function (item) {
            var self = this;
            self.close();
            var data = item.data;
            if (data.isAlms) {
                var view = game.dataMgr.accMo.getData().isFormal ? new game.SaveMoneyDialog() : new game.BindGiftDialog();
                game.gameScene.openPopup(view);
            }
            else {
                game.gameScene.showHallUI(8 /* activity */, { tp: 0, state: 1 /* hall */, uid: data.uId });
            }
        };
        return DefeatGeneral;
    }(game.UIPopup));
    game.DefeatGeneral = DefeatGeneral;
    __reflect(DefeatGeneral.prototype, "game.DefeatGeneral");
    var DefeatGItem = (function (_super) {
        __extends(DefeatGItem, _super);
        //public skTime:cui.BitmapLabel;
        function DefeatGItem() {
            var _this = _super.call(this) || this;
            _this.skinName = "DefeatGItemSkin";
            return _this;
        }
        DefeatGItem.prototype.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            var self = this;
            var data = self.data;
            self.skAni.dbNm = "defeatRevive" + data.id;
            self.skClick.setTarget(function () {
                data.handle.click(self);
            }, self);
        };
        return DefeatGItem;
    }(cui.DataItem));
    game.DefeatGItem = DefeatGItem;
    __reflect(DefeatGItem.prototype, "game.DefeatGItem");
})(game || (game = {}));
